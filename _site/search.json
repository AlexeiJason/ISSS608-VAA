[
  {
    "objectID": "WHR/WHRplot.html",
    "href": "WHR/WHRplot.html",
    "title": "WHRplot",
    "section": "",
    "text": "pacman::p_load(skimr,tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes,corrplot,GGally)\ndata = read.csv (\"World Happiness Data (2010-2019)_cleaned.csv\")\nWHRdata &lt;- data %&gt;%\n  filter(Year &gt;= 2010 & Year &lt;= 2019)"
  },
  {
    "objectID": "WHR/WHRplot.html#gdp",
    "href": "WHR/WHRplot.html#gdp",
    "title": "WHRplot",
    "section": "GDP",
    "text": "GDP\n\nscp1 = ggplot(WHRdata, aes(x = Log.GDP.per.Capita, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp1a= ggplot(WHRdata, aes(x = Log.GDP.per.Capita, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp1\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp1a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHRplot.html#social-support",
    "href": "WHR/WHRplot.html#social-support",
    "title": "WHRplot",
    "section": "Social Support",
    "text": "Social Support\n\nscp2 = ggplot(WHRdata, aes(x = Social.Support, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp2a = ggplot(WHRdata, aes(x = Social.Support, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp2\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp2a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHRplot.html#life-expectancy",
    "href": "WHR/WHRplot.html#life-expectancy",
    "title": "WHRplot",
    "section": "Life Expectancy",
    "text": "Life Expectancy\n\nscp3 = ggplot(WHRdata, aes(x = Healthy.Life.Expectancy, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp3a = ggplot(WHRdata, aes(x = Healthy.Life.Expectancy, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp3a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHRplot.html#freedom",
    "href": "WHR/WHRplot.html#freedom",
    "title": "WHRplot",
    "section": "Freedom",
    "text": "Freedom\n\nscp4 = ggplot(WHRdata, aes(x =Freedom, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp4a = ggplot(WHRdata, aes(x =Freedom, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp4\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp4a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHRplot.html#corruption",
    "href": "WHR/WHRplot.html#corruption",
    "title": "WHRplot",
    "section": "Corruption",
    "text": "Corruption\n\nscp5 = ggplot(WHRdata, aes(x = Perceptions.of.Corruption, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp5a = ggplot(WHRdata, aes(x = Perceptions.of.Corruption, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp5\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp5a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHRplot.html#generosity",
    "href": "WHR/WHRplot.html#generosity",
    "title": "WHRplot",
    "section": "Generosity",
    "text": "Generosity\n\nscp6 = ggplot(WHRdata, aes(x = Generosity, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp6a = ggplot(WHRdata, aes(x = Generosity, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp6\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp6a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHRplot.html#gdp-1",
    "href": "WHR/WHRplot.html#gdp-1",
    "title": "WHRplot",
    "section": "GDP",
    "text": "GDP\n\nscp1 = ggplot(WHRdata, aes(x = Log.GDP.per.Capita, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp1a= ggplot(WHRdata, aes(x = Log.GDP.per.Capita, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp1b= ggplot(WHRdata, aes(x = Log.GDP.per.Capita, y = Happiness.Score)) + \n  geom_point(aes(color=sub.region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = sub.region, fill = sub.region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~sub.region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\nscp1b_interactive &lt;- ggplotly(scp1b)\n\n`geom_smooth()` using formula = 'y ~ x'\n\nscp1_interactive &lt;- ggplotly(scp1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Interactive scatter plot with regression line, colored by Region and faceted\nscp1a_interactive &lt;- ggplotly(scp1a)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Displaying the interactive plots side by side\nsubplot(scp1_interactive, nrows = 1)\n\n\n\n\nsubplot(scp1a_interactive, nrows = 1)\n\n\n\n\nsubplot(scp1b_interactive, nrows = 1)"
  },
  {
    "objectID": "WHR/WHRplot.html#social-support-1",
    "href": "WHR/WHRplot.html#social-support-1",
    "title": "WHRplot",
    "section": "Social Support",
    "text": "Social Support\n\nscp2 = ggplot(WHRdata, aes(x = Social.Support, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp2a = ggplot(WHRdata, aes(x = Social.Support, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp2_interactive &lt;- ggplotly(scp2)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Interactive scatter plot with regression line, colored by Region and faceted\nscp2a_interactive &lt;- ggplotly(scp2a)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Displaying the interactive plots side by side\nsubplot(scp2_interactive, nrows = 1)\n\n\n\n\nsubplot(scp2a_interactive, nrows = 1)"
  },
  {
    "objectID": "WHR/WHRplot.html#life-expectancy-1",
    "href": "WHR/WHRplot.html#life-expectancy-1",
    "title": "WHRplot",
    "section": "Life Expectancy",
    "text": "Life Expectancy\n\nscp3 = ggplot(WHRdata, aes(x = Healthy.Life.Expectancy, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp3a = ggplot(WHRdata, aes(x = Healthy.Life.Expectancy, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp3_interactive &lt;- ggplotly(scp3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Interactive scatter plot with regression line, colored by Region and faceted\nscp3a_interactive &lt;- ggplotly(scp3a)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Displaying the interactive plots side by side\nsubplot(scp3_interactive, nrows = 1)\n\n\n\n\nsubplot(scp3a_interactive, nrows = 1)"
  },
  {
    "objectID": "WHR/WHRplot.html#freedom-1",
    "href": "WHR/WHRplot.html#freedom-1",
    "title": "WHRplot",
    "section": "Freedom",
    "text": "Freedom\n\nscp4 = ggplot(WHRdata, aes(x =Freedom, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp4a = ggplot(WHRdata, aes(x =Freedom, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp4_interactive &lt;- ggplotly(scp4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Interactive scatter plot with regression line, colored by Region and faceted\nscp4a_interactive &lt;- ggplotly(scp4a)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Displaying the interactive plots side by side\nsubplot(scp4_interactive, nrows = 1)\n\n\n\n\nsubplot(scp4a_interactive, nrows = 1)"
  },
  {
    "objectID": "WHR/WHRplot.html#corruption-1",
    "href": "WHR/WHRplot.html#corruption-1",
    "title": "WHRplot",
    "section": "Corruption",
    "text": "Corruption\n\nscp5 = ggplot(WHRdata, aes(x = Perceptions.of.Corruption, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp5a = ggplot(WHRdata, aes(x = Perceptions.of.Corruption, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp5_interactive &lt;- ggplotly(scp5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Interactive scatter plot with regression line, colored by Region and faceted\nscp5a_interactive &lt;- ggplotly(scp5a)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Displaying the interactive plots side by side\nsubplot(scp5_interactive, nrows = 1)\n\n\n\n\nsubplot(scp5a_interactive, nrows = 1)"
  },
  {
    "objectID": "WHR/WHRplot.html#generosity-1",
    "href": "WHR/WHRplot.html#generosity-1",
    "title": "WHRplot",
    "section": "Generosity",
    "text": "Generosity\n\nscp6 = ggplot(WHRdata, aes(x = Generosity, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp6a = ggplot(WHRdata, aes(x = Generosity, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp6_interactive &lt;- ggplotly(scp6)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Interactive scatter plot with regression line, colored by Region and faceted\nscp6a_interactive &lt;- ggplotly(scp6a)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n# Displaying the interactive plots side by side\nsubplot(scp6_interactive, nrows = 1)\n\n\n\n\nsubplot(scp6a_interactive, nrows = 1)"
  },
  {
    "objectID": "WHR/WHR1523.html",
    "href": "WHR/WHR1523.html",
    "title": "WHR 2015-2023",
    "section": "",
    "text": "pacman::p_load(skimr,tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes,corrplot,GGally)\n\n\n\n\n\nWHRdata2015 = read.csv (\"data/WHR2023/WHR_2015.csv\")\nWHRdata2016 = read.csv (\"data/WHR2023/WHR_2016.csv\")\nWHRdata2017 = read.csv (\"data/WHR2023/WHR_2017.csv\")\nWHRdata2018 = read.csv (\"data/WHR2023/WHR_2018.csv\")\nWHRdata2019 = read.csv (\"data/WHR2023/WHR_2019.csv\")\nWHRdata2020 = read.csv (\"data/WHR2023/WHR_2020.csv\")\nWHRdata2021 = read.csv (\"data/WHR2023/WHR_2021.csv\")\nWHRdata2022 = read.csv (\"data/WHR2023/WHR_2022.csv\")\nWHRdata2023 = read.csv (\"data/WHR2023/WHR_2023.csv\")\nhead(WHRdata2015)\n\n      country                region happiness_score gdp_per_capita\n1 Switzerland        Western Europe           7.587        1.39651\n2     Iceland        Western Europe           7.561        1.30232\n3     Denmark        Western Europe           7.527        1.32548\n4      Norway        Western Europe           7.522        1.45900\n5      Canada North America and ANZ           7.427        1.32629\n6     Finland        Western Europe           7.406        1.29025\n  social_support healthy_life_expectancy freedom_to_make_life_choices\n1        1.34951                 0.94143                      0.66557\n2        1.40223                 0.94784                      0.62877\n3        1.36058                 0.87464                      0.64938\n4        1.33095                 0.88521                      0.66973\n5        1.32261                 0.90563                      0.63297\n6        1.31826                 0.88911                      0.64169\n  generosity perceptions_of_corruption\n1    0.29678                   0.41978\n2    0.43630                   0.14145\n3    0.34139                   0.48357\n4    0.34699                   0.36503\n5    0.45811                   0.32957\n6    0.23351                   0.41372\n\n\n\nWHRdata2018$perceptions_of_corruption = as.numeric(WHRdata2018$perceptions_of_corruption)\n\nWarning: NAs introduced by coercion\n\nstr(WHRdata2018)\n\n'data.frame':   156 obs. of  9 variables:\n $ country                     : chr  \"Finland\" \"Norway\" \"Denmark\" \"Iceland\" ...\n $ region                      : chr  \"Western Europe\" \"Western Europe\" \"Western Europe\" \"Western Europe\" ...\n $ happiness_score             : num  7.63 7.59 7.55 7.5 7.49 ...\n $ gdp_per_capita              : num  1.3 1.46 1.35 1.34 1.42 ...\n $ social_support              : num  1.59 1.58 1.59 1.64 1.55 ...\n $ healthy_life_expectancy     : num  0.874 0.861 0.868 0.914 0.927 0.878 0.896 0.876 0.913 0.91 ...\n $ freedom_to_make_life_choices: num  0.681 0.686 0.683 0.677 0.66 0.638 0.653 0.669 0.659 0.647 ...\n $ generosity                  : num  0.202 0.286 0.284 0.353 0.256 0.333 0.321 0.365 0.285 0.361 ...\n $ perceptions_of_corruption   : num  0.393 0.34 0.408 0.138 0.357 0.295 0.291 0.389 0.383 0.302 ...\n\n\n\nWHRdata2015&lt;-cbind(Year=2015,WHRdata2015)\n\nWHRdata2016&lt;-cbind(Year=2016,WHRdata2016)\n\nWHRdata2017&lt;-cbind(Year=2017,WHRdata2017)\n\nWHRdata2018&lt;-cbind(Year=2018,WHRdata2018)\n\nWHRdata2019&lt;-cbind(Year=2019,WHRdata2019)\n\nWHRdata2020&lt;-cbind(Year=2020,WHRdata2020)\n\nWHRdata2021&lt;-cbind(Year=2021,WHRdata2021)\n\nWHRdata2022&lt;-cbind(Year=2022,WHRdata2022)\n\nWHRdata2023&lt;-cbind(Year=2023,WHRdata2023)\n\n\nWHRdata20152016&lt;-dplyr::bind_rows(WHRdata2015,WHRdata2016)\n\nWHRdata201520162017&lt;-dplyr::bind_rows(WHRdata20152016,WHRdata2017)\n\nWHRdata20182019&lt;-dplyr::bind_rows(WHRdata2018,WHRdata2019)\n\nWHRdata20202021&lt;-dplyr::bind_rows(WHRdata2020,WHRdata2021)\n\nWHRdata20222023&lt;-dplyr::bind_rows(WHRdata2022,WHRdata2023)\n\nWHRdata2&lt;-dplyr::bind_rows(WHRdata20202021,WHRdata20222023)\n\nWHRdata1&lt;-dplyr::bind_rows(WHRdata201520162017,WHRdata20182019)\n\nWHRdata&lt;-dplyr::bind_rows(WHRdata1,WHRdata2)\nhead(WHRdata)\n\n  Year     country                region happiness_score gdp_per_capita\n1 2015 Switzerland        Western Europe           7.587        1.39651\n2 2015     Iceland        Western Europe           7.561        1.30232\n3 2015     Denmark        Western Europe           7.527        1.32548\n4 2015      Norway        Western Europe           7.522        1.45900\n5 2015      Canada North America and ANZ           7.427        1.32629\n6 2015     Finland        Western Europe           7.406        1.29025\n  social_support healthy_life_expectancy freedom_to_make_life_choices\n1        1.34951                 0.94143                      0.66557\n2        1.40223                 0.94784                      0.62877\n3        1.36058                 0.87464                      0.64938\n4        1.33095                 0.88521                      0.66973\n5        1.32261                 0.90563                      0.63297\n6        1.31826                 0.88911                      0.64169\n  generosity perceptions_of_corruption\n1    0.29678                   0.41978\n2    0.43630                   0.14145\n3    0.34139                   0.48357\n4    0.34699                   0.36503\n5    0.45811                   0.32957\n6    0.23351                   0.41372\n\n\n\ncolSums(is.na(WHRdata))\n\n                        Year                      country \n                           0                            0 \n                      region              happiness_score \n                           0                            0 \n              gdp_per_capita               social_support \n                           0                            0 \n     healthy_life_expectancy freedom_to_make_life_choices \n                           1                            0 \n                  generosity    perceptions_of_corruption \n                           0                            1 \n\n\n\nWHRdata$healthy_life_expectancy[is.na(WHRdata$healthy_life_expectancy)] &lt;- median(WHRdata$healthy_life_expectancy, na.rm = T)\n\nWHRdata$perceptions_of_corruption[is.na(WHRdata$perceptions_of_corruption)] &lt;- median(WHRdata$perceptions_of_corruption, na.rm = T)\n\ncolSums(is.na(WHRdata))\n\n                        Year                      country \n                           0                            0 \n                      region              happiness_score \n                           0                            0 \n              gdp_per_capita               social_support \n                           0                            0 \n     healthy_life_expectancy freedom_to_make_life_choices \n                           0                            0 \n                  generosity    perceptions_of_corruption \n                           0                            0 \n\n\n\nCountry_2015 = subset(WHRdata, Year == 2015)$country\nCountry_2016 = subset(WHRdata, Year == 2016)$country\nCountry_2017 = subset(WHRdata, Year == 2017)$country\nCountry_2018 = subset(WHRdata, Year == 2018)$country\nCountry_2019 = subset(WHRdata, Year == 2019)$country\nCountry_2020 = subset(WHRdata, Year == 2020)$country\nCountry_2021 = subset(WHRdata, Year == 2021)$country\nCountry_2022 = subset(WHRdata, Year == 2022)$country\nCountry_2023 = subset(WHRdata, Year == 2023)$country\n\n\ncommon_country =intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(Country_2015,\nCountry_2016),Country_2017),Country_2018),Country_2019),Country_2020),Country_2021),Country_2022),Country_2023)\n\nlength(common_country)\n\n[1] 127\n\n\n\nWHRdata_cleaned = subset(WHRdata,country %in% common_country)\n\n\nskimr::skim_without_charts(WHRdata_cleaned)\n\n\nData summary\n\n\nName\nWHRdata_cleaned\n\n\nNumber of rows\n1145\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n25\n0\n127\n0\n\n\nregion\n0\n1\n9\n34\n0\n10\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\n\n\n\n\nYear\n0\n1\n2019.00\n2.58\n2015.00\n2017.00\n2019.00\n2021.00\n2023.00\n\n\nhappiness_score\n0\n1\n5.57\n1.09\n1.86\n4.72\n5.62\n6.36\n7.84\n\n\ngdp_per_capita\n0\n1\n1.06\n0.44\n0.00\n0.77\n1.08\n1.36\n2.21\n\n\nsocial_support\n0\n1\n1.07\n0.32\n0.00\n0.87\n1.10\n1.32\n1.64\n\n\nhealthy_life_expectancy\n0\n1\n0.61\n0.24\n0.00\n0.44\n0.64\n0.79\n1.14\n\n\nfreedom_to_make_life_choices\n0\n1\n0.46\n0.15\n0.00\n0.38\n0.48\n0.58\n0.77\n\n\ngenerosity\n0\n1\n0.20\n0.11\n0.00\n0.12\n0.18\n0.25\n0.84\n\n\nperceptions_of_corruption\n0\n1\n0.13\n0.11\n0.00\n0.05\n0.09\n0.16\n0.59"
  },
  {
    "objectID": "WHR/WHR1523.html#importing-packages",
    "href": "WHR/WHR1523.html#importing-packages",
    "title": "WHR 2015-2023",
    "section": "",
    "text": "pacman::p_load(skimr,tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes,corrplot,GGally)"
  },
  {
    "objectID": "WHR/WHR1523.html#importing-datasets",
    "href": "WHR/WHR1523.html#importing-datasets",
    "title": "WHR 2015-2023",
    "section": "",
    "text": "WHRdata2015 = read.csv (\"data/WHR2023/WHR_2015.csv\")\nWHRdata2016 = read.csv (\"data/WHR2023/WHR_2016.csv\")\nWHRdata2017 = read.csv (\"data/WHR2023/WHR_2017.csv\")\nWHRdata2018 = read.csv (\"data/WHR2023/WHR_2018.csv\")\nWHRdata2019 = read.csv (\"data/WHR2023/WHR_2019.csv\")\nWHRdata2020 = read.csv (\"data/WHR2023/WHR_2020.csv\")\nWHRdata2021 = read.csv (\"data/WHR2023/WHR_2021.csv\")\nWHRdata2022 = read.csv (\"data/WHR2023/WHR_2022.csv\")\nWHRdata2023 = read.csv (\"data/WHR2023/WHR_2023.csv\")\nhead(WHRdata2015)\n\n      country                region happiness_score gdp_per_capita\n1 Switzerland        Western Europe           7.587        1.39651\n2     Iceland        Western Europe           7.561        1.30232\n3     Denmark        Western Europe           7.527        1.32548\n4      Norway        Western Europe           7.522        1.45900\n5      Canada North America and ANZ           7.427        1.32629\n6     Finland        Western Europe           7.406        1.29025\n  social_support healthy_life_expectancy freedom_to_make_life_choices\n1        1.34951                 0.94143                      0.66557\n2        1.40223                 0.94784                      0.62877\n3        1.36058                 0.87464                      0.64938\n4        1.33095                 0.88521                      0.66973\n5        1.32261                 0.90563                      0.63297\n6        1.31826                 0.88911                      0.64169\n  generosity perceptions_of_corruption\n1    0.29678                   0.41978\n2    0.43630                   0.14145\n3    0.34139                   0.48357\n4    0.34699                   0.36503\n5    0.45811                   0.32957\n6    0.23351                   0.41372\n\n\n\nWHRdata2018$perceptions_of_corruption = as.numeric(WHRdata2018$perceptions_of_corruption)\n\nWarning: NAs introduced by coercion\n\nstr(WHRdata2018)\n\n'data.frame':   156 obs. of  9 variables:\n $ country                     : chr  \"Finland\" \"Norway\" \"Denmark\" \"Iceland\" ...\n $ region                      : chr  \"Western Europe\" \"Western Europe\" \"Western Europe\" \"Western Europe\" ...\n $ happiness_score             : num  7.63 7.59 7.55 7.5 7.49 ...\n $ gdp_per_capita              : num  1.3 1.46 1.35 1.34 1.42 ...\n $ social_support              : num  1.59 1.58 1.59 1.64 1.55 ...\n $ healthy_life_expectancy     : num  0.874 0.861 0.868 0.914 0.927 0.878 0.896 0.876 0.913 0.91 ...\n $ freedom_to_make_life_choices: num  0.681 0.686 0.683 0.677 0.66 0.638 0.653 0.669 0.659 0.647 ...\n $ generosity                  : num  0.202 0.286 0.284 0.353 0.256 0.333 0.321 0.365 0.285 0.361 ...\n $ perceptions_of_corruption   : num  0.393 0.34 0.408 0.138 0.357 0.295 0.291 0.389 0.383 0.302 ...\n\n\n\nWHRdata2015&lt;-cbind(Year=2015,WHRdata2015)\n\nWHRdata2016&lt;-cbind(Year=2016,WHRdata2016)\n\nWHRdata2017&lt;-cbind(Year=2017,WHRdata2017)\n\nWHRdata2018&lt;-cbind(Year=2018,WHRdata2018)\n\nWHRdata2019&lt;-cbind(Year=2019,WHRdata2019)\n\nWHRdata2020&lt;-cbind(Year=2020,WHRdata2020)\n\nWHRdata2021&lt;-cbind(Year=2021,WHRdata2021)\n\nWHRdata2022&lt;-cbind(Year=2022,WHRdata2022)\n\nWHRdata2023&lt;-cbind(Year=2023,WHRdata2023)\n\n\nWHRdata20152016&lt;-dplyr::bind_rows(WHRdata2015,WHRdata2016)\n\nWHRdata201520162017&lt;-dplyr::bind_rows(WHRdata20152016,WHRdata2017)\n\nWHRdata20182019&lt;-dplyr::bind_rows(WHRdata2018,WHRdata2019)\n\nWHRdata20202021&lt;-dplyr::bind_rows(WHRdata2020,WHRdata2021)\n\nWHRdata20222023&lt;-dplyr::bind_rows(WHRdata2022,WHRdata2023)\n\nWHRdata2&lt;-dplyr::bind_rows(WHRdata20202021,WHRdata20222023)\n\nWHRdata1&lt;-dplyr::bind_rows(WHRdata201520162017,WHRdata20182019)\n\nWHRdata&lt;-dplyr::bind_rows(WHRdata1,WHRdata2)\nhead(WHRdata)\n\n  Year     country                region happiness_score gdp_per_capita\n1 2015 Switzerland        Western Europe           7.587        1.39651\n2 2015     Iceland        Western Europe           7.561        1.30232\n3 2015     Denmark        Western Europe           7.527        1.32548\n4 2015      Norway        Western Europe           7.522        1.45900\n5 2015      Canada North America and ANZ           7.427        1.32629\n6 2015     Finland        Western Europe           7.406        1.29025\n  social_support healthy_life_expectancy freedom_to_make_life_choices\n1        1.34951                 0.94143                      0.66557\n2        1.40223                 0.94784                      0.62877\n3        1.36058                 0.87464                      0.64938\n4        1.33095                 0.88521                      0.66973\n5        1.32261                 0.90563                      0.63297\n6        1.31826                 0.88911                      0.64169\n  generosity perceptions_of_corruption\n1    0.29678                   0.41978\n2    0.43630                   0.14145\n3    0.34139                   0.48357\n4    0.34699                   0.36503\n5    0.45811                   0.32957\n6    0.23351                   0.41372\n\n\n\ncolSums(is.na(WHRdata))\n\n                        Year                      country \n                           0                            0 \n                      region              happiness_score \n                           0                            0 \n              gdp_per_capita               social_support \n                           0                            0 \n     healthy_life_expectancy freedom_to_make_life_choices \n                           1                            0 \n                  generosity    perceptions_of_corruption \n                           0                            1 \n\n\n\nWHRdata$healthy_life_expectancy[is.na(WHRdata$healthy_life_expectancy)] &lt;- median(WHRdata$healthy_life_expectancy, na.rm = T)\n\nWHRdata$perceptions_of_corruption[is.na(WHRdata$perceptions_of_corruption)] &lt;- median(WHRdata$perceptions_of_corruption, na.rm = T)\n\ncolSums(is.na(WHRdata))\n\n                        Year                      country \n                           0                            0 \n                      region              happiness_score \n                           0                            0 \n              gdp_per_capita               social_support \n                           0                            0 \n     healthy_life_expectancy freedom_to_make_life_choices \n                           0                            0 \n                  generosity    perceptions_of_corruption \n                           0                            0 \n\n\n\nCountry_2015 = subset(WHRdata, Year == 2015)$country\nCountry_2016 = subset(WHRdata, Year == 2016)$country\nCountry_2017 = subset(WHRdata, Year == 2017)$country\nCountry_2018 = subset(WHRdata, Year == 2018)$country\nCountry_2019 = subset(WHRdata, Year == 2019)$country\nCountry_2020 = subset(WHRdata, Year == 2020)$country\nCountry_2021 = subset(WHRdata, Year == 2021)$country\nCountry_2022 = subset(WHRdata, Year == 2022)$country\nCountry_2023 = subset(WHRdata, Year == 2023)$country\n\n\ncommon_country =intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(Country_2015,\nCountry_2016),Country_2017),Country_2018),Country_2019),Country_2020),Country_2021),Country_2022),Country_2023)\n\nlength(common_country)\n\n[1] 127\n\n\n\nWHRdata_cleaned = subset(WHRdata,country %in% common_country)\n\n\nskimr::skim_without_charts(WHRdata_cleaned)\n\n\nData summary\n\n\nName\nWHRdata_cleaned\n\n\nNumber of rows\n1145\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ncountry\n0\n1\n4\n25\n0\n127\n0\n\n\nregion\n0\n1\n9\n34\n0\n10\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\n\n\n\n\nYear\n0\n1\n2019.00\n2.58\n2015.00\n2017.00\n2019.00\n2021.00\n2023.00\n\n\nhappiness_score\n0\n1\n5.57\n1.09\n1.86\n4.72\n5.62\n6.36\n7.84\n\n\ngdp_per_capita\n0\n1\n1.06\n0.44\n0.00\n0.77\n1.08\n1.36\n2.21\n\n\nsocial_support\n0\n1\n1.07\n0.32\n0.00\n0.87\n1.10\n1.32\n1.64\n\n\nhealthy_life_expectancy\n0\n1\n0.61\n0.24\n0.00\n0.44\n0.64\n0.79\n1.14\n\n\nfreedom_to_make_life_choices\n0\n1\n0.46\n0.15\n0.00\n0.38\n0.48\n0.58\n0.77\n\n\ngenerosity\n0\n1\n0.20\n0.11\n0.00\n0.12\n0.18\n0.25\n0.84\n\n\nperceptions_of_corruption\n0\n1\n0.13\n0.11\n0.00\n0.05\n0.09\n0.16\n0.59"
  },
  {
    "objectID": "WHR/WHR.html",
    "href": "WHR/WHR.html",
    "title": "WHR",
    "section": "",
    "text": "pacman::p_load(skimr,tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes,corrplot,GGally)\n\n\n\n\n\nWHRdata2015 = read.csv (\"data/WHRdata2015.csv\")\nWHRdata2016 = read.csv (\"data/WHRdata2016.csv\")\nWHRdata2017 = read.csv (\"data/WHRdata2017.csv\")\nWHRdata2018 = read.csv (\"data/WHRdata2018.csv\")\nWHRdata2019 = read.csv (\"data/WHRdata2019.csv\")\nhead(WHRdata2019)\n\n  Overall.rank Country.or.region Score GDP.per.capita Social.support\n1            1           Finland 7.769          1.340          1.587\n2            2           Denmark 7.600          1.383          1.573\n3            3            Norway 7.554          1.488          1.582\n4            4           Iceland 7.494          1.380          1.624\n5            5       Netherlands 7.488          1.396          1.522\n6            6       Switzerland 7.480          1.452          1.526\n  Healthy.life.expectancy Freedom.to.make.life.choices Generosity\n1                   0.986                        0.596      0.153\n2                   0.996                        0.592      0.252\n3                   1.028                        0.603      0.271\n4                   1.026                        0.591      0.354\n5                   0.999                        0.557      0.322\n6                   1.052                        0.572      0.263\n  Perceptions.of.corruption\n1                     0.393\n2                     0.410\n3                     0.341\n4                     0.118\n5                     0.298\n6                     0.343\n\n\n\nWHRdata2019=plyr::rename(WHRdata2019, replace = c( \"Country.or.region\"=\"Country\", \n                                  \"Overall.rank\"=\"Happiness.Rank\" ,\n                                  \"GDP.per.capita\"=\"Economy..GDP.per.Capita.\",\n                                  \"Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Perceptions.of.corruption\"=\"Trust..Government.Corruption.\",\n                                  \"Social.support\"=\"Family\",\n                                  \"Score\"=\"Happiness.Score\"))\ncolnames(WHRdata2019)\n\n[1] \"Happiness.Rank\"                \"Country\"                      \n[3] \"Happiness.Score\"               \"Economy..GDP.per.Capita.\"     \n[5] \"Family\"                        \"Health..Life.Expectancy.\"     \n[7] \"Freedom\"                       \"Generosity\"                   \n[9] \"Trust..Government.Corruption.\"\n\n\n\nWHRdata2018=plyr::rename(WHRdata2018, replace = c( \"Country.or.region\"=\"Country\", \n                                  \"Overall.rank\"=\"Happiness.Rank\" ,\n                                  \"GDP.per.capita\"=\"Economy..GDP.per.Capita.\",\n                                  \"Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Perceptions.of.corruption\"=\"Trust..Government.Corruption.\",\n                                  \"Social.support\"=\"Family\",\n                                  \"Score\"=\"Happiness.Score\"))\ncolnames(WHRdata2018)\n\n[1] \"Happiness.Rank\"                \"Country\"                      \n[3] \"Happiness.Score\"               \"Economy..GDP.per.Capita.\"     \n[5] \"Family\"                        \"Health..Life.Expectancy.\"     \n[7] \"Freedom\"                       \"Generosity\"                   \n[9] \"Trust..Government.Corruption.\"\n\n\n\nWHRdata2015=plyr::rename(WHRdata2015, replace = c( \"Happiness Rank\" = \"Happiness.Rank\", \n                                  \"Happiness Score\" = \"Happiness.Score\",\n                                  \"Economy (GDP per Capita)\" = \"Economy..GDP.per.Capita.\",\n                                  \"Health (Life Expectancy)\" = \"Health..Life.Expectancy.\",\n                                  \"Trust (Government Corruption)\" = \"Trust..Government.Corruption.\",\n                                  \"Dystopia Residual\"=\"Dystopia.Residual\"\n                                  ))\n\nThe following `from` values were not present in `x`: Happiness Rank, Happiness Score, Economy (GDP per Capita), Health (Life Expectancy), Trust (Government Corruption), Dystopia Residual\n\ncolnames(WHRdata2015)\n\n [1] \"Country\"                       \"Region\"                       \n [3] \"Happiness.Rank\"                \"Happiness.Score\"              \n [5] \"Standard.Error\"                \"Economy..GDP.per.Capita.\"     \n [7] \"Family\"                        \"Health..Life.Expectancy.\"     \n [9] \"Freedom\"                       \"Trust..Government.Corruption.\"\n[11] \"Generosity\"                    \"Dystopia.Residual\"            \n\n\n\nWHRdata2016=plyr::rename(WHRdata2016, replace = c( \"Happiness Rank\" = \"Happiness.Rank\", \n                                  \"Happiness Score\" = \"Happiness.Score\",\n                                  \"Economy (GDP per Capita)\" = \"Economy..GDP.per.Capita.\",\n                                  \"Health (Life Expectancy)\" = \"Health..Life.Expectancy.\",\n                                  \"Trust (Government Corruption)\"  = \"Trust..Government.Corruption.\",\n                                  \"Dystopia Residual\"=\"Dystopia.Residual\"\n                                  ))\n\nThe following `from` values were not present in `x`: Happiness Rank, Happiness Score, Economy (GDP per Capita), Health (Life Expectancy), Trust (Government Corruption), Dystopia Residual\n\ncolnames(WHRdata2016)\n\n [1] \"Country\"                       \"Region\"                       \n [3] \"Happiness.Rank\"                \"Happiness.Score\"              \n [5] \"Lower.Confidence.Interval\"     \"Upper.Confidence.Interval\"    \n [7] \"Economy..GDP.per.Capita.\"      \"Family\"                       \n [9] \"Health..Life.Expectancy.\"      \"Freedom\"                      \n[11] \"Trust..Government.Corruption.\" \"Generosity\"                   \n[13] \"Dystopia.Residual\"            \n\n\n\nWHRdata2015&lt;-cbind(Year=2015,WHRdata2015)\n\nWHRdata2016&lt;-cbind(Year=2016,WHRdata2016)\n\nWHRdata2017&lt;-cbind(Year=2017,WHRdata2017)\n\nWHRdata2018&lt;-cbind(Year=2018,WHRdata2018)\n\nWHRdata2019&lt;-cbind(Year=2019,WHRdata2019)\n\n\nWHRdata2018$Trust..Government.Corruption. = as.numeric(WHRdata2018$Trust..Government.Corruption.)\n\nWarning: NAs introduced by coercion\n\nstr(WHRdata2018)\n\n'data.frame':   156 obs. of  10 variables:\n $ Year                         : num  2018 2018 2018 2018 2018 ...\n $ Happiness.Rank               : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Country                      : chr  \"Finland\" \"Norway\" \"Denmark\" \"Iceland\" ...\n $ Happiness.Score              : num  7.63 7.59 7.55 7.5 7.49 ...\n $ Economy..GDP.per.Capita.     : num  1.3 1.46 1.35 1.34 1.42 ...\n $ Family                       : num  1.59 1.58 1.59 1.64 1.55 ...\n $ Health..Life.Expectancy.     : num  0.874 0.861 0.868 0.914 0.927 0.878 0.896 0.876 0.913 0.91 ...\n $ Freedom                      : num  0.681 0.686 0.683 0.677 0.66 0.638 0.653 0.669 0.659 0.647 ...\n $ Generosity                   : num  0.202 0.286 0.284 0.353 0.256 0.333 0.321 0.365 0.285 0.361 ...\n $ Trust..Government.Corruption.: num  0.393 0.34 0.408 0.138 0.357 0.295 0.291 0.389 0.383 0.302 ...\n\n\n\nWHRdata20152016&lt;-dplyr::bind_rows(WHRdata2015,WHRdata2016)\n\nWHRdata201520162017&lt;-dplyr::bind_rows(WHRdata20152016,WHRdata2017)\n\nWHRdata20182019&lt;-dplyr::bind_rows(WHRdata2018,WHRdata2019)\n\nWHRdata&lt;-dplyr::bind_rows(WHRdata201520162017,WHRdata20182019)\nhead(WHRdata)\n\n  Year     Country         Region Happiness.Rank Happiness.Score Standard.Error\n1 2015 Switzerland Western Europe              1           7.587        0.03411\n2 2015     Iceland Western Europe              2           7.561        0.04884\n3 2015     Denmark Western Europe              3           7.527        0.03328\n4 2015      Norway Western Europe              4           7.522        0.03880\n5 2015      Canada  North America              5           7.427        0.03553\n6 2015     Finland Western Europe              6           7.406        0.03140\n  Economy..GDP.per.Capita.  Family Health..Life.Expectancy. Freedom\n1                  1.39651 1.34951                  0.94143 0.66557\n2                  1.30232 1.40223                  0.94784 0.62877\n3                  1.32548 1.36058                  0.87464 0.64938\n4                  1.45900 1.33095                  0.88521 0.66973\n5                  1.32629 1.32261                  0.90563 0.63297\n6                  1.29025 1.31826                  0.88911 0.64169\n  Trust..Government.Corruption. Generosity Dystopia.Residual\n1                       0.41978    0.29678           2.51738\n2                       0.14145    0.43630           2.70201\n3                       0.48357    0.34139           2.49204\n4                       0.36503    0.34699           2.46531\n5                       0.32957    0.45811           2.45176\n6                       0.41372    0.23351           2.61955\n  Lower.Confidence.Interval Upper.Confidence.Interval Whisker.high Whisker.low\n1                        NA                        NA           NA          NA\n2                        NA                        NA           NA          NA\n3                        NA                        NA           NA          NA\n4                        NA                        NA           NA          NA\n5                        NA                        NA           NA          NA\n6                        NA                        NA           NA          NA\n\n\n\nWHRdata$Happiness.Rank  = as.numeric(WHRdata$Happiness.Rank )\n\nstr(WHRdata)\n\n'data.frame':   782 obs. of  17 variables:\n $ Year                         : num  2015 2015 2015 2015 2015 ...\n $ Country                      : chr  \"Switzerland\" \"Iceland\" \"Denmark\" \"Norway\" ...\n $ Region                       : chr  \"Western Europe\" \"Western Europe\" \"Western Europe\" \"Western Europe\" ...\n $ Happiness.Rank               : num  1 2 3 4 5 6 7 8 9 10 ...\n $ Happiness.Score              : num  7.59 7.56 7.53 7.52 7.43 ...\n $ Standard.Error               : num  0.0341 0.0488 0.0333 0.0388 0.0355 ...\n $ Economy..GDP.per.Capita.     : num  1.4 1.3 1.33 1.46 1.33 ...\n $ Family                       : num  1.35 1.4 1.36 1.33 1.32 ...\n $ Health..Life.Expectancy.     : num  0.941 0.948 0.875 0.885 0.906 ...\n $ Freedom                      : num  0.666 0.629 0.649 0.67 0.633 ...\n $ Trust..Government.Corruption.: num  0.42 0.141 0.484 0.365 0.33 ...\n $ Generosity                   : num  0.297 0.436 0.341 0.347 0.458 ...\n $ Dystopia.Residual            : num  2.52 2.7 2.49 2.47 2.45 ...\n $ Lower.Confidence.Interval    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Upper.Confidence.Interval    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Whisker.high                 : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Whisker.low                  : num  NA NA NA NA NA NA NA NA NA NA ...\n\n\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          467                             0 \n              Happiness.Score                Standard.Error \n                            0                           624 \n     Economy..GDP.per.Capita.                        Family \n                            0                             0 \n     Health..Life.Expectancy.                       Freedom \n                            0                             0 \nTrust..Government.Corruption.                    Generosity \n                            1                             0 \n            Dystopia.Residual     Lower.Confidence.Interval \n                          312                           625 \n    Upper.Confidence.Interval                  Whisker.high \n                          625                           627 \n                  Whisker.low \n                          627 \n\n\n\nWHRdata = subset(WHRdata, select = -c(Lower.Confidence.Interval,Upper.Confidence.Interval,Dystopia.Residual,Standard.Error,Whisker.high,Whisker.low))\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          467                             0 \n              Happiness.Score      Economy..GDP.per.Capita. \n                            0                             0 \n                       Family      Health..Life.Expectancy. \n                            0                             0 \n                      Freedom Trust..Government.Corruption. \n                            0                             1 \n                   Generosity \n                            0 \n\n\n\nWHRdata$Trust..Government.Corruption.[is.na(WHRdata$Trust..Government.Corruption.)] &lt;- median(WHRdata$Trust..Government.Corruption., na.rm = T)\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          467                             0 \n              Happiness.Score      Economy..GDP.per.Capita. \n                            0                             0 \n                       Family      Health..Life.Expectancy. \n                            0                             0 \n                      Freedom Trust..Government.Corruption. \n                            0                             0 \n                   Generosity \n                            0 \n\n\n\naggregate(WHRdata$Country, by=list(WHRdata$Year), FUN=length)\n\n  Group.1   x\n1    2015 158\n2    2016 157\n3    2017 155\n4    2018 156\n5    2019 156\n\n\n\nCountry_2015 = subset(WHRdata, Year == 2015)$Country\nCountry_2016 = subset(WHRdata, Year == 2016)$Country\nCountry_2017 = subset(WHRdata, Year == 2017)$Country\nCountry_2018 = subset(WHRdata, Year == 2018)$Country\nCountry_2019 = subset(WHRdata, Year == 2019)$Country\n\n\ncommon_country =intersect(intersect(intersect(intersect(Country_2015,\nCountry_2016),Country_2017),Country_2018),Country_2019)\nlength(common_country)\n\n[1] 141\n\n\nCountry_2015 = subset(WHRdata, Year == 2015)$Country\nCountry_2016 = subset(WHRdata, Year == 2016)$Country\nCountry_2017 = subset(WHRdata, Year == 2017)$Country\nCountry_2018 = subset(WHRdata, Year == 2018)$Country\nCountry_2019 = subset(WHRdata, Year == 2019)$Country\n\nWHRdata_cleaned = subset(WHRdata,Country %in% common_country)\nprint(paste(\"The amount of rows in the dataset is: \",dim(WHRdata_cleaned)[1]))\n\n[1] \"The amount of rows in the dataset is:  705\"\n\nprint(paste(\"The amount of columns in the dataset is: \",dim(WHRdata_cleaned)[2]))\n\n[1] \"The amount of columns in the dataset is:  11\"\n\n\n\ncommon_region &lt;- unique(subset(WHRdata_cleaned, Region!=\"NA\", c(Country, Region)))\n\nhead(common_country)\n\n[1] \"Switzerland\" \"Iceland\"     \"Denmark\"     \"Norway\"      \"Canada\"     \n[6] \"Finland\"    \n\n\n\nassign_region &lt;- function(x){\n  Region &lt;- common_region$Region[common_region$Country == x]\n}\n\nfor(country in common_country)\n      WHRdata_cleaned$Region[WHRdata_cleaned$Country == country] &lt;- assign_region(country)\n\n\nWHRdata_cleaned=plyr::rename(WHRdata_cleaned, replace = c( \n                                  \"Economy..GDP.per.Capita.\"=\"GDP.per.Capita\",\n                                  \"Health..Life.Expectancy.\"=\"Healthy.Life.Expectancy\",\n                                  \"Trust..Government.Corruption.\"=\"Perceptions.of.Corruption\",\n                                  \"Family\"=\"Social.Support\"))\ncolnames(WHRdata_cleaned)\n\n [1] \"Year\"                      \"Country\"                  \n [3] \"Region\"                    \"Happiness.Rank\"           \n [5] \"Happiness.Score\"           \"GDP.per.Capita\"           \n [7] \"Social.Support\"            \"Healthy.Life.Expectancy\"  \n [9] \"Freedom\"                   \"Perceptions.of.Corruption\"\n[11] \"Generosity\"               \n\n\n\nskimr::skim_without_charts(WHRdata_cleaned)\n\n\nData summary\n\n\nName\nWHRdata_cleaned\n\n\nNumber of rows\n705\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n9\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCountry\n0\n1\n4\n23\n0\n141\n0\n\n\nRegion\n0\n1\n12\n31\n0\n10\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\n\n\n\n\nYear\n0\n1\n2017.00\n1.42\n2015.00\n2016.00\n2017.00\n2018.00\n2019.00\n\n\nHappiness.Rank\n0\n1\n76.85\n45.28\n1.00\n37.00\n77.00\n116.00\n158.00\n\n\nHappiness.Score\n0\n1\n5.43\n1.13\n2.84\n4.52\n5.39\n6.29\n7.77\n\n\nGDP.per.Capita\n0\n1\n0.93\n0.40\n0.00\n0.64\n1.00\n1.24\n2.10\n\n\nSocial.Support\n0\n1\n1.09\n0.32\n0.00\n0.88\n1.14\n1.35\n1.64\n\n\nHealthy.Life.Expectancy\n0\n1\n0.63\n0.23\n0.00\n0.49\n0.66\n0.81\n1.14\n\n\nFreedom\n0\n1\n0.41\n0.15\n0.00\n0.31\n0.43\n0.53\n0.72\n\n\nPerceptions.of.Corruption\n0\n1\n0.12\n0.11\n0.00\n0.05\n0.09\n0.15\n0.55\n\n\nGenerosity\n0\n1\n0.22\n0.13\n0.00\n0.13\n0.20\n0.28\n0.84"
  },
  {
    "objectID": "WHR/WHR.html#importing-packages",
    "href": "WHR/WHR.html#importing-packages",
    "title": "WHR",
    "section": "",
    "text": "pacman::p_load(skimr,tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes,corrplot,GGally)"
  },
  {
    "objectID": "WHR/WHR.html#importing-datasets",
    "href": "WHR/WHR.html#importing-datasets",
    "title": "WHR",
    "section": "",
    "text": "WHRdata2015 = read.csv (\"data/WHRdata2015.csv\")\nWHRdata2016 = read.csv (\"data/WHRdata2016.csv\")\nWHRdata2017 = read.csv (\"data/WHRdata2017.csv\")\nWHRdata2018 = read.csv (\"data/WHRdata2018.csv\")\nWHRdata2019 = read.csv (\"data/WHRdata2019.csv\")\nhead(WHRdata2019)\n\n  Overall.rank Country.or.region Score GDP.per.capita Social.support\n1            1           Finland 7.769          1.340          1.587\n2            2           Denmark 7.600          1.383          1.573\n3            3            Norway 7.554          1.488          1.582\n4            4           Iceland 7.494          1.380          1.624\n5            5       Netherlands 7.488          1.396          1.522\n6            6       Switzerland 7.480          1.452          1.526\n  Healthy.life.expectancy Freedom.to.make.life.choices Generosity\n1                   0.986                        0.596      0.153\n2                   0.996                        0.592      0.252\n3                   1.028                        0.603      0.271\n4                   1.026                        0.591      0.354\n5                   0.999                        0.557      0.322\n6                   1.052                        0.572      0.263\n  Perceptions.of.corruption\n1                     0.393\n2                     0.410\n3                     0.341\n4                     0.118\n5                     0.298\n6                     0.343\n\n\n\nWHRdata2019=plyr::rename(WHRdata2019, replace = c( \"Country.or.region\"=\"Country\", \n                                  \"Overall.rank\"=\"Happiness.Rank\" ,\n                                  \"GDP.per.capita\"=\"Economy..GDP.per.Capita.\",\n                                  \"Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Perceptions.of.corruption\"=\"Trust..Government.Corruption.\",\n                                  \"Social.support\"=\"Family\",\n                                  \"Score\"=\"Happiness.Score\"))\ncolnames(WHRdata2019)\n\n[1] \"Happiness.Rank\"                \"Country\"                      \n[3] \"Happiness.Score\"               \"Economy..GDP.per.Capita.\"     \n[5] \"Family\"                        \"Health..Life.Expectancy.\"     \n[7] \"Freedom\"                       \"Generosity\"                   \n[9] \"Trust..Government.Corruption.\"\n\n\n\nWHRdata2018=plyr::rename(WHRdata2018, replace = c( \"Country.or.region\"=\"Country\", \n                                  \"Overall.rank\"=\"Happiness.Rank\" ,\n                                  \"GDP.per.capita\"=\"Economy..GDP.per.Capita.\",\n                                  \"Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Perceptions.of.corruption\"=\"Trust..Government.Corruption.\",\n                                  \"Social.support\"=\"Family\",\n                                  \"Score\"=\"Happiness.Score\"))\ncolnames(WHRdata2018)\n\n[1] \"Happiness.Rank\"                \"Country\"                      \n[3] \"Happiness.Score\"               \"Economy..GDP.per.Capita.\"     \n[5] \"Family\"                        \"Health..Life.Expectancy.\"     \n[7] \"Freedom\"                       \"Generosity\"                   \n[9] \"Trust..Government.Corruption.\"\n\n\n\nWHRdata2015=plyr::rename(WHRdata2015, replace = c( \"Happiness Rank\" = \"Happiness.Rank\", \n                                  \"Happiness Score\" = \"Happiness.Score\",\n                                  \"Economy (GDP per Capita)\" = \"Economy..GDP.per.Capita.\",\n                                  \"Health (Life Expectancy)\" = \"Health..Life.Expectancy.\",\n                                  \"Trust (Government Corruption)\" = \"Trust..Government.Corruption.\",\n                                  \"Dystopia Residual\"=\"Dystopia.Residual\"\n                                  ))\n\nThe following `from` values were not present in `x`: Happiness Rank, Happiness Score, Economy (GDP per Capita), Health (Life Expectancy), Trust (Government Corruption), Dystopia Residual\n\ncolnames(WHRdata2015)\n\n [1] \"Country\"                       \"Region\"                       \n [3] \"Happiness.Rank\"                \"Happiness.Score\"              \n [5] \"Standard.Error\"                \"Economy..GDP.per.Capita.\"     \n [7] \"Family\"                        \"Health..Life.Expectancy.\"     \n [9] \"Freedom\"                       \"Trust..Government.Corruption.\"\n[11] \"Generosity\"                    \"Dystopia.Residual\"            \n\n\n\nWHRdata2016=plyr::rename(WHRdata2016, replace = c( \"Happiness Rank\" = \"Happiness.Rank\", \n                                  \"Happiness Score\" = \"Happiness.Score\",\n                                  \"Economy (GDP per Capita)\" = \"Economy..GDP.per.Capita.\",\n                                  \"Health (Life Expectancy)\" = \"Health..Life.Expectancy.\",\n                                  \"Trust (Government Corruption)\"  = \"Trust..Government.Corruption.\",\n                                  \"Dystopia Residual\"=\"Dystopia.Residual\"\n                                  ))\n\nThe following `from` values were not present in `x`: Happiness Rank, Happiness Score, Economy (GDP per Capita), Health (Life Expectancy), Trust (Government Corruption), Dystopia Residual\n\ncolnames(WHRdata2016)\n\n [1] \"Country\"                       \"Region\"                       \n [3] \"Happiness.Rank\"                \"Happiness.Score\"              \n [5] \"Lower.Confidence.Interval\"     \"Upper.Confidence.Interval\"    \n [7] \"Economy..GDP.per.Capita.\"      \"Family\"                       \n [9] \"Health..Life.Expectancy.\"      \"Freedom\"                      \n[11] \"Trust..Government.Corruption.\" \"Generosity\"                   \n[13] \"Dystopia.Residual\"            \n\n\n\nWHRdata2015&lt;-cbind(Year=2015,WHRdata2015)\n\nWHRdata2016&lt;-cbind(Year=2016,WHRdata2016)\n\nWHRdata2017&lt;-cbind(Year=2017,WHRdata2017)\n\nWHRdata2018&lt;-cbind(Year=2018,WHRdata2018)\n\nWHRdata2019&lt;-cbind(Year=2019,WHRdata2019)\n\n\nWHRdata2018$Trust..Government.Corruption. = as.numeric(WHRdata2018$Trust..Government.Corruption.)\n\nWarning: NAs introduced by coercion\n\nstr(WHRdata2018)\n\n'data.frame':   156 obs. of  10 variables:\n $ Year                         : num  2018 2018 2018 2018 2018 ...\n $ Happiness.Rank               : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Country                      : chr  \"Finland\" \"Norway\" \"Denmark\" \"Iceland\" ...\n $ Happiness.Score              : num  7.63 7.59 7.55 7.5 7.49 ...\n $ Economy..GDP.per.Capita.     : num  1.3 1.46 1.35 1.34 1.42 ...\n $ Family                       : num  1.59 1.58 1.59 1.64 1.55 ...\n $ Health..Life.Expectancy.     : num  0.874 0.861 0.868 0.914 0.927 0.878 0.896 0.876 0.913 0.91 ...\n $ Freedom                      : num  0.681 0.686 0.683 0.677 0.66 0.638 0.653 0.669 0.659 0.647 ...\n $ Generosity                   : num  0.202 0.286 0.284 0.353 0.256 0.333 0.321 0.365 0.285 0.361 ...\n $ Trust..Government.Corruption.: num  0.393 0.34 0.408 0.138 0.357 0.295 0.291 0.389 0.383 0.302 ...\n\n\n\nWHRdata20152016&lt;-dplyr::bind_rows(WHRdata2015,WHRdata2016)\n\nWHRdata201520162017&lt;-dplyr::bind_rows(WHRdata20152016,WHRdata2017)\n\nWHRdata20182019&lt;-dplyr::bind_rows(WHRdata2018,WHRdata2019)\n\nWHRdata&lt;-dplyr::bind_rows(WHRdata201520162017,WHRdata20182019)\nhead(WHRdata)\n\n  Year     Country         Region Happiness.Rank Happiness.Score Standard.Error\n1 2015 Switzerland Western Europe              1           7.587        0.03411\n2 2015     Iceland Western Europe              2           7.561        0.04884\n3 2015     Denmark Western Europe              3           7.527        0.03328\n4 2015      Norway Western Europe              4           7.522        0.03880\n5 2015      Canada  North America              5           7.427        0.03553\n6 2015     Finland Western Europe              6           7.406        0.03140\n  Economy..GDP.per.Capita.  Family Health..Life.Expectancy. Freedom\n1                  1.39651 1.34951                  0.94143 0.66557\n2                  1.30232 1.40223                  0.94784 0.62877\n3                  1.32548 1.36058                  0.87464 0.64938\n4                  1.45900 1.33095                  0.88521 0.66973\n5                  1.32629 1.32261                  0.90563 0.63297\n6                  1.29025 1.31826                  0.88911 0.64169\n  Trust..Government.Corruption. Generosity Dystopia.Residual\n1                       0.41978    0.29678           2.51738\n2                       0.14145    0.43630           2.70201\n3                       0.48357    0.34139           2.49204\n4                       0.36503    0.34699           2.46531\n5                       0.32957    0.45811           2.45176\n6                       0.41372    0.23351           2.61955\n  Lower.Confidence.Interval Upper.Confidence.Interval Whisker.high Whisker.low\n1                        NA                        NA           NA          NA\n2                        NA                        NA           NA          NA\n3                        NA                        NA           NA          NA\n4                        NA                        NA           NA          NA\n5                        NA                        NA           NA          NA\n6                        NA                        NA           NA          NA\n\n\n\nWHRdata$Happiness.Rank  = as.numeric(WHRdata$Happiness.Rank )\n\nstr(WHRdata)\n\n'data.frame':   782 obs. of  17 variables:\n $ Year                         : num  2015 2015 2015 2015 2015 ...\n $ Country                      : chr  \"Switzerland\" \"Iceland\" \"Denmark\" \"Norway\" ...\n $ Region                       : chr  \"Western Europe\" \"Western Europe\" \"Western Europe\" \"Western Europe\" ...\n $ Happiness.Rank               : num  1 2 3 4 5 6 7 8 9 10 ...\n $ Happiness.Score              : num  7.59 7.56 7.53 7.52 7.43 ...\n $ Standard.Error               : num  0.0341 0.0488 0.0333 0.0388 0.0355 ...\n $ Economy..GDP.per.Capita.     : num  1.4 1.3 1.33 1.46 1.33 ...\n $ Family                       : num  1.35 1.4 1.36 1.33 1.32 ...\n $ Health..Life.Expectancy.     : num  0.941 0.948 0.875 0.885 0.906 ...\n $ Freedom                      : num  0.666 0.629 0.649 0.67 0.633 ...\n $ Trust..Government.Corruption.: num  0.42 0.141 0.484 0.365 0.33 ...\n $ Generosity                   : num  0.297 0.436 0.341 0.347 0.458 ...\n $ Dystopia.Residual            : num  2.52 2.7 2.49 2.47 2.45 ...\n $ Lower.Confidence.Interval    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Upper.Confidence.Interval    : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Whisker.high                 : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Whisker.low                  : num  NA NA NA NA NA NA NA NA NA NA ...\n\n\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          467                             0 \n              Happiness.Score                Standard.Error \n                            0                           624 \n     Economy..GDP.per.Capita.                        Family \n                            0                             0 \n     Health..Life.Expectancy.                       Freedom \n                            0                             0 \nTrust..Government.Corruption.                    Generosity \n                            1                             0 \n            Dystopia.Residual     Lower.Confidence.Interval \n                          312                           625 \n    Upper.Confidence.Interval                  Whisker.high \n                          625                           627 \n                  Whisker.low \n                          627 \n\n\n\nWHRdata = subset(WHRdata, select = -c(Lower.Confidence.Interval,Upper.Confidence.Interval,Dystopia.Residual,Standard.Error,Whisker.high,Whisker.low))\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          467                             0 \n              Happiness.Score      Economy..GDP.per.Capita. \n                            0                             0 \n                       Family      Health..Life.Expectancy. \n                            0                             0 \n                      Freedom Trust..Government.Corruption. \n                            0                             1 \n                   Generosity \n                            0 \n\n\n\nWHRdata$Trust..Government.Corruption.[is.na(WHRdata$Trust..Government.Corruption.)] &lt;- median(WHRdata$Trust..Government.Corruption., na.rm = T)\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          467                             0 \n              Happiness.Score      Economy..GDP.per.Capita. \n                            0                             0 \n                       Family      Health..Life.Expectancy. \n                            0                             0 \n                      Freedom Trust..Government.Corruption. \n                            0                             0 \n                   Generosity \n                            0 \n\n\n\naggregate(WHRdata$Country, by=list(WHRdata$Year), FUN=length)\n\n  Group.1   x\n1    2015 158\n2    2016 157\n3    2017 155\n4    2018 156\n5    2019 156\n\n\n\nCountry_2015 = subset(WHRdata, Year == 2015)$Country\nCountry_2016 = subset(WHRdata, Year == 2016)$Country\nCountry_2017 = subset(WHRdata, Year == 2017)$Country\nCountry_2018 = subset(WHRdata, Year == 2018)$Country\nCountry_2019 = subset(WHRdata, Year == 2019)$Country\n\n\ncommon_country =intersect(intersect(intersect(intersect(Country_2015,\nCountry_2016),Country_2017),Country_2018),Country_2019)\nlength(common_country)\n\n[1] 141\n\n\nCountry_2015 = subset(WHRdata, Year == 2015)$Country\nCountry_2016 = subset(WHRdata, Year == 2016)$Country\nCountry_2017 = subset(WHRdata, Year == 2017)$Country\nCountry_2018 = subset(WHRdata, Year == 2018)$Country\nCountry_2019 = subset(WHRdata, Year == 2019)$Country\n\nWHRdata_cleaned = subset(WHRdata,Country %in% common_country)\nprint(paste(\"The amount of rows in the dataset is: \",dim(WHRdata_cleaned)[1]))\n\n[1] \"The amount of rows in the dataset is:  705\"\n\nprint(paste(\"The amount of columns in the dataset is: \",dim(WHRdata_cleaned)[2]))\n\n[1] \"The amount of columns in the dataset is:  11\"\n\n\n\ncommon_region &lt;- unique(subset(WHRdata_cleaned, Region!=\"NA\", c(Country, Region)))\n\nhead(common_country)\n\n[1] \"Switzerland\" \"Iceland\"     \"Denmark\"     \"Norway\"      \"Canada\"     \n[6] \"Finland\"    \n\n\n\nassign_region &lt;- function(x){\n  Region &lt;- common_region$Region[common_region$Country == x]\n}\n\nfor(country in common_country)\n      WHRdata_cleaned$Region[WHRdata_cleaned$Country == country] &lt;- assign_region(country)\n\n\nWHRdata_cleaned=plyr::rename(WHRdata_cleaned, replace = c( \n                                  \"Economy..GDP.per.Capita.\"=\"GDP.per.Capita\",\n                                  \"Health..Life.Expectancy.\"=\"Healthy.Life.Expectancy\",\n                                  \"Trust..Government.Corruption.\"=\"Perceptions.of.Corruption\",\n                                  \"Family\"=\"Social.Support\"))\ncolnames(WHRdata_cleaned)\n\n [1] \"Year\"                      \"Country\"                  \n [3] \"Region\"                    \"Happiness.Rank\"           \n [5] \"Happiness.Score\"           \"GDP.per.Capita\"           \n [7] \"Social.Support\"            \"Healthy.Life.Expectancy\"  \n [9] \"Freedom\"                   \"Perceptions.of.Corruption\"\n[11] \"Generosity\"               \n\n\n\nskimr::skim_without_charts(WHRdata_cleaned)\n\n\nData summary\n\n\nName\nWHRdata_cleaned\n\n\nNumber of rows\n705\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n9\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCountry\n0\n1\n4\n23\n0\n141\n0\n\n\nRegion\n0\n1\n12\n31\n0\n10\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\n\n\n\n\nYear\n0\n1\n2017.00\n1.42\n2015.00\n2016.00\n2017.00\n2018.00\n2019.00\n\n\nHappiness.Rank\n0\n1\n76.85\n45.28\n1.00\n37.00\n77.00\n116.00\n158.00\n\n\nHappiness.Score\n0\n1\n5.43\n1.13\n2.84\n4.52\n5.39\n6.29\n7.77\n\n\nGDP.per.Capita\n0\n1\n0.93\n0.40\n0.00\n0.64\n1.00\n1.24\n2.10\n\n\nSocial.Support\n0\n1\n1.09\n0.32\n0.00\n0.88\n1.14\n1.35\n1.64\n\n\nHealthy.Life.Expectancy\n0\n1\n0.63\n0.23\n0.00\n0.49\n0.66\n0.81\n1.14\n\n\nFreedom\n0\n1\n0.41\n0.15\n0.00\n0.31\n0.43\n0.53\n0.72\n\n\nPerceptions.of.Corruption\n0\n1\n0.12\n0.11\n0.00\n0.05\n0.09\n0.15\n0.55\n\n\nGenerosity\n0\n1\n0.22\n0.13\n0.00\n0.13\n0.20\n0.28\n0.84"
  },
  {
    "objectID": "WHR/WHR.html#gdp",
    "href": "WHR/WHR.html#gdp",
    "title": "WHR",
    "section": "GDP",
    "text": "GDP\n\nscp1 = ggplot(WHRdata_cleaned, aes(x = GDP.per.Capita, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp1a= ggplot(WHRdata_cleaned, aes(x = GDP.per.Capita, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp1\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp1a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR.html#social-support",
    "href": "WHR/WHR.html#social-support",
    "title": "WHR",
    "section": "Social Support",
    "text": "Social Support\n\nscp2 = ggplot(WHRdata_cleaned, aes(x = Social.Support, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp2a = ggplot(WHRdata_cleaned, aes(x = Social.Support, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp2\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp2a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR.html#life-expectancy",
    "href": "WHR/WHR.html#life-expectancy",
    "title": "WHR",
    "section": "Life Expectancy",
    "text": "Life Expectancy\n\nscp3 = ggplot(WHRdata_cleaned, aes(x = Healthy.Life.Expectancy, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp3a = ggplot(WHRdata_cleaned, aes(x = Healthy.Life.Expectancy, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp3a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR.html#freedom",
    "href": "WHR/WHR.html#freedom",
    "title": "WHR",
    "section": "Freedom",
    "text": "Freedom\n\nscp4 = ggplot(WHRdata_cleaned, aes(x =Freedom, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp4a = ggplot(WHRdata_cleaned, aes(x =Freedom, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp4\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp4a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR.html#corruption",
    "href": "WHR/WHR.html#corruption",
    "title": "WHR",
    "section": "Corruption",
    "text": "Corruption\n\nscp5 = ggplot(WHRdata_cleaned, aes(x = Perceptions.of.Corruption, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp5a = ggplot(WHRdata_cleaned, aes(x = Perceptions.of.Corruption, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp5\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp5a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR.html#generosity",
    "href": "WHR/WHR.html#generosity",
    "title": "WHR",
    "section": "Generosity",
    "text": "Generosity\n\nscp6 = ggplot(WHRdata_cleaned, aes(x = Generosity, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp6a = ggplot(WHRdata_cleaned, aes(x = Generosity, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp6\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp6a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "",
    "text": "The primary objective of this project is to apply visual analytics techniques to validate climate change projections regarding daily mean temperature fluctuations. Specifically, we aim to explore the projected temperature increases, which range from 1.4 to 4.6 degrees Celsius, as indicated in an office report from National Climate Change Secretariat Singapore.\n\n\n\nSource: Ministry of Sustainability and the Environment\n\n\nWe seek to employ newly acquired methods of visual interactivity and uncertainty visualization to assess and validate the claims presented in the report."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-packages",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-packages",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Importing packages",
    "text": "Importing packages\nIn this take home exercise we are going to utilise several package:\n\ntidyverse (to wrangle and plot our data)\npatchwork (to plot multiple plot in the same figure)\nreadr (to read rectangular data from delimited files)\ndplyr (provides a set of functions for data manipulation tasks)\nplotly (to create interactive web-based visualizations)\nggridges (for creating ridge plots in R using the ggplot2 plotting system)\nggiraph (adding interactive features to ggplot2 plots)\nggthemes (provides additional themes and color palettes for ggplot2 plots)\n\n\npacman::p_load(tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-dataset",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#importing-dataset",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Importing dataset",
    "text": "Importing dataset\nThe data we ware going to use is the historical daily temperature data from Meteorological Service Singapore website. We will be looking at the daily records of May (as May has the highest average monthly temperature based on Meteorological Service Singapore) in the years 1983, 1993, 2003, 2013, and 2023 at the Changi Weather Station.\n\n\nShow the code\nMay_dataset&lt;- c(\"data/DAILYDATA_S24_198305.csv\", \"data/DAILYDATA_S24_199305.csv\", \n                \"data/DAILYDATA_S24_200305.csv\", \"data/DAILYDATA_S24_201305.csv\", \n                \"data/DAILYDATA_S24_202305.csv\")\n\n\n\n\nShow the code\nMay_temp &lt;- lapply(May_dataset, read_csv, col_names = FALSE,\n                        col_select = c(1,2, 3, 4, 9, 10, 11),skip = 1) %&gt;%\n  bind_rows(.id = \"file\")\n\ncolnames(May_temp) &lt;- c(\"ID\", \"Station\", \"Year\", \"Month\", \"Day\"\n                              , \"Mean_Temperature\", \n                              \"Maximum_Temperature\", \"Minimum_Temperature\")\n\nMay_temp$Year &lt;- as.factor(May_temp$Year)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#dataset-overview",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#dataset-overview",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Dataset Overview",
    "text": "Dataset Overview\nWe are going to use the datatable() function to inspect the combined data set.\n\nDT::datatable(May_temp, class= \"compact\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#ridgeline-plots-of-temperature-variables",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#ridgeline-plots-of-temperature-variables",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Ridgeline Plots of Temperature Variables",
    "text": "Ridgeline Plots of Temperature Variables\nThe geom_density_ridges() function in the ggridges package is used to create ridge plots, also known as density ridgeline plots. Ridge plots are a method of displaying the distribution of a numeric variable grouped by one or more categorical variables. These plots are particularly useful for visualizing the distribution of a variable across different groups and identifying patterns or differences in the distributions.\n\nMean TempMax TempMin Temp\n\n\n\n\nShow the code\ncolors_vector &lt;- c(\"grey25\", \"grey40\", \"grey60\", \"grey70\",\"grey80\" )\nopacities_vector &lt;- c(0.5, 0.6, 0.7, 0.8,0.9 ) \n\np1 &lt;- ggplot(May_temp, \n             aes(x = Mean_Temperature, y = factor(Year), fill = factor(Year), alpha = factor(Year))) +\n  geom_density_ridges() +\n  labs(title = \"Distribution of Mean Temperature in May between 1983-2023\",\n       x = \"Degrees Celsius\",\n       y = \"Year\") +\n  scale_fill_manual(values = colors_vector) +\n  scale_alpha_manual(values = opacities_vector) +\n  theme_ridges() +\n  theme(legend.position = \"none\")\n\np1\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncolors_vector &lt;- c(\"grey25\", \"grey40\", \"grey60\", \"grey70\",\"grey80\" )\nopacities_vector &lt;- c(0.5, 0.6, 0.7, 0.8,0.9 ) \n\np2 &lt;- ggplot(May_temp, \n             aes(x = Maximum_Temperature, y = factor(Year), fill = factor(Year), alpha = factor(Year))) +\n  geom_density_ridges() +\n  labs(title = \"Distribution of Maximum Temperature in May between 1983-2023\",\n       x = \"Degrees Celsius\",\n       y = \"Year\") +\n  scale_fill_manual(values = colors_vector) +\n  scale_alpha_manual(values = opacities_vector) +\n  theme_ridges() +\n  theme(legend.position = \"none\")\n\np2\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncolors_vector &lt;- c(\"grey25\", \"grey40\", \"grey60\", \"grey70\",\"grey80\" )\nopacities_vector &lt;- c(0.5, 0.6, 0.7, 0.8,0.9 ) \np3 &lt;- ggplot(May_temp, \n             aes(x = Minimum_Temperature, y = factor(Year), fill = factor(Year), alpha = factor(Year))) +\n  geom_density_ridges() +\n  labs(title = \"Distribution of Minimum Temperature in May between 1983-2023\",\n       x = \"Degrees Celsius\",\n       y = \"Year\") +\n  scale_fill_manual(values = colors_vector) +\n  scale_alpha_manual(values = opacities_vector) +\n  theme_ridges() +\n  theme(legend.position = \"none\")\n\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\n\nMean Daily Temperature: From 1983 to 2023, there has been a consistent increase in the daily mean temperature. In the earlier years, such as 1983, the distribution of daily mean temperature values was more widely spread out compared to recent years, particularly noticeable in 2003 and 2013. Moreover, the majority of the distribution exhibits a left-skewed pattern, with the exception of 2013, which demonstrates a right-skewed distribution.\nMaximum Daily Temperature: Over the period from 1983 to 2023, there has been a rise in the maximum daily temperature. The spread of maximum daily temperature values was broader in the earlier years, with 2023 showing the narrowest spread among the observed years. Furthermore, the distribution of maximum daily temperatures is consistently left-skewed across all years.\nMinimum Daily Temperature: Between 1983 and 2023, observations indicate that during 1993 and 2013, the daily mean temperature values were narrower in comparison to 1983, 2003, and 2023, which displayed a more extensive spread. Additionally, most of the distribution demonstrates a left-skewed pattern, with 1983 being the exception, exhibiting a distribution that is more or less normal."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#line-chart-of-daily-mean-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#line-chart-of-daily-mean-temperature",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Line chart of Daily Mean Temperature",
    "text": "Line chart of Daily Mean Temperature\n\nAll19831993200320132023\n\n\n\n\nShow the code\npoint_desc &lt;- c(paste0(\n  \"Day: \", May_temp$Day,\n  \"\\nYear: \",May_temp$Year,\n  \"\\nMean Temp: \", May_temp$Mean_Temperature, \"°C\"))\n\nline &lt;- ggplot(data = May_temp,\n               aes(x = Day, y = Mean_Temperature,\n                   group = Year,\n                   color = Year,\n                   data_id = Year)) +\n  geom_line_interactive(size = 1.2) +\n  geom_point_interactive(aes(tooltip = point_desc),\n                         fill = \"grey90\",\n                         size = 2,\n                         stroke = 1,\n                         shape = 21) +\n  scale_color_manual(name = \"Year\", \n                      values = c(\"1983\" = \"blue\",\n                                  \"1993\" = \"red\",\n                                  \"2003\" = \"purple\",\n                                  \"2013\" = \"orange\",\n                                  \"2023\" = \"black\")) +\n  labs(y = \"Degrees Celsius\",\n       x = \"Day of The Month\",\n       title = \"Daily Mean Temperature for May 1986, 1993, 2003, 2013, 2023 \")\n\ngirafe(ggobj = line, \n       width_svg = 10,\n       height_svg = 5 ,\n       options = list(\n         opts_hover(css = \"stroke-width: 1; opacity: 1;\"),\n         opts_hover_inv(css = \"stroke-width: 1;opacity:0.1;\")))\n\n\n\n\n\n\n\n\n\n\nShow the code\na &lt;- May_temp %&gt;%\n  filter(!(Year %in% c(1993, 2003, 2013, 2023))) %&gt;%\n  group_by(Day) %&gt;%\n  ggplot(., aes(Day, Mean_Temperature)) +\n    geom_point() +\n    geom_line() +\n    geom_smooth(method = \"loess\") +\n    theme(axis.title.x = element_blank(),\n          legend.position = \"none\") +\n    labs(title = \"Mean Temperature Distribution for 1983\", y = \"Degrees Celsius\") +\n    NULL\nggplotly(a)\n\n\n\n\n\n\n\n\n\n\nShow the code\nb &lt;- May_temp %&gt;%\n  filter(!(Year %in% c(1983, 2003, 2013, 2023))) %&gt;%\n  group_by(Day) %&gt;%\n  ggplot(., aes(Day, Mean_Temperature)) +\n    geom_point() +\n    geom_line() +\n    geom_smooth(method = \"loess\") +\n    theme(axis.title.x = element_blank(),\n          legend.position = \"none\") +\n    labs(title = \"Mean Temperature Distribution for 1993\", y = \"Degrees Celsius\") +\n    NULL\nggplotly(b)\n\n\n\n\n\n\n\n\n\n\nShow the code\nc &lt;- May_temp %&gt;%\n  filter(!(Year %in% c(1983, 1993, 2013, 2023))) %&gt;%\n  group_by(Day) %&gt;%\n  ggplot(., aes(Day, Mean_Temperature)) +\n    geom_point() +\n    geom_line() +\n    geom_smooth(method = \"loess\") +\n    theme(axis.title.x = element_blank(),\n          legend.position = \"none\") +\n    labs(title = \"Mean Temperature Distribution for 2003\", y = \"Degrees Celsius\") +\n    NULL\nggplotly(c)\n\n\n\n\n\n\n\n\n\n\nShow the code\nd &lt;- May_temp %&gt;%\n  filter(!(Year %in% c(1983, 1993, 2003, 2023))) %&gt;%\n  group_by(Day) %&gt;%\n  ggplot(., aes(Day, Mean_Temperature)) +\n    geom_point() +\n    geom_line() +\n    geom_smooth(method = \"loess\") +\n    theme(axis.title.x = element_blank(),\n          legend.position = \"none\") +\n    labs(title = \"Mean Temperature Distribution for 2013\", y = \"Degrees Celsius\") +\n    NULL\nggplotly(d)\n\n\n\n\n\n\n\n\n\n\nShow the code\ne &lt;- May_temp %&gt;%\n  filter(!(Year %in% c(1983, 1993, 2003, 2013))) %&gt;%\n  group_by(Day) %&gt;%\n  ggplot(., aes(Day, Mean_Temperature)) +\n    geom_point() +\n    geom_line() +\n    geom_smooth(method = \"loess\") +\n    theme(axis.title.x = element_blank(),\n          legend.position = \"none\") +\n    labs(title = \"Mean Temperature Distribution for 2023\", y = \"Degrees Celsius\") +\n    NULL\nggplotly(e)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\n\nAll: The temperature has indeed risen over the last half-century, as illustrated in the line chart, with notable increases observed between 1993 to 2003 and from 2013 to 2023. The highest mean temperature was recorded on day 13 of 2023, reaching 30.7°C, while the lowest was documented on day 29 of 1993, at 25.7°C.\n\n\n\n1983: In 1983, the maximum daily mean temperature for May occurred on day 31, reaching 29.4°C, while the lowest was recorded on day 9, measuring 26.2°C. Throughout the month, the trend line of the daily mean temperature appeared relatively stable, showing no notable increase or decrease.\n1993: In 1993, the maximum daily mean temperature for May occurred on day 14, reaching 29.5°C, while the lowest was recorded on day 29, measuring 25.7°C. Throughout the month, the trend line of the daily mean temperature appeared relatively stable, showing no notable increase or decrease.\n2003: In 2003, the maximum daily mean temperature for May occurred on day 24, reaching 30.6°C, while the lowest was recorded on day 10, measuring 27.4°C. Throughout the month, the trend line of the daily mean temperature appeared to be on the rise.\n2013: In 2013, the maximum daily mean temperature for May occurred on day 13, reaching 29.9°C, while the lowest was recorded on day 30, measuring 26.9°C. Throughout the month, the trend line of the daily mean temperature appeared to be decreasing.\n2023: In 2023, the maximum daily mean temperature for May occurred on day 13, reaching 30.7°C, while the lowest was recorded on day 21, measuring 27.4°C. Throughout the month, the trend line of the daily mean temperature appeared to be on the rise."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#boxplot-of-daily-mean-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#boxplot-of-daily-mean-temperature",
    "title": "Take-home Exercise 3: Be Weatherwise or Otherwise",
    "section": "Boxplot of Daily Mean Temperature",
    "text": "Boxplot of Daily Mean Temperature\n\n\nShow the code\nboxplot &lt;- plot_ly(data = May_temp,\n  type = \"box\",\n  x = ~Year,\n  y = ~Mean_Temperature,\n  color = I(\"grey\"),\n  marker = list(size = 3),\n  name = \"Mean Temperature\",\n  jitter = 0.3) %&gt;%\nlayout(xaxis = list(title = \"Year\"),\n        yaxis = list(title = \"Degrees Celsius\"))\n\nmean_trend &lt;- aggregate(Mean_Temperature ~ Year, data = May_temp, FUN = mean)\nboxplot &lt;- add_trace(boxplot,\n  data = mean_trend,\n  type = \"scatter\",\n  mode = \"lines+markers\", \n  x = ~Year,\n  y = ~Mean_Temperature,\n  color = I(\"red\"),\n  line = list(color = \"red\", dash = 'dash'),name = \"Mean Trend Line\")\n\nboxplot &lt;- add_trace(boxplot,\n  data = May_temp,\n  type = \"scatter\",\n  mode = \"markers\",\n  x = ~Year,\n  y = ~Mean_Temperature,\n  name = \"Daily Mean Temperature\",\n  color = I(\"blue\"),\n  marker = list(size = 3,color = \"blue\",\n    symbol = \"circle\",line = list(width = 0.5)),\n  desc = ~paste(\"Temperature: \", Mean_Temperature, \"ºC\"),\n  hoverinfo = \"desc\")\n\nboxplot\n\n\n\n\n\n\n\n\n\n\n\n\nObservation\n\n\n\nFrom the box plot, observing that the year 2003 has a longer box compared to the rest of the years suggests that the daily mean temperatures in 2003 had a wider range and were more variable compared to other years depicted in the plot. This variation might indicate increased volatility or fluctuations in temperatures throughout the year 2003.\nFrom the trend line analysis, it’s evident that from 1983 to 1993, the daily mean temperature trend remained relatively stable, with no significant increase or decrease observed. However, between 1993 and 2003, there was a noticeable upward trend in the daily mean temperature. Subsequently, from 2003 to 2013, the trend line depicted a decrease in the daily mean temperature. However, from 2013 to 2023, there was a clear upward trend, culminating in the highest mean temperature observed among the past years.\nThe positioning of the box plot for 2023 at the highest level, along with 10 days of daily mean temperature exceeding the highest recorded daily mean temperature in 1983, and with the monthly mean temperature ranging from 28.3 °C in 1983 to 29.5 °C in 2023, strongly indicates a significant increase in temperature during 2023 compared to 1983."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "",
    "text": "The OECD Programme for International Student Assessment (PISA) did a deep dive into how 15-year-old students are doing in reading, math, and science. They didn’t just stop there – they also dug into students’ backgrounds, home situations, and school factors that could shake things up. PISA is like the gold standard when it comes to checking out how well students are really learning on a global scale. The results spill the beans on the quality and fairness of learning achievements worldwide, giving educators and policy folks the lowdown on what’s working in different countries.\nBut PISA isn’t just about the numbers; it’s about creating a common ground and getting people to team up and use that data. The whole idea is to get schools and policymakers to stop sizing themselves up against their own kind and start looking outwards. PISA wants them to peek at what teachers, schools, and policymakers are doing around the world and learn a thing or two.\nFast-forward to 2022, and PISA is still at it. They’ve got eight questionnaires floating around, getting the scoop from different education big shots – students, teachers, parents, and school principals. It’s like a global report card but with a whole lot more details."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-packages",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "2.1 Importing packages",
    "text": "2.1 Importing packages\nIn this take home exercise we are going to utilise several package\n\nTidyverse (to wrangle and plot our data)\nHaven (to read our dataset from sas data type)\nPatchwork (to plot multiple plot in the same figure)\n\n\npacman::p_load(tidyverse, haven, patchwork)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-dataset",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "2.2 Importing dataset",
    "text": "2.2 Importing dataset\nImporting the data in sas data type\n\nstu_qqq &lt;- read_sas('data/cy08msp_stu_qqq.sas7bdat')\n\nFiltering the data to singapore\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nExport the filtered dataset to rds to ease further data importing\n\nwrite_rds(stu_qqq_SG, 'data/stu_qqq_SG.rds')\n\nRead the exported rds\n\nstu_qqq_SG &lt;- read_rds('data/stu_qqq_SG.rds')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-preparations",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#variable-preparations",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "2.3 Variable Preparations",
    "text": "2.3 Variable Preparations\nIn preparing for our analysis, we’ll filter out the columns we need and focus on six variables:\n\nschool_type (Renamed from STRATUM)\ngender (Renamed from ST004D01T)\nmath (Average of 10 math scores)\nscience (Average of 10 science scores)\nreading (Average of 10 reading scores, renamed from ‘read’)\nsocial_economic (Renamed from ESCS)\n\nAdditionally, we’ll recode the answers of questions to more descriptive measures and adjust the data types of the columns for clarity and consistency.\nFor example, if the gender column uses numerical codes, we can replace them with descriptive labels (e.g., 1 for male, 2 for female can be recoded as ‘Male’ and ‘Female’).\nLastly, we’ll ensure that the data types of each column align with the nature of the information they hold (e.g., converting numerical columns to appropriate numeric types).\n\nstu_filtered &lt;- stu_qqq_SG %&gt;%\n  mutate(math = rowMeans(select(stu_qqq_SG,\n         PV1MATH,PV2MATH,PV3MATH,PV4MATH,PV5MATH,PV6MATH,PV7MATH,PV8MATH,PV9MATH,PV10MATH)),\n         science = rowMeans(select(stu_qqq_SG,\n         PV1SCIE,PV2SCIE,PV3SCIE,PV4SCIE,PV5SCIE,PV6SCIE,PV7SCIE,PV8SCIE,PV9SCIE,PV10SCIE)),\n         reading = rowMeans(select(stu_qqq_SG,\n         PV1READ,PV2READ,PV3READ,PV4READ,PV5READ,PV6READ,PV7READ,PV8READ,PV9READ,PV10READ))\n         ) %&gt;%\n  select(STRATUM,ST004D01T,math,science,reading,ESCS) %&gt;%\n  rename(c(school_type = \"STRATUM\", \n           gender = \"ST004D01T\",\n           socio_economic = \"ESCS\")) %&gt;%\n  mutate(gender = recode(gender, \n                         \"1\" = \"Female\", \n                         \"2\" = \"Male\"),\n         school_type = recode(school_type,\n                              \"SGP01\" = \"Public\",\n                              \"SGP03\" = \"Private\"))\n\nstu_filtered$school_type &lt;- as.factor(stu_filtered$school_type)\nstu_filtered$gender &lt;- as.factor(stu_filtered$gender)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview-of-the-data-set",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview-of-the-data-set",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "2.4 Overview of the Data-set",
    "text": "2.4 Overview of the Data-set\nHere is the overview of the data-set that we are going to use for the analysis:\n\nglimpse(stu_filtered)\n\nRows: 6,606\nColumns: 6\n$ school_type    &lt;fct&gt; Public, Public, Public, Public, Public, Public, Public,…\n$ gender         &lt;fct&gt; Female, Male, Male, Male, Female, Female, Male, Male, F…\n$ math           &lt;dbl&gt; 605.2533, 689.9528, 676.7768, 401.0528, 436.1151, 518.1…\n$ science        &lt;dbl&gt; 639.7873, 672.0703, 660.0384, 343.6425, 479.2390, 476.0…\n$ reading        &lt;dbl&gt; 667.4296, 627.6078, 582.9252, 361.3969, 475.6763, 431.4…\n$ socio_economic &lt;dbl&gt; 0.1836, 0.8261, -1.0357, -0.9606, 0.0856, 0.1268, -0.01…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#handling-missing-values",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#handling-missing-values",
    "title": "Take-home Exercise 1: Investigating Student Performance with Data Visualisations",
    "section": "2.5 Handling Missing Values",
    "text": "2.5 Handling Missing Values\nNow, we are going through our data and getting rid of rows that are missing some info. The main reason for doing this is because later on, we want to make our variables easier to understand. If there are blank spots in our data columns, it might mess up the way we simplify things if a value accidentally ends up in a spot that was supposed to be blank.\nWe use the is.na() to spot those gaps in our data, and then sum() helps us count how many times these missing values pop up. It’s all part of making our data more user-friendly.\n\nsum(is.na(stu_filtered$school_ID))\n\n[1] 0\n\n\n\nsum(is.na(stu_filtered$gender))\n\n[1] 0\n\n\n\nsum(is.na(stu_filtered$math))\n\n[1] 0\n\n\n\nsum(is.na(stu_filtered$science))\n\n[1] 0\n\n\n\nsum(is.na(stu_filtered$reading))\n\n[1] 0\n\n\n\nsum(is.na(stu_filtered$socio_economic))\n\n[1] 47\n\n\nThe variable with missing values is: socio_economic.\nNow, we are going to drop variable which contains missing values using ‘drop_na()’\n\nstu_filtered &lt;- drop_na(stu_filtered,socio_economic)\n\nstu_filtered\n\n# A tibble: 6,559 × 6\n   school_type gender  math science reading socio_economic\n   &lt;fct&gt;       &lt;fct&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;          &lt;dbl&gt;\n 1 Public      Female  605.    640.    667.         0.184 \n 2 Public      Male    690.    672.    628.         0.826 \n 3 Public      Male    677.    660.    583.        -1.04  \n 4 Public      Male    401.    344.    361.        -0.961 \n 5 Public      Female  436.    479.    476.         0.0856\n 6 Public      Female  518.    476.    431.         0.127 \n 7 Public      Male    708.    647.    704.        -0.0154\n 8 Public      Male    620.    573.    524.         1.16  \n 9 Public      Female  736.    691.    713.         1.47  \n10 Public      Male    555.    548.    505.         0.520 \n# ℹ 6,549 more rows\n\n\nThe output shows that 6,559 observations are retained."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "title": "In-class Exercise 7",
    "section": "",
    "text": "isohyet map is a surface map of the same precipitation: rain, snow, and others. Figure below is an isohyet map showing to spatial distribution of total monthly rainfall of Singapore in February 2024.\n\nIn order to prepare an isohyet map, spatial interpolation will be used. Spatial interpolation is the process of using points with known values to estimate values at other unknown points. For example, to make a rainfall above, we will not find enough evenly spread weather stations to cover the entire region. Spatial interpolation can estimate the rainfall at locations without recorded data by using known rainfall readings at nearby weather stations (see figure_temperature_map). This type of interpolated surface is often called a geostatistical surface. Elevation data, temperature, property prices, air quality index and population density are other types of data that can be computed using interpolation.\n\nThere are many interpolation methods. In this hands-on exercise, two widely used spatial interpolation methods called Inverse Distance Weighting (IDW) and kriging will be introduce. If you are looking for additional interpolation methods, please refer to the ‘Further Reading’ section at the end of this topic."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#overview",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#overview",
    "title": "In-class Exercise 7",
    "section": "",
    "text": "isohyet map is a surface map of the same precipitation: rain, snow, and others. Figure below is an isohyet map showing to spatial distribution of total monthly rainfall of Singapore in February 2024.\n\nIn order to prepare an isohyet map, spatial interpolation will be used. Spatial interpolation is the process of using points with known values to estimate values at other unknown points. For example, to make a rainfall above, we will not find enough evenly spread weather stations to cover the entire region. Spatial interpolation can estimate the rainfall at locations without recorded data by using known rainfall readings at nearby weather stations (see figure_temperature_map). This type of interpolated surface is often called a geostatistical surface. Elevation data, temperature, property prices, air quality index and population density are other types of data that can be computed using interpolation.\n\nThere are many interpolation methods. In this hands-on exercise, two widely used spatial interpolation methods called Inverse Distance Weighting (IDW) and kriging will be introduce. If you are looking for additional interpolation methods, please refer to the ‘Further Reading’ section at the end of this topic."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#getting-started",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#getting-started",
    "title": "In-class Exercise 7",
    "section": "Getting Started",
    "text": "Getting Started\nIn this in-class exercise, beside tidyverse, viridis, sf and tmap libaries, two new R packages will be used, they are:\n\nterra is a replacement of the raster package. It has a very similar, but simpler, interface, and it is faster than raster. In this hands-on exercise, it will be used to create grid (also known as raster) objects as the input and output of spatial interpolation.\ngstat, an r packages for spatial and spatio-temporal geostatistical modelling, prediction and simulation. In this in-class exercise, it will be used to perform spatial interpolation.\nautomap, an r package for performing automatic variogram modelling and kriging interpolation.\n\n\npacman::p_load(sf, terra, gstat, automap,\n               tmap, viridis, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#the-data",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#the-data",
    "title": "In-class Exercise 7",
    "section": "The Data",
    "text": "The Data\nThree data sets will be used in this exercise, they are:\n\nRainfallStation.csv provides location information of existing rainfall stations in Singapore. The data is downloaded from Meteological Service Singapore.\nDAILYDATA_202402.csv provides weather data are rainfall stations for the month February, 2024. The data is also downloaded from Meteological Service Singapore.\nMPSZ-2019 contains planning subzone boundary of URA Master Plan 2019. It is downloaded from data.gov.sg. The original data is in kml format.\n\n\nImporting rainfall station data\nIn the code chunk below, read_csv() of readr package is used to import RainfallStation.csv. rfstations, the output object is in tibble data.frame format.\n\nrfstations &lt;- read_csv(\"data/aspatial/RainfallStation.csv\")\n\n\n\nImporting rainfall record data\nIn the code chunk below, read_csv() of readr package is used to import DAILYDATA_202402.csv. rfdata, the output object is in tibble data.frame format.\n\nrfdata &lt;- read_csv(\"data/aspatial/DAILYDATA_202402.csv\") %&gt;%\n  select(c(1, 5)) %&gt;%\n  group_by(Station) %&gt;%\n  summarise(MONTHSUM = sum(`Daily Rainfall Total (mm)`)) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nNote\n\n\n\n\nselect() of dplyr package is used to retain column 1 and 5 of the input data.\ngroup_by() and summarise() of dplyr package are used to compute the total monthly rainfall from Daily Rainfall Total (mm) field. The output is stored in a new field called MONTHSUM.\n\n\n\n\n\nConverting aspatial data into geospatial data\nNext, left_join() of dplyr is used to join rfstations to rfdata by using the code chunk below.\n\nrfdata &lt;- rfdata %&gt;%\n  left_join(rfstations)\n\n\n\n\n\n\n\nNote\n\n\n\nBecause Station field is available in both rfstations and rfdata, by() argument of left_join() is not needed.\n\n\nIn the code chunk below, st_as_sf() of sf package is used to convert rfdata into a simple feature data.frame object called rfdata_sf.\n\nrfdata_sf &lt;- st_as_sf(rfdata, \n                      coords = c(\"Longitude\",\n                                 \"Latitude\"),\n                      crs= 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\n\n\n\n\n\nNote\n\n\n\n\nFor coords argument, it is important to map the X (i.e. Longitude) first, then follow by the Y (i.e. Latitude).\ncrs = 4326 indicates that the source data is in wgs84 coordinates system.\nst_transform() of sf package is then used to transform the source data from wgs84 to svy21 projected coordinates system.\nsvy21 is the official projected coordinates of Singapore. 3414 is the EPSG code of svy21.\n\n\n\n\n\nImporting planning subzone boundary data\nIn the code chunk below, st_read() of sf package is used to import MPSZ-2019 shapefile into R. The output is called mpsz2019. It is in polygon feature tibble data.frame format.\n\nmpsz2019 &lt;- st_read(dsn = \"data/geospatial\", \n                    layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\AlexeiJason\\ISSS608-VAA\\In-class_Ex\\In-class_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe source data is in wgs84 coordinates system, hence st_tranform() of sf package is used to theo output sf data.frame into svy21 project coordinates system.\n\n\n\n\n\nVisualising the data prepared\nIt is always a good practice to visualise the data prepared. In the code chunk below, tmap functions are used to create a dot map showing locations of rainfall station in Singapore.\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(rfdata_sf) +\n  tm_dots(col = \"red\")\n\n\n\n\ntmap_mode(\"plot\")\n\nIn the code chunk below, tmap functions are used to create a quantitative dot map of rainfall distribution by rainfall station in Singaspore.\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(mpsz2019) +\n  tm_borders() +\ntm_shape(rfdata_sf) +\n  tm_dots(col = 'MONTHSUM')\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#spatial-interpolation-gstat-method",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#spatial-interpolation-gstat-method",
    "title": "In-class Exercise 7",
    "section": "Spatial Interpolation: gstat method",
    "text": "Spatial Interpolation: gstat method\nIn this section, you will gain hands-on experience on performing spatial interpolation by using gstat package. In order to perform spatial interpolation by using gstat, we first need to create an object of class called gstat, using a function of the same name: gstat. A gstat object contains all necessary information to conduct spatial interpolation, namely:\n\nThe model definition\nThe calibration data\n\nBased on its arguments, the gstat function “understands” what type of interpolation model we want to use:\n\nNo variogram model → IDW\nVariogram model, no covariates → Ordinary Kriging\nVariogram model, with covariates → Universal Kriging\n\nThe complete decision tree of gstat, including several additional methods which we are not going to use, is shown in the figure below.\n\n\nData preparation\nTo getting start, we need create a grid data object by using rast() of terra package as shown in the cod chunk below.\n\ngrid &lt;- terra::rast(mpsz2019, \n                    nrows = 690, \n                    ncols = 1075)\ngrid\n\nclass       : SpatRaster \ndimensions  : 690, 1075, 1  (nrow, ncol, nlyr)\nresolution  : 49.98037, 50.01103  (x, y)\nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncoord. ref. : SVY21 / Singapore TM (EPSG:3414) \n\n\nNext, a list called xy will be created by using xyFromCell() of terra package.\n\nxy &lt;- terra::xyFromCell(grid, \n                        1:ncell(grid))\nhead(xy)\n\n            x        y\n[1,] 2692.528 50231.33\n[2,] 2742.509 50231.33\n[3,] 2792.489 50231.33\n[4,] 2842.469 50231.33\n[5,] 2892.450 50231.33\n[6,] 2942.430 50231.33\n\n\n\n\n\n\n\n\nNote\n\n\n\nxyFromCell() gets coordinates of the center of raster cells for a row, column, or cell number of a SpatRaster. Or get row, column, or cell numbers from coordinates or from each other.\n\n\nLastly, we will create a data frame called coop with prediction/simulation locations by using the code chunk below.\n\ncoop &lt;- st_as_sf(as.data.frame(xy), \n                 coords = c(\"x\", \"y\"),\n                 crs = st_crs(mpsz2019))\ncoop &lt;- st_filter(coop, mpsz2019)\nhead(coop)\n\nSimple feature collection with 6 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 25883.42 ymin: 50231.33 xmax: 26133.32 ymax: 50231.33\nProjected CRS: SVY21 / Singapore TM\n                   geometry\n1 POINT (25883.42 50231.33)\n2  POINT (25933.4 50231.33)\n3 POINT (25983.38 50231.33)\n4 POINT (26033.36 50231.33)\n5 POINT (26083.34 50231.33)\n6 POINT (26133.32 50231.33)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#inverse-distance-weighted-idw",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#inverse-distance-weighted-idw",
    "title": "In-class Exercise 7",
    "section": "Inverse Distance Weighted (IDW)",
    "text": "Inverse Distance Weighted (IDW)\n\nThe method\nIn the IDW interpolation method, the sample points are weighted during interpolation such that the influence of one point relative to another declines with distance from the unknown point you want to create.\n\nWeighting is assigned to sample points through the use of a weighting coefficient that controls how the weighting influence will drop off as the distance from new point increases. The greater the weighting coefficient, the less the effect points will have if they are far from the unknown point during the interpolation process. As the coefficient increases, the value of the unknown point approaches the value of the nearest observational point.\nIt is important to notice that the IDW interpolation method also has some disadvantages: the quality of the interpolation result can decrease, if the distribution of sample data points is uneven. Furthermore, maximum and minimum values in the interpolated surface can only occur at sample data points. This often results in small peaks and pits around the sample data points.\n\n\nWorking with gstat\nWe are going to use three parameters of the gstat function:\n\nformula: The prediction “formula” specifying the dependent and the independent variables (covariates)\ndata: The calibration data\nmodel: The variogram model\n\nKeep in mind that we need to specify parameter names, because these three parameters are not the first three in the gstat function definition.\nFor example, to interpolate using the IDW method we create the following gstat object, specifying just the formula and data:\ng = gstat(formula = annual ~ 1, data = rainfall)\n\n\n\n\n\n\nTip\n\n\n\nIn R, formula objects are used to specify relation between objects, in particular—the role of different data columns in statistical models. A formula object is created using the ~ operator, which separates names of dependent variables (to the left of the ~ symbol) and independent variables (to the right of the ~ symbol). Writing 1 to the right of the ~ symbol, as in ~ 1, means that there are no independent variables38.\n\n\nIn the code chunk below,\n\nres &lt;- gstat(formula = MONTHSUM ~ 1, \n             locations = rfdata_sf, \n             nmax = 5,\n             set = list(idp = 0))\n\n\n\n\n\n\n\nImportant\n\n\n\nSpatial interpolation is not a rocket science, students should try to explore the method by changing nmax argument in order to understand how the final surface map will be affected by different nmax values.\n\n\nNow that our model is defined, we can use predict() to actually interpolate, i.e., to calculate predicted values. The predict function accepts:\n\nA raster—stars object, such as dem\nA model—gstat object, such as g\n\nThe raster serves for two purposes:\n\nSpecifying the locations where we want to make predictions (in all methods), and\nSpecifying covariate values (in Universal Kriging only).\n\n\nresp &lt;- predict(res, coop)\n\n[inverse distance weighted interpolation]\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\n\npred &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\", \n                         fun = \"mean\")\n\nNow, we will map the interpolated surface by using tmap functions as shown in the code chunk below.\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(pred) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#kriging",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#kriging",
    "title": "In-class Exercise 7",
    "section": "Kriging",
    "text": "Kriging\n\nThe method\nKriging is one of several methods that use a limited set of sampled data points to estimate the value of a variable over a continuous spatial field. An example of a value that varies across a random spatial field might be total monthly rainfall over Singapore. It differs from Inverse Distance Weighted Interpolation discussed earlier in that it uses the spatial correlation between sampled points to interpolate the values in the spatial field: the interpolation is based on the spatial arrangement of the empirical observations, rather than on a presumed model of spatial distribution. Kriging also generates estimates of the uncertainty surrounding each interpolated value.\nIn a general sense, the kriging weights are calculated such that points nearby to the location of interest are given more weight than those farther away. Clustering of points is also taken into account, so that clusters of points are weighted less heavily (in effect, they contain less information than single points). This helps to reduce bias in the predictions.\nThe kriging predictor is an “optimal linear predictor” and an exact interpolator, meaning that each interpolated value is calculated to minimize the prediction error for that point. The value that is generated from the kriging process for any actually sampled location will be equal to the observed value at this point, and all the interpolated values will be the Best Linear Unbiased Predictors (BLUPs).\nKriging will in general not be more effective than simpler methods of interpolation if there is little spatial autocorrelation among the sampled data points (that is, if the values do not co-vary in space). If there is at least moderate spatial autocorrelation, however, kriging can be a helpful method to preserve spatial variability that would be lost using a simpler method (for an example, see Auchincloss 2007, below).\nKriging can be understood as a two-step process:\n\nfirst, the spatial covariance structure of the sampled points is determined by fitting a variogram; and\nsecond, weights derived from this covariance structure are used to interpolate values for unsampled points or blocks across the spatial field.\n\nKriging methods require a variogram model. A variogram (sometimes called a “semivariogram”) is a visual depiction of the covariance exhibited between each pair of points in the sampled data. For each pair of points in the sampled data, the gamma-value or “semi-variance” (a measure of the half mean-squared difference between their values) is plotted against the distance, or “lag”, between them. The “experimental” variogram is the plot of observed values, while the “theoretical” or “model” variogram is the distributional model that best fits the data.\n\n\n\nWorking with gstat\nFirstly, we will calculate and examine the empirical variogram by using variogram() of gstat package. The function requires two arguments:\n\nformula, the dependent variable and the covariates (same as in gstat, see Section 12.2.1)\ndata, a point layer with the dependent variable and covariates as attributes\n\nas shown in the code chunk below.\n\nv &lt;- variogram(MONTHSUM ~ 1, \n               data = rfdata_sf)\nplot(v)\n\n\n\n\n\n\n\n\nWe can then compare the plot with the theoretical models below.\n\n\n\n\n\n\n\n\n\nWith reference to the comparison above, am empirical variogram model will be fitted by using fit.variogram() of gstat package as shown in the code chunk below.\n\nfv &lt;- fit.variogram(object = v,\n                    model = vgm(\n                      psill = 0.5, \n                      model = \"Sph\",\n                      range = 5000, \n                      nugget = 0.1))\nfv\n\n  model     psill    range\n1   Nug 0.1129190    0.000\n2   Sph 0.5292397 5213.396\n\n\n\n\n\n\n\n\nImportant\n\n\n\nSpatial interpolation is not a rocket science, students should try to explore the method by changing psill, model, range, nugget arguments in order to understand how the final surface map will be affected by different options used.\n\n\nWe can visualise how well the observed data fit the model by plotting fv using the code chunk below.\n\nplot(v, fv)\n\n\n\n\n\n\n\n\nThe plot above reveals that the empirical model fits rather well. In view of this, we will go ahead to perform spatial interpolation by using the newly derived model as shown in the code chunk below.\n\nk &lt;- gstat(formula = MONTHSUM ~ 1, \n           data = rfdata_sf, \n           model = fv)\nk\n\ndata:\nvar1 : formula = MONTHSUM`~`1 ; data dim = 43 x 2\nvariograms:\n        model     psill    range\nvar1[1]   Nug 0.1129190    0.000\nvar1[2]   Sph 0.5292397 5213.396\n\n\nOnce we are happy with the results, predict() of gstat package will be used to estimate the unknown grids by using the code chunk below.\n\nresp &lt;- predict(k, coop)\n\n[using ordinary kriging]\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\nresp$pred &lt;- resp$pred\nresp\n\nSimple feature collection with 314019 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2692.528 ymin: 15773.73 xmax: 56371.45 ymax: 50231.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   var1.pred  var1.var                  geometry        x        y     pred\n1   131.0667 0.6608399 POINT (25883.42 50231.33) 25883.42 50231.33 131.0667\n2   130.9986 0.6610337  POINT (25933.4 50231.33) 25933.40 50231.33 130.9986\n3   130.9330 0.6612129 POINT (25983.38 50231.33) 25983.38 50231.33 130.9330\n4   130.8698 0.6613782 POINT (26033.36 50231.33) 26033.36 50231.33 130.8698\n5   130.8092 0.6615303 POINT (26083.34 50231.33) 26083.34 50231.33 130.8092\n6   130.7514 0.6616697 POINT (26133.32 50231.33) 26133.32 50231.33 130.7514\n7   130.6965 0.6617971  POINT (26183.3 50231.33) 26183.30 50231.33 130.6965\n8   130.6446 0.6619131 POINT (26233.28 50231.33) 26233.28 50231.33 130.6446\n9   130.5958 0.6620184 POINT (26283.26 50231.33) 26283.26 50231.33 130.5958\n10  132.5484 0.6542154 POINT (25033.76 50181.32) 25033.76 50181.32 132.5484\n\n\n\n\n\n\n\n\nNote\n\n\n\nresp is a sf tibble data.frame with point features.\n\n\nIn order to create a raster surface data object, rasterize() of terra is used as shown in the code chunk below.\n\nkpred &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\")\nkpred\n\nclass       : SpatRaster \ndimensions  : 690, 1075, 1  (nrow, ncol, nlyr)\nresolution  : 49.98037, 50.01103  (x, y)\nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncoord. ref. : SVY21 / Singapore TM (EPSG:3414) \nsource(s)   : memory\nname        :      last \nmin value   :  72.77826 \nmax value   : 195.53284 \n\n\n\n\n\n\n\n\nNote\n\n\n\nThe output object kpred is in SpatRaster object class with a spatial resolution of 50m x 50m. It consists of 1075 columns and 690 rows and in SVY21 projected coordinates system.\n\n\n\n\nMapping the interpolated rainfall raster\nFinally, tmap functions are used to map the interpolated rainfall raster (i.e. kpred) by using the code chunk below.\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(kpred) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\",\n            title = \"Total monthly rainfall (mm)\") +\n  tm_layout(main.title = \"Distribution of monthly rainfall, Feb 2024\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n\n\n\n\n\n\n\n\n\n\nAutomatic variogram modelling\nBeside using gstat to perform variogram modelling manually, autofirVariogram() of automap package can be used to perform varigram modelling as shown in the code chunk below.\n\nv_auto &lt;- autofitVariogram(MONTHSUM ~ 1, \n                           rfdata_sf)\nplot(v_auto)\n\n\n\n\n\n\n\n\n\nv_auto\n\n$exp_var\n   np      dist     gamma dir.hor dir.ver   id\n1  15  1957.436  311.9613       0       0 var1\n2  33  3307.349  707.7685       0       0 var1\n3  54  4861.368  848.1314       0       0 var1\n4 116  6716.531  730.3969       0       0 var1\n5 111  9235.708 1006.5381       0       0 var1\n6 120 11730.199 1167.5988       0       0 var1\n7 135 14384.636 1533.5903       0       0 var1\n\n$var_model\n  model    psill   range kappa\n1   Nug     0.00       0   0.0\n2   Ste 24100.71 1647955   0.3\n\n$sserr\n[1] 0.2178294\n\nattr(,\"class\")\n[1] \"autofitVariogram\" \"list\"            \n\n\n\nk &lt;- gstat(formula = MONTHSUM ~ 1, \n           model = v_auto$var_model,\n           data = rfdata_sf)\nk\n\ndata:\nvar1 : formula = MONTHSUM`~`1 ; data dim = 43 x 2\nvariograms:\n        model    psill   range kappa\nvar1[1]   Nug     0.00       0   0.0\nvar1[2]   Ste 24100.71 1647955   0.3\n\n\n\nresp &lt;- predict(k, coop)\n\n[using ordinary kriging]\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\nresp$pred &lt;- resp$pred\n\nkpred &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\")\n\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(kpred) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\",\n            title = \"Total monthly rainfall (mm)\") +\n  tm_layout(main.title = \"Distribution of monthly rainfall, Feb 2024\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#reference",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#reference",
    "title": "In-class Exercise 7",
    "section": "Reference",
    "text": "Reference\nOlea, Ricardo A. (2006-07) “A six-step practical approach to semivariogram modeling”, Stochastic Environmental Research and Risk Assessment, 2006-07, Vol.20 (5), p.307-318. SMU e-journal."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-class Exercise 6: Horizon Plot",
    "section": "",
    "text": "A horizon graph is an analytical graphical method specially designed for visualising large numbers of time-series. It aims to overcome the issue of visualising highly overlapping time-series.\nA horizon graph essentially an area chart that has been split into slices and the slices then layered on top of one another with the areas representing the highest (absolute) values on top. Each slice has a greater intensity of colour based on the absolute value it represents.\n\nIn this section, you will learn how to plot a horizon graph by using ggHoriPlot package.\n\n\n\n\n\n\nTip\n\n\n\nBefore getting started, please visit Getting Started to learn more about the functions of ggHoriPlot package. Next, read geom_horizon() to learn more about the usage of its arguments."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#overview",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#overview",
    "title": "In-class Exercise 6: Horizon Plot",
    "section": "",
    "text": "A horizon graph is an analytical graphical method specially designed for visualising large numbers of time-series. It aims to overcome the issue of visualising highly overlapping time-series.\nA horizon graph essentially an area chart that has been split into slices and the slices then layered on top of one another with the areas representing the highest (absolute) values on top. Each slice has a greater intensity of colour based on the absolute value it represents.\n\nIn this section, you will learn how to plot a horizon graph by using ggHoriPlot package.\n\n\n\n\n\n\nTip\n\n\n\nBefore getting started, please visit Getting Started to learn more about the functions of ggHoriPlot package. Next, read geom_horizon() to learn more about the usage of its arguments."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#getting-started",
    "href": "In-class_Ex/In-class_Ex06/In-class_Ex06.html#getting-started",
    "title": "In-class Exercise 6: Horizon Plot",
    "section": "Getting Started",
    "text": "Getting Started\nBefore getting start, make sure that ggHoriPlot has been included in the pacman::p_load(...) statement above.\n\npacman::p_load(ggHoriPlot, ggthemes, tidyverse)\n\nFor the purpose of this hands-on exercise, Average Retail Prices Of Selected Consumer Items will be used.\nUse the code chunk below to import the AVERP.csv file into R environment.\n\naverp &lt;- read_csv(\"data/AVERP.csv\") %&gt;%\n  mutate(`Date` = dmy(`Date`))\n\nBy default, read_csv will import data in Date field as Character data type. dmy() of lubridate package to palse the Date field into appropriate Date data type in R.\n\nPlotting the horizon graph\nNext, the code chunk below will be used to plot the horizon graph.\n\naverp %&gt;% \n  filter(Date &gt;= \"2018-01-01\") %&gt;%\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  facet_grid(`Consumer Items`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html",
    "title": "Hands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#overview",
    "title": "Hands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#getting-started",
    "title": "Hands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and launching R packages\nIn this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.\nThe code chunk:\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\npackage 'ggplot2' successfully unpacked and MD5 sums checked\npackage 'ggraph' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\alexe\\AppData\\Local\\Temp\\RtmpQRL3Qa\\downloaded_packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#the-data",
    "title": "Hands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R",
    "section": "The Data",
    "text": "The Data\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\nThe edges data\n\nGAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\nThe nodes data\n\nGAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.\n\n\n\n\nImporting network data from files\nIn this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\nReviewing the imported data\nNext, we will examine the structure of the data frame using glimpse() of dplyr.\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type.\n\n\n\n\nWrangling time\nThe code chunk below will be used to perform the changes.\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\n\n\n\nReviewing the revised date fields\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\nWrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\nThe code chunk:\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated.\n\n\n\n\n\nReviewing the revised edges file\nTable below shows the data structure of the reformatted GAStech_edges data frame\n\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#creating-network-objects-using-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#creating-network-objects-using-tidygraph",
    "title": "Hands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R",
    "section": "Creating network objects using tidygraph",
    "text": "Creating network objects using tidygraph\nIn this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\nBefore getting started, you are advised to read these two articles:\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\n\n\nThe tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\nThe dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\nUsing tbl_graph() to build tidygraph data model.\nIn this section, you will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\nBefore typing the codes, you are recommended to review to reference guide of tbl_graph()\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\nReviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\nReviewing the output tidygraph’s graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of “Node Data” and the first three of “Edge Data”.\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\nChanging the active object\nThe nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().\nFor example,\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\nVisit the reference guide of activate() to find out more about the function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Hands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R",
    "section": "Plotting Static Network Graphs with ggraph package",
    "text": "Plotting Static Network Graphs with ggraph package\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph’s network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\nPlotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.\n\n\n\n\n\nChanging the default network graph theme\nIn this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read it’s reference guide at least once.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.\n\n\n\n\n\nChanging the coloring of the plot\nFurthermore, theme_graph() makes it easy to change the coloring of the plot.\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\nWorking with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\nFruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nlayout argument is used to define the layout to be used.\n\n\n\nModifying network nodes\nIn this section, you will colour each node by referring to their respective departments.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\nModifying edges\nIn the code chunk below, the thickness of the edges will be mapped with the Weight variable.\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunks above:\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#creating-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#creating-facet-graphs",
    "title": "Hands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R",
    "section": "Creating facet graphs",
    "text": "Creating facet graphs\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\nWorking with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\nWorking with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\nA framed facet graph\nThe code chunk below adds frame to each graph.\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\nWorking with facet_nodes()\nIn the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#network-metrics-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#network-metrics-analysis",
    "title": "Hands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R",
    "section": "Network Metrics Analysis",
    "text": "Network Metrics Analysis\n\nComputing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User’s Guide to Network Analysis in R to gain better understanding of theses network measures.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\nVisualising network metrics\nIt is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nVisualising Community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex09/Hands-on_Ex09.html#building-interactive-network-graph-with-visnetwork",
    "title": "Hands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R",
    "section": "Building Interactive Network Graph with visNetwork",
    "text": "Building Interactive Network Graph with visNetwork\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an “id” column, and the edge list must have “from” and “to” columns.\nThe function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\nData preparation\nBefore we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\nPlotting the first interactive network graph\nThe code chunk below will be used to plot an interactive network graph by using the data prepared.\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\nWorking with layout\nIn the code chunk below, Fruchterman and Reingold layout is used.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\nVisit Igraph to find out more about visIgraphLayout’s argument.\n\n\nWorking with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\nWorking with visual attributes - Edges\nIn the code run below visEdges() is used to symbolise the edges.\n- The argument arrows is used to define where to place the arrow.\n- The smooth argument is used to plot the edges using a smooth curve.\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visEdges’s argument.\n\n\nInteractivity\nIn the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.\n\nThe argument highlightNearest highlights nearest when clicking a node.\nThe argument nodesIdSelection adds an id node selection creating an HTML select element.\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\nVisit Option to find out more about visOption’s argument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#overview",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#getting-started",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and loading packages\n\n\n\n\n\n\nYour turn\n\n\n\nUsing the steps you learned in previous lesson, install and load sf, tmap and tidyverse packages into R environment.\n\n\n\n\n\nShow the code\npacman::p_load(tmap, tidyverse, sf)\n\n\n\n\n\nImporting data\nFor the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level. You can find the data set in the rds sub-direct of the hands-on data folder.\n\n\n\n\n\n\nDo it Yourself\n\n\n\nUsing appropriate sf function import NGA_wp.rds into R environment.\n\n\n\n\n\nShow the code\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#basic-choropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#basic-choropleth-mapping",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "Basic Choropleth Mapping",
    "text": "Basic Choropleth Mapping\n\nVisualising distribution of non-functional water point\n\n\n\n\n\n\nYour turn\n\n\n\nPlot a choropleth map showing the distribution of non-function water point by LGA\n\n\n\n\n\nShow the code\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\n\n\n\n\nShow the code\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total  water point by LGAs\",\n            legend.outside = FALSE)\n\n\n\n\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#choropleth-map-for-rates",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#choropleth-map-for-rates",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "Choropleth Map for Rates",
    "text": "Choropleth Map for Rates\nIn much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\nDeriving Proportion of Functional Water Points and Non-Functional Water Points\nWe will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, mutate() from dplyr package is used to derive two fields, namely pct_functional and pct_nonfunctional.\n\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n\nPlotting map of rate\n\n\n\n\n\n\nYour turn\n\n\n\nPlot a choropleth map showing the distribution of percentage functional water point by LGA\n\n\n\n\n\nShow the code\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#extreme-value-maps",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07c.html#extreme-value-maps",
    "title": "Hands-on Exercise 7c: Analytical Mapping",
    "section": "Extreme Value Maps",
    "text": "Extreme Value Maps\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\nPercentile Map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\nData Preparation\nStep 1: Exclude records with NA by using the code chunk below.\n\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\n\nStep 2: Creating customised classification and extracting values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen variables are extracted from an sf data.frame, the geometry is extracted as well. For mapping and spatial manipulation, this is the expected behavior, but many base R functions cannot deal with the geometry. Specifically, the quantile() gives an error. As a result st_set_geomtry(NULL) is used to drop geomtry field.\n\n\n\n\nWhy writing functions?\nWriting a function has three big advantages over using copy-and-paste:\n\nYou can give a function an evocative name that makes your code easier to understand.\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\nSource: Chapter 19: Functions of R for Data Science.\n\n\nCreating the get.var function\nFirstly, we will write an R function as shown below to extract a variable (i.e. wp_nonfunctional) as a vector out of an sf data.frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\nA percentile mapping function\nNext, we will write a percentile mapping function by using the code chunk below.\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\nTest drive the percentile mapping function\nTo run the function, type the code chunk as shown below.\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\nNote that this is just a bare bones implementation. Additional arguments such as the title, legend positioning just to name a few of them, could be passed to customise various features of the map.\n\n\n\nBox map\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nDisplaying summary statistics on a choropleth map by using the basic principles of boxplot.\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\nCreating the boxbreaks function\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\nCreating the get.var function\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\nTest drive the newly created function\nLet’s test the newly created function\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\nBoxmap function\nThe code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#overview",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\n\n\n\n\n\n\nTip\n\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#getting-started",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#importing-data-into-r",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "Importing Data into R",
    "text": "Importing Data into R\n\nThe Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\nImporting Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\AlexeiJason\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nNotice that only the first ten records will be displayed. Do you know why?\n\n\nImporting Attribute Data into R\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\nData Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\nData wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\nJoining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "Choropleth Mapping Geospatial Data Using tmap",
    "text": "Choropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\nPlotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\nCreating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\nDrawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\nDrawing a choropleth map using tm_fill() and *tm_border()**\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\nData classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nPlotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\n\n\nPlotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nColour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\nUsing ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\nMap Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\nMap Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nMap style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\nCartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nBy assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07a.html#reference",
    "title": "Hands-on Exercise 7a: Choropleth Mapping with R",
    "section": "Reference",
    "text": "Reference\n\nAll about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\nGeospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\nData wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#overview",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nBefore we get started, you are required to check if treemap and tidyverse pacakges have been installed in you R.\n\npacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#data-wrangling",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nIn this exercise, REALIS2018.csv data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from REALIS portal (https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\nImporting the data set\nIn the code chunk below, read_csv() of readr is used to import realis2018.csv into R and parsed it into tibble R data.frame format.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\nThe output tibble data.frame is called realis2018.\n\n\nData Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\n\n\n\n\nRecommendation\n\n\n\nStudents who are new to dplyr methods should consult Introduction to dplyr before moving on to the next section.\n\n\n\n\nGrouped summaries without the Pipe\nThe code chank below shows a typical two lines code approach to perform the steps.\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\nNote\n\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.\n\n\nGrouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\n\n\n\n\n\nRecommendation\n\n\n\nTo learn more about pipe, visit this excellent article: Pipes in R Tutorial For Beginners.\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#designing-treemap-with-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#designing-treemap-with-treemap-package",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "Designing Treemap with treemap Package",
    "text": "Designing Treemap with treemap Package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\nDesigning a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\nUsing the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\nWarning:\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n\n\nWorking with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThinking to learn from the conde chunk above.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\n\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n\n\n\nColours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n\nThe “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.\n\n\n\nThe “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nTreemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\nWorking with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nUsing sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#designing-treemap-using-treemapify-package",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "Designing Treemap using treemapify Package",
    "text": "Designing Treemap using treemapify Package\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\nDesigning a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\nDefining hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05e.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "Designing Interactive Treemap using d3treeR",
    "text": "Designing Interactive Treemap using d3treeR\n\nInstalling d3treeR package\nThis slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\n\n\ninstall.packages(\"devtools\")\n\n\nNext, you will load the devtools library and install the package found in github by using the codes below.\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nNow you are ready to launch d3treeR package\n\n\nlibrary(d3treeR)\n\n\n\nDesigning An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html",
    "title": "Hands-on Exercise 5c: Visual Multivariate Analysis with Heatmap",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#overview",
    "title": "Hands-on Exercise 5c: Visual Multivariate Analysis with Heatmap",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5c: Visual Multivariate Analysis with Heatmap",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nBefore you get started, you are required:\n\nto start a new R project, and\nto create a new R Markdown document.\n\nNext, you will use the code chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#importing-and-preparing-the-data-set",
    "title": "Hands-on Exercise 5c: Visual Multivariate Analysis with Heatmap",
    "section": "Importing and Preparing The Data Set",
    "text": "Importing and Preparing The Data Set\nIn this hands-on exercise, the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\nImporting the data set\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nThe output tibbled data frame is called wh.\n\n\nPreparing the data\nNext, we need to change the rows by country name instead of row number by using the code chunk below\n\nrow.names(wh) &lt;- wh$Country\n\nNotice that the row number has been replaced into the country name.\n\n\nTransforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#static-heatmap",
    "title": "Hands-on Exercise 5c: Visual Multivariate Analysis with Heatmap",
    "section": "Static Heatmap",
    "text": "Static Heatmap\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nIn this section, you will learn how to plot static heatmaps by using heatmap() of R Stats package.\n\nheatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\nNote:\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#creating-interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05c.html#creating-interactive-heatmap",
    "title": "Hands-on Exercise 5c: Visual Multivariate Analysis with Heatmap",
    "section": "Creating Interactive Heatmap",
    "text": "Creating Interactive Heatmap\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nBefore we get started, you should review the Introduction to Heatmaply to have an overall understanding of the features and functions of Heatmaply package. You are also required to have the user manualof the package handy with you for reference purposes.\nIn this section, you will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\nWorking with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.\n\n\n\nData trasformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\nScaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\n\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nNormalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nPercentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nClustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\nManual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nStatistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\nSeriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\nWorking with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\nThe finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#overview",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "Installing and launching R packages",
    "text": "Installing and launching R packages\nFor this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task.\n\npacman::p_load(plotly, ggtern, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#data-preparation",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nThe data\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\nImporting Data\nTo import respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\nPreparing the Data\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05a.html#plotting-ternary-diagram-with-r",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "Plotting Ternary Diagram with R",
    "text": "Plotting Ternary Diagram with R\n\nPlotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\nPlotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html",
    "title": "Hands-on Exercise 4c: Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#learning-outcome",
    "title": "Hands-on Exercise 4c: Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#getting-started",
    "title": "Hands-on Exercise 4c: Visualising Uncertainty",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\nData import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualizing-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4c: Visualising Uncertainty",
    "section": "Visualizing the uncertainty of point estimates: ggplot2 methods",
    "text": "Visualizing the uncertainty of point estimates: ggplot2 methods\nA point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.\n\n\n\n\n\n\nImportant\n\n\n\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\nIn this section, you will learn how to plot error bars of maths scores by race by using data provided in exam tibble data frame.\nFirstly, code chunk below will be used to derive the necessary summary statistics.\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup_by() of dplyr package is used to group the observation by RACE,\nsummarise() is used to compute the count of observations, mean, standard deviation\nmutate() is used to derive standard error of Maths by RACE, and\nthe output is save as a tibble data table called my_sum.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor the mathematical explanation, please refer to Slide 20 of Lesson 4.\n\n\nNext, the code chunk below will be used to display my_sum tibble data frame in an html table format.\n\nThe code chunkThe table\n\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\nPlotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\n\n\n\n\nPlotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\n\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 4c: Visualising Uncertainty",
    "section": "Visualising Uncertainty: ggdist package",
    "text": "Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n\n.width = 0.95\n.point = median\n.interval = qi\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\n\n\n\n\n\n\nYour turn\n\n\n\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 4c: Visualising Uncertainty",
    "section": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\nStep 1: Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nNote: You only need to perform this step once.\nStep 2: Launch the application in R\n\nlibrary(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Exercise 4c: Visualising Uncertainty",
    "section": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#learning-outcome",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#getting-started",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "3 Visualising Distribution with Ridgeline Plot",
    "text": "3 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n3.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n3.3Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04a.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "4. Visualising Distribution with Raincloud Plot",
    "text": "4. Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\n\n\n\n\n4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe plotThe code chunk\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n4.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.1 Tooltip effect with tooltip aesthetic",
    "text": "4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\nCharacter Format (ID)Row IndexNumber Format (Math)\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=ID),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL) +  #&lt;&lt;&lt; null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the Row Index will be displayed.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=row.names(exam_data)),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)+  #&lt;&lt;&lt; null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the Number format (Math) will be displayed.\n\n\nShow the code\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=factor(MATHS)),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)+  #&lt;&lt;&lt; null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n\ngirafe(ggobj=p,\n       width_svg = 6,\n       height_svg = 6*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.2 Displaying multiple information on tooltip",
    "text": "4.2 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below. We create a new column [tooltip] in exam_data by concatenating ID and Class.\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\nShow the code\nexam_data$tooltip &lt;- c(paste0(\"Name = \",\n                              exam_data$ID,\n                              \"\\n Class = \",\n                              exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(aes(tooltip=tooltip),\n                           stackgroups = TRUE,\n                           binwidth = 1,\n                           method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks= NULL)+  #null to suppress axis labels\n  labs(x =\"Distribution of Math Scores\") + \n  theme(axis.line = element_blank(),\n        plot.background = element_rect(fill = \"#f5f5f5\", color = \"#f5f5f5\"))\n  \ngirafe(ggobj=p,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#customising-tooltip-style",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.3 Customising Tooltip style",
    "text": "4.3 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\n\nShow the code\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.4 Displaying statistics on tooltip",
    "text": "4.4 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\nShow the code\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.5 Hover effect with data_id aesthetic",
    "text": "4.5 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n4.5.1 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "4.6 Combining tooltip and hover effect",
    "text": "4.6 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "8.1 Working with visual variable: plot_ly() method",
    "text": "8.1 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\n\nShow the code\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "8.2 Creating an interactive scatter plot: ggplotly() method",
    "text": "8.2 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\n\nShow the code\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "8.3 Coordinated Multiple Views with plotly",
    "text": "8.3 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\nShow the code\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#crosstalk-is-an-add-on-to-the-htmlwidgets-package.-it-extends-htmlwidgets-with-a-set-of-classes-functions-and-conventions-for-implementing-cross-widget-interactions-currently-linked-brushing-and-filtering.",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#crosstalk-is-an-add-on-to-the-htmlwidgets-package.-it-extends-htmlwidgets-with-a-set-of-classes-functions-and-conventions-for-implementing-cross-widget-interactions-currently-linked-brushing-and-filtering.",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "9.1 Interactive Data Table: DT package",
    "text": "9.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "9.2 Linked brushing: crosstalk method",
    "text": "9.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown above.\n\n\nShow the code\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#ggiraph",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "10.1 ggiraph",
    "text": "10.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03a.html#plotly-for-r",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "10.2 plotly for R",
    "text": "10.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "",
    "text": "In this chapter, we will learn the basic principles and essential components of ggplot2, and gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics\nBy then end of this chapter, we will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "Install and launching R packages",
    "text": "Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. if they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "Importing the data",
    "text": "Importing the data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "R Graphics",
    "text": "R Graphics\n\npar(bg = \"#f5f5f5\")\n\nhist(exam_data$MATHS, \n     ylab='Number of Students', \n     xlab='Score', \n     main='Distribution of Maths scores',\n     col='#7F948F')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#ggplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "ggplot",
    "text": "ggplot\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#7F948F\") +\n#  ggtitle(\"Distribution of Maths scores\")+\n  labs(x = \"Score\",\n       y = \"Number of Students\",\n       title = \"Distribution of Maths scores\")+\n  #theme_grey()+\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nggplot2 is preferred over the built-in plot function due to the following reason:\n“The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.” - Hadley Wickham"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_bar",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.1 geom_bar",
    "text": "7.1 geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data = exam_data, \n       aes(x = reorder(RACE, RACE, function(x)-length(x)))) +\n    geom_bar()+\n    ylim(0, 220) + \n    geom_text(stat=\"count\", \n      aes(label=paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1) +\n    labs(x = \"Race\",\n         y = \"No. of\\nStudents\",\n         title = \"Number of Students by Race\") + \n    theme_grey() +\n    theme(\n      axis.title.y = element_text(hjust=1, angle=0),\n      plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\")\n    )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_dotplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.2 geom_dotplot",
    "text": "7.2 geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5) +\n  scale_y_continuous(NULL,\n                     breaks= NULL) +     \n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_histogram",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.3 geom_histogram",
    "text": "7.3 geom_histogram\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(binwidth=10,color='white') +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.4 Modifying a geometric object by changing geom()",
    "text": "7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20\nfill argument is used to shade the histogram with color\ncolor argument is used to change the outline colour of the bars\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"pink\")  \n\n\n\n\n\n\n\n\ngeom_vline is used to add mean and median lines\nannotate is used to include descriptions for each line\n\nggplot(data=exam_data,\n       aes(x=MATHS)) + \n    geom_histogram(bins=20, \n                   color=\"grey30\", \n                   fill=\"#E1C8C4\") +\n    labs(x = \"Math Score\",\n         y = \"No. of Pupils\",\n         title = \"Distribution of Math Scores\") + \n    geom_vline(aes(xintercept=median(exam_data$MATHS, na.rm=T)),\n               color=\"#595DE5\", linewidth=1, linetype=\"dashed\") + \n    # Add line annotations\n    annotate(\n      \"text\", \n      x = 82, \n      y = 50,\n      label = paste(\"Median =\", round(median(exam_data$MATHS, na.rm=T), 3)),\n      color = \"#595DE5\",\n      size = 3.5\n    ) +\n    geom_vline(aes(xintercept=mean(exam_data$MATHS, na.rm=T)),\n               colour=\"red\", linewidth=1, linetype=\"dashed\") + \n      # Add line annotations\n    annotate(\n      \"text\", \n      x = 60, \n      y = 42,\n      label = paste(\"Mean =\", round(mean(exam_data$MATHS, na.rm=T), 3)),\n      color = \"red\",\n      size = 3.5\n    ) +\n    theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\n\nNote: Don’t use both boundary and center for bin alignment. Just pick one.\n\nbins: default bin number is 30 in ggplot2\nboundary: bin position specifier\nbinwidth: bin breaks automatically based on a specific binwidth; can be used to specify the endpoint of any bin or center to specify the center of any bin"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.5 Modifying a geometric object by changing aes()",
    "text": "7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of *aesthetic()*.\nscale_fill_manual() allow you to specify your own set of mappings from levels in the data to aesthetic values.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill = GENDER)) +\n         geom_histogram(bins =20,\n                        color='grey40')+\n  scale_fill_manual(values = c(\"#E1C8C4\",\"#7F948F\"))+\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_density",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.6 geom_density",
    "text": "7.6 geom_density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot, where y = relative frequency / binwidth.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density(color='#7F948F')+\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes().\nChanges: - color within geom_density needs to be removed. - added fill and color within aes() - scale_color_manual() for changing line color - scale_fill_manual() for changing area fill colors.\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill = GENDER,\n           color=GENDER)) +\n  geom_density(size=2, \n               alpha=0.6)+\n  scale_color_manual(values = c(\"#E1C8C4\",\"#7F948F\"))+\n  scale_fill_manual(values = c(\"#E1C8C4\",\"#7F948F\"))+\n    labs(x = \"Maths Score\",\n       y = \"Density\",\n       title = \"Density of Maths Score by Gender\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_boxplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.7 geom_boxplot",
    "text": "7.7 geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nWe can also incorporate facet_wrap() to create boxplots of math scores for each class that is separated by gender.\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_violin",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.8 geom_violin",
    "text": "7.8 geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom_point",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.9 geom_point",
    "text": "7.9 geom_point\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point(), grouped by gender.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= ENGLISH,\n           color = GENDER)) +\n  geom_point() +\n  scale_color_manual(values = c(\"#E1C8C4\",\"#7F948F\")) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nTo add reference lines and x/y axis limits:\n\nggplot(data=exam_data, \n       aes(x= ENGLISH, \n           y = MATHS, \n           color = GENDER)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  scale_color_manual(values = c(\"#E1C8C4\",\"#7F948F\")) +\n  geom_vline(aes(xintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\") + \n  geom_hline(aes(yintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\") +  \n  labs(x = \"English Score\",\n       y = \"Maths Score\",\n       title = \"Maths against English Score by Gender\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combination-of-geom-objects",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#combination-of-geom-objects",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "7.10 Combination of geom objects",
    "text": "7.10 Combination of geom objects\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\nImportant:\nOrder of geom layer matters! In the code below, boxplot is plotted after/above the scatter and thus covers parts of the scatterplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n\n  geom_point(position = 'jitter',\n             size=0.5) +\n  geom_boxplot() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.1 Working with stat()",
    "text": "8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data,\n       aes( y= MATHS, x = GENDER)) +\n  geom_boxplot() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.2 Working with stat - the stat_summary() method",
    "text": "8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = 'point',\n               fun.y='mean',\n               colour = 'red',\n               size=4) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.3 Working with stat - the geom() method",
    "text": "8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)  +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-best-fit-curve",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-best-fit-curve",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "8.4 Adding best fit curve",
    "text": "8.4 Adding best fit curve\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=1) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nThe default method used is loess.\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=1, method = lm) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nTo add equation and R^2 to the plot, we can use the library ggpmisc.\n\npacman::p_load(ggpmisc)\n\nstat_poly_line() is used to add lm line and stat_poly_eq() displays the equation and R-square value.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  stat_poly_line() +\n  stat_poly_eq(use_label(c(\"eq\", \"R2\"))) +\n  geom_point() +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "9.1 Working with facet_wrap()",
    "text": "9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_wrap(~CLASS) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores by Class\") +\n  theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nTilde Operator:\nThe operator ~ is used to define the relationship between dependent variable and independent variables in a formula; it separates the lefthand side and righthand side.\nThe basic syntax for the lm() function is: model &lt;- lm(y ~ x1 + x2, data=df)\nThe variable name on the left side of the tilde operator (y) represents the response variable. The variable names on the right side of the tilde operator (x1, x2) represent the predictor variables.\nFor multiple predictor variables: model &lt;- lm(y ~ x1 + x2 + x3, data=df)\nFor unknown number of predictor variables: model &lt;- lm(y ~ ., data=df)\n\n9.1.1 Subsetting Data\nIf we only want to visualise classes 3A, 3B, 3C, 3D, we could subset the exam data to include only these students using filter() from the dplyr package.\n\nsub_data &lt;- exam_data %&gt;% \n  filter(CLASS %in% c('3A', '3B', '3C', '3D'))\n\nggplot(data=sub_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_wrap(~CLASS) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores for Classes 3A, 3B, 3C, 3D\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\n\n\n9.1.2 Multiple Overlaid Histograms\n\nggplot(data=exam_data,\n       aes(x=MATHS, fill = GENDER)) + #Add fill to split histogram categories\n  geom_histogram(position = \"identity\", alpha=0.2, bins=20) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores by Gender\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nReferences: StatisticsGlobe and Facetted histograms with overlaid normal curves\n\n\n9.1.3 Grouped Data\nBy Column\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER) +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nBy Row\n\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER, nrow = 2, strip.position = \"right\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "9.2 facet_grid() function",
    "text": "9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_grid(~CLASS) +\n  labs(y='Number of students', \n       x='Math scores',\n       title = \"Maths scores by Class\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "10.1 Working with Coordinate",
    "text": "10.1 Working with Coordinate\nBar chart of ggplot2 is in vertical form by default.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()+\n    labs(y='Number of students', \n       x='Race',\n       title = \"Number of Students by Race\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\nNote: No changes to x-, y- axis names under labs().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n    labs(y='Number of students', \n       x='Race',\n       title = \"Number of Students by Race\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics - ggplot2 methods",
    "section": "10.2 Changing the y- and x-axis range",
    "text": "10.2 Changing the y- and x-axis range\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +\n      labs(y='English', \n       x='Maths',\n       title = \"Graph of English against Maths scores\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +\n  coord_cartesian (xlim=c(0,100),\n                   ylim= c(0,100))+\n        labs(y='English', \n       x='Maths',\n       title = \"Graph of English against Maths scores\") +\n      theme(plot.background=element_rect(fill=\"#f5f5f5\",colour=\"#f5f5f5\"))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Welcome Abroad!",
    "section": "",
    "text": "👋 Hi, I’m @AlexeiJason\n👀 I’m interested in comprehending the complexities of Data Analytics\n🌱 I’m currently learning how to create effective R visualizations\n💞️ I’m looking to collaborate on more projects!\n📫 How to reach me alexeijason@gmail.com\n⚡ Fun fact: The 17th-century English statistician John Graunt pioneered statistical analysis of demographic data, laying the groundwork for modern data analysis and epidemiology."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, you will be introduced to several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, you will be able to:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.1 Installing and loading the required libraries",
    "text": "2.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.2 Importing data",
    "text": "2.2 Importing data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "3.1 Working with ggrepel",
    "text": "3.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.1 Working with ggtheme package",
    "text": "4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.2 Working with hrbthems package",
    "text": "4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.1 Creating Composite Graphics: pathwork methods",
    "text": "5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.2 Combining two ggplot2 graphs",
    "text": "5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.3 Combining three ggplot2 graphs",
    "text": "5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\nTo learn more about, refer to Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.4 Creating a composite figure with tag",
    "text": "5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.5 Creating figure with insert",
    "text": "5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R PUBLISHED",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\nTip:\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#overview",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R PUBLISHED",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\nTip:\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#getting-started",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R PUBLISHED",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nThings to learn from the code chunk above:\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R PUBLISHED",
    "section": "3 Animated Data Visualisation: gganimate methods",
    "text": "3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\n\nShow the code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nShow the code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R PUBLISHED",
    "section": "4 Animated Data Visualisation: plotly",
    "text": "4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\n\nShow the code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\n\nShow the code\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\n\nShow the code\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03b.html#reference",
    "title": "Hands-on Exercise 3b: Programming Animated Statistical Graphics with R PUBLISHED",
    "section": "5 Reference",
    "text": "5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#learning-outcome",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "Visual Statistical Analysis with ggstatsplot",
    "text": "Visual Statistical Analysis with ggstatsplot\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nImporting data\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\nImporting Exam.csv data by using appropriate tidyverse package.\n\n\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n\n\n\n\nOne-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nUnpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\nHow to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\nTwo-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nOneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\norrelation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#visualising-models",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "Visualising Models",
    "text": "Visualising Models\nIn this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#getting-started-1",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "Getting Started",
    "text": "Getting Started"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04b.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\n\n\n\n\n\n\nDo-It-Yourself\n\n\n\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n\nImporting Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame.\n\n\nMultiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nModel Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#overview",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#importing-data",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "Importing Data",
    "text": "Importing Data\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnelplotr-methods",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "FunnelPlotR methods",
    "text": "FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\nFunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\nFunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\nFunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "Funnel Plot for Fair Visual Comparison: ggplot2 methods\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\nComputing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\nCalculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\nPlotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\nInteractive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04d.html#references",
    "title": "Hands-on Exercise 4d: Funnel Plots for Fair Comparisons",
    "section": "References",
    "text": "References\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#overview",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nBefore you get started, you are required:\n\nto start a new R project, and\nto create a new R Markdown document.\n\nNext, you will use the code chunk below to install and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#importing-and-preparing-the-data-set",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "Importing and Preparing The Data Set",
    "text": "Importing and Preparing The Data Set\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\nImporting Data\nFirst, let us import the data into R by using read_csv() of readr package.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#building-correlation-matrix-pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#building-correlation-matrix-pairs-method",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "Building Correlation Matrix: pairs() method",
    "text": "Building Correlation Matrix: pairs() method\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore you continue to the next step, you should read the syntax description of pairsfunction.\n\nBuilding a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])\n\n\n\n\n\n\n\n\n\n\nDrawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\nIncluding with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "Visualising Correlation Matrix: ggcormat()",
    "text": "Visualising Correlation Matrix: ggcormat()\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, you will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\nThe basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#building-multiple-plots",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#building-multiple-plots",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "Building multiple plots",
    "text": "Building multiple plots\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "Visualising Correlation Matrix using corrplot Package",
    "text": "Visualising Correlation Matrix using corrplot Package\nIn this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\nBefore getting started, you are required to read An Introduction to corrplot Package in order to gain basic understanding of corrplot package.\n\nGetting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\nWorking with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\nFeel free to change the method argument to other supported visual geometrics.\n\n\nWorking with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them.\n\n\nWorking with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\nCombining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\n\n\n\n\n\n\n\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\nReorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\nReordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05b.html#r-packages",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "R packages",
    "text": "R packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#overview",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nFor this exercise, the GGally, parcoords, parallelPlot and tidyverse packages will be used.\nThe code chunks below are used to install and load the packages in R.\n\npacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#data-preparation",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nIn this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Plotting Static Parallel Coordinates Plot",
    "text": "Plotting Static Parallel Coordinates Plot\nIn this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\nPlotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\nPlotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\n\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\nParallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\nRotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\nAdjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods",
    "text": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\nThe basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.\n\n\nRotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\n\nChanging the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nParallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05d.html#references",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "References",
    "text": "References\n\nggparcoord() of GGally package\nparcoords user guide\nparallelPlot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart\nShow the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#learning-outcome",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Getting Started",
    "text": "Getting Started"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#do-it-yourself",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#do-it-yourself",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Do It Yourself",
    "text": "Do It Yourself\nWrite a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmatically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nThe Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\nImporting the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\n\ntz field stores time zone of the source IP address.\n\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\n\n\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\nBuilding Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\nPlotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Cycle Plot",
    "text": "Plotting Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\nStep 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\nStep 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\nSrep 6: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-slopegraph",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Slopegraph",
    "text": "Plotting Slopegraph\nIn this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\nStep 1: Data Import\nImport the rice data set into R environment by using the code chunk below.\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\nStep 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap.\n\n\nBy the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#learning-outcome",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "",
    "text": "By the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#the-data",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "The data",
    "text": "The data\nThe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#data-import-and-preparation",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "Data Import and Preparation",
    "text": "Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "Creating a sf data frame from an aspatial data frame",
    "text": "Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\nThings to learn from the arguments above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nYou can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bbox provides information of the extend of the geospatial data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "It all started with an interactive point symbol map",
    "text": "It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#lets-make-it-proportional",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#lets-make-it-proportional",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "Lets make it proportional",
    "text": "Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#lets-give-it-a-different-colour",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#lets-give-it-a-different-colour",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "Lets give it a different colour",
    "text": "Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#i-have-a-twin-brothers",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#i-have-a-twin-brothers",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "I have a twin brothers :)",
    "text": "I have a twin brothers :)\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#all-about-tmap-package",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#all-about-tmap-package",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "All about tmap package",
    "text": "All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#geospatial-data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#geospatial-data-wrangling-1",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "Geospatial data wrangling",
    "text": "Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07b.html#data-wrangling",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "Data wrangling",
    "text": "Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/data/geospatial/MPSZ-2019.html",
    "title": "Lexei's Projects",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse,haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse,haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data to R\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex07/data/geospatial/MPSZ-2019.html",
    "title": "Lexei's Projects",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lexei's Projects",
    "section": "",
    "text": "Hey there! Welcome to my Visual Analytics and Applications playground! 🚀 Dive into our projects where data gets a makeover, turning into exciting stories and insights. Hurray! 🎉✨\n\n\n\n\n\n\n\nMy Latest Works:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 9: Modelling, Visualising and Analysing Network Data with R\n\n\n\n\n\n\n\n\n\n\n\nMar 13, 2024\n\n\nAlexei Jason\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 7\n\n\n\n\n\n\n\n\n\n\n\nMar 9, 2024\n\n\nAlexei Jason\n\n\n\n\n\n\n\n\n\n\n\n\nTake-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application\n\n\n\n\n\n\n\n\n\n\n\nFeb 28, 2024\n\n\nAlexei Jason\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 6: Horizon Plot\n\n\n\n\n\n\n\n\n\n\n\nFeb 24, 2024\n\n\nAlexei Jason\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 7c: Analytical Mapping\n\n\n\n\n\n\n\n\n\n\n\nFeb 22, 2024\n\n\nAlexei Jason\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 7b: Visualising Geospatial Point Data\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2024\n\n\nAlexei Jason\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "",
    "text": "In this Take-home Exercise 2, I’ve selected a peer’s Take-home Exercise 1 submission and evaluated its charts for clarity and aesthetics. My objective is to conduct a thorough critique of the design and visual representation of the chosen submission. Drawing upon the principles of data visualization design covered in Lessons 1 and 2, I will draft a blueprint for an alternative design. Following this, I’ll utilize ggplot2, along with its extensions and the tidyverse packages, to revamp the original design, aiming to improve its visual impact and enhance clarity."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-packages",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "2.1 Importing packages",
    "text": "2.1 Importing packages\nIn this take home exercise we are going to utilise several package\n\nTidyverse (to wrangle and plot our data)\nHaven (to read our dataset from sas data type)\nPatchwork (to plot multiple plot in the same figure)\n\n\npacman::p_load(tidyverse, haven, patchwork, ggthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-dataset",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#importing-dataset",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "2.2 Importing dataset",
    "text": "2.2 Importing dataset\nImporting the data in sas data type\n\nstu_qqq &lt;- read_sas('data/cy08msp_stu_qqq.sas7bdat')\n\nFiltering the data to singapore\n\n stu_qqq_SG &lt;- stu_qqq %&gt;%   filter(CNT == \"SGP\")\n\nExport the filtered dataset to rds to ease further data importing\n\nwrite_rds(stu_qqq_SG, 'data/stu_qqq_SG.rds')\n\nRead the exported rds\n\nstu_qqq_SG &lt;- read_rds('data/stu_qqq_SG.rds')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#variable-preparations",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#variable-preparations",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "2.3 Variable Preparations",
    "text": "2.3 Variable Preparations\nWe’re giving the original visualization a makeover, sticking to the same data my classmate picked. That means I’ll focus on student performance in math, reading science, as well as school identity, gender and social economic.\n\nschoolID (Renamed from CNTSCHID)\ngender (Renamed from ST004D01T)\nmath (Average of 10 math scores)\nscience (Average of 10 science scores)\nreading (Average of 10 reading scores, renamed from ‘read’)\nsocial_economic (Renamed from ESCS)\n\nstu_filtered &lt;- stu_qqq_SG %&gt;%\n  mutate(math = rowMeans(select(stu_qqq_SG,\n         PV1MATH,PV2MATH,PV3MATH,PV4MATH,PV5MATH,PV6MATH,PV7MATH,PV8MATH,PV9MATH,PV10MATH)),\n         science = rowMeans(select(stu_qqq_SG,\n         PV1SCIE,PV2SCIE,PV3SCIE,PV4SCIE,PV5SCIE,PV6SCIE,PV7SCIE,PV8SCIE,PV9SCIE,PV10SCIE)),\n         reading = rowMeans(select(stu_qqq_SG,\n         PV1READ,PV2READ,PV3READ,PV4READ,PV5READ,PV6READ,PV7READ,PV8READ,PV9READ,PV10READ))\n         ) %&gt;%\n  select(CNTSCHID,ST004D01T,math,science,reading,ESCS) %&gt;%\n  rename(c(schoolID = \"CNTSCHID\", \n           gender = \"ST004D01T\",\n           socio_economic = \"ESCS\")) %&gt;%\n  mutate(gender = recode(gender, \n                         \"1\" = \"Female\", \n                         \"2\" = \"Male\"))\n\nstu_filtered$schoolID &lt;- as.factor(stu_filtered$schoolID)\nstu_filtered$gender &lt;- as.factor(stu_filtered$gender)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#original-design",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#original-design",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.1 Original Design",
    "text": "3.1 Original Design\nThe initial design is presented here:\n\n\n\n\n\nUsing histograms to visualize the distribution of scores by gender is a great approach. Nonetheless, there are several enhancements that could be implemented to improve their effectiveness."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#alternative-design",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#alternative-design",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.2 Alternative Design",
    "text": "3.2 Alternative Design\n\n3.2.1 Sketch for Alternative Design\n\n\n\n\n\n\n3.2.2 Headings for Individual Charts\nWe intend to assign titles to each graph to distinguish between the female and male graphs instead of using numerical identifiers such as 1 and 2.\n\n\n3.2.3 Mean and Median Markings\nAdding lines to denote the mean and median to enhance the comparison between the two graphs.\n\n\n3.2.4 Enhancements in Appearance\nThe grey bars, lacking clear borders, may confuse readers when interpreting the graph. We plan to enhance clarity by adjusting the color of the bars and introducing distinct borders."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#final-design",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#final-design",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.3 Final Design",
    "text": "3.3 Final Design\n\n\nShow the code\n# Assign the dataset to be analyzed\neda_data &lt;- stu_filtered\n\n# Calculate mean and median math scores by gender\nstats &lt;- data.frame(\n  gender = as.factor(c('Female', 'Male')),\n  mean = c(\n    mean(stu_filtered$math[stu_filtered$gender == \"Female\"]),\n    mean(stu_filtered$math[stu_filtered$gender == \"Male\"])\n  ),\n  median = c(\n    median(stu_filtered$math[stu_filtered$gender == \"Female\"]),\n    median(stu_filtered$math[stu_filtered$gender == \"Male\"])\n  )\n)\n\n# Create ggplot for math scores by gender\nggplot(data = eda_data, aes(x = math)) +\n  geom_histogram(bins = 20, color = 'grey50', fill = 'lightblue') +\n  facet_wrap(~gender) +\n  geom_vline(data = stats, mapping = aes(xintercept = mean), color = \"red\") +\n  geom_vline(data = stats, mapping = aes(xintercept = median), color = \"blue\") +\n  annotate(\n    'text',\n    x = Inf, y = Inf, hjust = 1, vjust = 2.1, label = paste(\"mean\"), color = \"red\"\n  ) +\n  annotate(\n    'text',\n    x = Inf, y = Inf, hjust = 1, vjust = 1, label = paste(\"median\"), color = \"blue\"\n  ) +\n  ggtitle(\"Math Scores by Gender\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#original-design-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#original-design-1",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "4.1 Original Design",
    "text": "4.1 Original Design\nThe initial design is presented here:\n\n\n\n\n\nThe main goal is to analyze and compare the score distributions across schools for each subject, box plots would serve as highly effective visual tools. However, using a heatmap to visualize this objective would make it difficult for readers to interpret the data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#alternative-design-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#alternative-design-1",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "4.2 Alternative Design",
    "text": "4.2 Alternative Design\n\n4.2.1 Sketch for Alternative Design\n\n\n\n4.2.2 Alternative chart type for better analysis\nTo analyze and compare the score distributions across schools for each subject, box plots would serve as highly effective visual tools. Boxplots are effective for summarizing data distributions, identifying outliers, facilitating comparisons between groups, and offering a space-efficient and intuitive visualization of statistical information. Introducing a heatmap to visualize this objective would complicate data analysis for readers."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#final-design-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#final-design-1",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "4.3 Final Design",
    "text": "4.3 Final Design\n\n\nShow the code\n# Compute average scores in math, science, and reading\naverage_math &lt;- mean(stu_filtered$math)\naverage_science &lt;- mean(stu_filtered$science)\naverage_reading &lt;- mean(stu_filtered$reading)\n\n# Compute absolute differences between subject mean scores and overall averages\nstu_filteredsg &lt;- stu_filtered %&gt;%\n  group_by(schoolID) %&gt;%\n  mutate(averagemath = abs(mean(math) - average_math),\n         averagescience = abs(mean(science) - average_science),\n         averagereading = abs(mean(reading) - average_reading)) %&gt;%\n  select(schoolID, averagemath, averagescience, averagereading) %&gt;%\n  unique()\n\n# Create ggplot objects for average grade differences in math, science, and reading\nBoxplot_Math &lt;- ggplot(data = stu_filteredsg, aes(y = averagemath)) +\n  geom_boxplot(width = 0.1, fill = \"#B660CD\", alpha = 0.4) +\n  stat_boxplot(geom = \"errorbar\", width = 0.05) +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\", \n               size = 2) +\n  scale_y_continuous(NULL, limits = c(0, 220)) +\n  scale_x_continuous(\"Math\", breaks = NULL) +\n  theme_minimal()\n\nBoxplot_Science &lt;- ggplot(data = stu_filteredsg, aes(y = averagescience)) +\n  geom_boxplot(width = 0.1, fill = \"#6F2DA8\", alpha = 0.4) +\n  stat_boxplot(geom = \"errorbar\", width = 0.05) +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\", \n               size = 2) +\n  scale_y_continuous(NULL, limits = c(0, 220)) +\n  scale_x_continuous(\"Science\", breaks = NULL) +\n  theme_minimal()\n\nBoxplot_Reading &lt;- ggplot(data = stu_filteredsg, aes(y = averagereading)) +\n  geom_boxplot(width = 0.1, fill = \"#E4A0F7\", alpha = 0.4) +\n  stat_boxplot(geom = \"errorbar\", width = 0.05) +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\", \n               size = 2) +\n  scale_y_continuous(NULL, limits = c(0, 220)) +\n  scale_x_continuous(\"Reading\", breaks = NULL) +\n  theme_minimal()\n\n# Combine the three plots horizontally with appropriate titles\n(Boxplot_Math + labs(title = \"Subject Scores Across School\")) | Boxplot_Science | Boxplot_Reading"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#alternative-design-2",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#alternative-design-2",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "5.2 Alternative Design",
    "text": "5.2 Alternative Design\n\n5.2.1 Sketch for Alternative Design\n\n\n\n5.2.2 Enhanced Scatterplot and Line Color Differentiation\nArranging the three graphs in a easier way to improve readability for readers. Enhancing the scatterplot and line colors distinctly will further aid readers in analyzing the data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#final-design-2",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#final-design-2",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "5.3 Final Design",
    "text": "5.3 Final Design\n\n\nShow the code\ntheme_setting &lt;- theme(\n  plot.title = element_text(size = 9),\n  plot.subtitle = element_text(size = 8),\n  plot.caption = element_text(size = 8),\n  axis.text.x = element_text(angle = 45, hjust = 1)) # Adjust for better readability\n\n\n# Adjust the alpha and size in geom_point for transparency and smaller points\np1 &lt;- ggplot(data=stu_filtered, aes(x= socio_economic, y=math, color = \"Math\")) +\n  geom_point(alpha = 0.5, size = 0.5) +\n  geom_smooth(method=lm, linewidth=0.5, color=\"black\") +  \n  coord_cartesian(xlim=c(-3,3), ylim=c(250,850)) +\n  ggtitle(\"Math vs. ESCS\") +  \n  theme_setting +\n  scale_color_manual(values = c(\"Math\" = \"#DE5D83\"))\n\np2 &lt;- ggplot(data=stu_filtered, aes(x= socio_economic, y= reading, color = \"Reading\")) +\n  geom_point(alpha = 0.5, size = 0.5) +\n  geom_smooth(method=lm, linewidth=0.5, color=\"black\") +  \n  coord_cartesian(xlim=c(-3,3), ylim=c(250,850)) +\n  ggtitle(\"Reading vs. ESCS\") +\n  theme_setting +\n  scale_color_manual(values = c(\"Reading\" = \"#3DED97\"))\n\np3 &lt;- ggplot(data=stu_filtered, aes(x= socio_economic, y= science, color = \"Science\")) +\n  geom_point(alpha = 0.5, size = 0.5) +\n  geom_smooth(method=lm, linewidth=0.5, color=\"black\") +  \n  coord_cartesian(xlim=c(-3,3), ylim=c(250,850)) +\n  ggtitle(\"Science vs. ESCS\") +\n  theme_setting +\n  scale_color_manual(values = c(\"Science\" = \"#FFE338\"))\n\n\np1 / p2 / p3"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "",
    "text": "pacman::p_load(tidyverse, patchwork, readr, dplyr,ggiraph,forecast, plotly)\n\n\n\n\n\nCPI_data = read.csv (\"data/CPISingapore.csv\")\n\nhead(CPI_data)\n\n  Year  Variable    CPI\n1 1961 All Items 24.401\n2 1962 All Items 24.513\n3 1963 All Items 25.033\n4 1964 All Items 25.448\n5 1965 All Items 25.513\n6 1966 All Items 26.028\n\n\n\n\n\n\npoint_desc &lt;- c(paste0(\n  \"Variable: \", CPI_data$Variable,\n  \"\\nYear: \",CPI_data$Year,\n  \"\\nPrice Index: \", CPI_data$CPI))\n\nline &lt;- ggplot(data = CPI_data,\n               aes(x = Year, y = CPI,\n                   group = Variable,\n                   color = Variable,\n                   data_id = Variable)) +\n  geom_line_interactive(size = 0.5) +\n  geom_point_interactive(aes(tooltip = point_desc),\n                         fill = \"grey90\",\n                         size = 1,\n                         stroke = 1,\n                         shape = 21) +\n \n  labs(y = \"Consumer Price Index \",\n       x = \"Year\",\n       title = \"Consumer Price Index (CPI), 2019 As Base Year, Annual\")\n\ngirafe(ggobj = line, \n       width_svg = 10,\n       height_svg = 5 ,\n       options = list(\n         opts_hover(css = \"stroke-width: 1; opacity: 1;\"),\n         opts_hover_inv(css = \"stroke-width: 1;opacity:0.1;\")))\n\n\n\n\n\nThe weighting pattern of the Consumer Price Index (CPI) was derived from the expenditure values collected from the 2017/18 Household Expenditure Survey (HES) and updated to 2019 values by taking into account price changes between 2017/18 and 2019.\nPrior to 2019, data pertain to taxi services only. From 2019 onwards, data pertain to taxi and private hire car services.\nAccommodation, one of the groups in the Housing & Utilities expenditure division of the CPI, comprises ‘rented and owner-occupied accommodation’, as well as ‘housing maintenance & repairs’. A significant share of the Accommodation group is ‘owner-occupied accommodation (OOA)’ cost, which is meant to reflect the costs to homeowners of utilising the flow of services provided by their homes over an extended period of time. As the cost of using housing services is not directly observed for homeowners, it is computed based on the imputed rental concept under the rental equivalence method, i.e. proxied by market rentals. Imputed rentals on OOA have no impact on the cash expenditure of owner-occupied households. For “All Items less imputed rentals on owner-occupied accommodation”, actual rentals paid on rented homes are still included in this measure.\n\n\n\nCPI_fc &lt;- filter(CPI_data, Variable == \"All Items\")\n\nCPI_fc$Year &lt;- as.numeric(CPI_fc$Year)\nCPI_fc$CPI &lt;- as.numeric(CPI_fc$CPI)\n\n\nCPI_ts &lt;- ts(CPI_fc$CPI, start = min(CPI_data$Year), end = max(CPI_data$Year), frequency = 1)\n                    \n\n\narima_model &lt;- auto.arima(CPI_ts)\n\n\nforecast_values &lt;- forecast(arima_model, h = 5)\n\n\nplot_data &lt;- data.frame(Year = c(time(CPI_ts), time(forecast_values$mean)),\n                        CPI = c(CPI_ts, forecast_values$mean),\n                        Variable = rep(c(\"Actual\", \"Forecast\"), c(length(CPI_ts), length(forecast_values$mean))))\n\n\nplot_ly(plot_data, x = ~Year, y = ~CPI, color = ~Variable, type = 'scatter', mode = 'lines') %&gt;%\n  layout(title = \"Total Expenditure Forecast\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"Expenditure\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#importing-packages",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#importing-packages",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "",
    "text": "pacman::p_load(tidyverse, patchwork, readr, dplyr,ggiraph,forecast, plotly)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#importing-datasets",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#importing-datasets",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "",
    "text": "CPI_data = read.csv (\"data/CPISingapore.csv\")\n\nhead(CPI_data)\n\n  Year  Variable    CPI\n1 1961 All Items 24.401\n2 1962 All Items 24.513\n3 1963 All Items 25.033\n4 1964 All Items 25.448\n5 1965 All Items 25.513\n6 1966 All Items 26.028"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#consumer-price-index-cpi-2019-as-base-year-annual",
    "href": "Take-home_Ex/Take-home_Ex04/Take-home_Ex04.html#consumer-price-index-cpi-2019-as-base-year-annual",
    "title": "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application",
    "section": "",
    "text": "point_desc &lt;- c(paste0(\n  \"Variable: \", CPI_data$Variable,\n  \"\\nYear: \",CPI_data$Year,\n  \"\\nPrice Index: \", CPI_data$CPI))\n\nline &lt;- ggplot(data = CPI_data,\n               aes(x = Year, y = CPI,\n                   group = Variable,\n                   color = Variable,\n                   data_id = Variable)) +\n  geom_line_interactive(size = 0.5) +\n  geom_point_interactive(aes(tooltip = point_desc),\n                         fill = \"grey90\",\n                         size = 1,\n                         stroke = 1,\n                         shape = 21) +\n \n  labs(y = \"Consumer Price Index \",\n       x = \"Year\",\n       title = \"Consumer Price Index (CPI), 2019 As Base Year, Annual\")\n\ngirafe(ggobj = line, \n       width_svg = 10,\n       height_svg = 5 ,\n       options = list(\n         opts_hover(css = \"stroke-width: 1; opacity: 1;\"),\n         opts_hover_inv(css = \"stroke-width: 1;opacity:0.1;\")))\n\n\n\n\n\nThe weighting pattern of the Consumer Price Index (CPI) was derived from the expenditure values collected from the 2017/18 Household Expenditure Survey (HES) and updated to 2019 values by taking into account price changes between 2017/18 and 2019.\nPrior to 2019, data pertain to taxi services only. From 2019 onwards, data pertain to taxi and private hire car services.\nAccommodation, one of the groups in the Housing & Utilities expenditure division of the CPI, comprises ‘rented and owner-occupied accommodation’, as well as ‘housing maintenance & repairs’. A significant share of the Accommodation group is ‘owner-occupied accommodation (OOA)’ cost, which is meant to reflect the costs to homeowners of utilising the flow of services provided by their homes over an extended period of time. As the cost of using housing services is not directly observed for homeowners, it is computed based on the imputed rental concept under the rental equivalence method, i.e. proxied by market rentals. Imputed rentals on OOA have no impact on the cash expenditure of owner-occupied households. For “All Items less imputed rentals on owner-occupied accommodation”, actual rentals paid on rented homes are still included in this measure.\n\n\n\nCPI_fc &lt;- filter(CPI_data, Variable == \"All Items\")\n\nCPI_fc$Year &lt;- as.numeric(CPI_fc$Year)\nCPI_fc$CPI &lt;- as.numeric(CPI_fc$CPI)\n\n\nCPI_ts &lt;- ts(CPI_fc$CPI, start = min(CPI_data$Year), end = max(CPI_data$Year), frequency = 1)\n                    \n\n\narima_model &lt;- auto.arima(CPI_ts)\n\n\nforecast_values &lt;- forecast(arima_model, h = 5)\n\n\nplot_data &lt;- data.frame(Year = c(time(CPI_ts), time(forecast_values$mean)),\n                        CPI = c(CPI_ts, forecast_values$mean),\n                        Variable = rep(c(\"Actual\", \"Forecast\"), c(length(CPI_ts), length(forecast_values$mean))))\n\n\nplot_ly(plot_data, x = ~Year, y = ~CPI, color = ~Variable, type = 'scatter', mode = 'lines') %&gt;%\n  layout(title = \"Total Expenditure Forecast\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"Expenditure\"))"
  },
  {
    "objectID": "WHR/WHR1521.html",
    "href": "WHR/WHR1521.html",
    "title": "WHR 2015-2021",
    "section": "",
    "text": "pacman::p_load(skimr,tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes,corrplot,GGally)\n\n\n\n\n\nWHRdata2015 = read.csv (\"data/2015.csv\")\nWHRdata2016 = read.csv (\"data/2016.csv\")\nWHRdata2017 = read.csv (\"data/2017.csv\")\nWHRdata2018 = read.csv (\"data/2018.csv\")\nWHRdata2019 = read.csv (\"data/2019.csv\")\nWHRdata2020 = read.csv (\"data/2020.csv\")\nWHRdata2021 = read.csv (\"data/2021.csv\")\n\nhead(WHRdata2019)\n\n  Overall.rank Country.or.region Score GDP.per.capita Social.support\n1            1           Finland 7.769          1.340          1.587\n2            2           Denmark 7.600          1.383          1.573\n3            3            Norway 7.554          1.488          1.582\n4            4           Iceland 7.494          1.380          1.624\n5            5       Netherlands 7.488          1.396          1.522\n6            6       Switzerland 7.480          1.452          1.526\n  Healthy.life.expectancy Freedom.to.make.life.choices Generosity\n1                   0.986                        0.596      0.153\n2                   0.996                        0.592      0.252\n3                   1.028                        0.603      0.271\n4                   1.026                        0.591      0.354\n5                   0.999                        0.557      0.322\n6                   1.052                        0.572      0.263\n  Perceptions.of.corruption\n1                     0.393\n2                     0.410\n3                     0.341\n4                     0.118\n5                     0.298\n6                     0.343\n\n\n\nWHRdata2021=plyr::rename(WHRdata2021, replace = c( \"Country.name\"=\"Country\", \n                                                   \"Rank\"=\"Happiness.Rank\" ,\n                                  \"Regional.indicator\"=\"Region\" ,\n                                  \"Ladder.score\" = \"Happiness.Score\",\n                                  \"Explained.by..Log.GDP.per.capita\"=\"Economy..GDP.per.Capita.\", \n                                  \"Explained.by..Social.support\" = \"Family\",\n                                  \"Explained.by..Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Explained.by..Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Explained.by..Perceptions.of.corruption\"=\"Trust..Government.Corruption.\", \"Explained.by..Generosity\" = \"Generosity\", \n                                  \"Dystopia...residual\"=\"Dystopia.Residual\"\n                                  \n                                  ))\ncolnames(WHRdata2021)\n\n [1] \"Country\"                        \"Region\"                        \n [3] \"Happiness.Rank\"                 \"Happiness.Score\"               \n [5] \"Standard.error.of.ladder.score\" \"upperwhisker\"                  \n [7] \"lowerwhisker\"                   \"Economy..GDP.per.Capita.\"      \n [9] \"Family\"                         \"Health..Life.Expectancy.\"      \n[11] \"Freedom\"                        \"Generosity\"                    \n[13] \"Trust..Government.Corruption.\"  \"Dystopia.Residual\"             \n\n\n\nWHRdata2020=plyr::rename(WHRdata2020, replace = c( \"Country.name\"=\"Country\", \n                                  \"Regional.indicator\"=\"Region\" ,\n                                  \"Rank\"=\"Happiness.Rank\" ,\n                                  \"Ladder.score\" = \"Happiness.Score\",\n                                  \"Explained.by..Log.GDP.per.capita\"=\"Economy..GDP.per.Capita.\", \n                                  \"Explained.by..Social.support\" = \"Family\",\n                                  \"Explained.by..Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Explained.by..Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Explained.by..Perceptions.of.corruption\"=\"Trust..Government.Corruption.\", \"Explained.by..Generosity\" = \"Generosity\", \n                                  \"Dystopia...residual\"=\"Dystopia.Residual\"\n                                  \n                                  ))\ncolnames(WHRdata2020)\n\n [1] \"Country\"                        \"Region\"                        \n [3] \"Happiness.Rank\"                 \"Happiness.Score\"               \n [5] \"Standard.error.of.ladder.score\" \"upperwhisker\"                  \n [7] \"lowerwhisker\"                   \"Economy..GDP.per.Capita.\"      \n [9] \"Family\"                         \"Health..Life.Expectancy.\"      \n[11] \"Freedom\"                        \"Generosity\"                    \n[13] \"Trust..Government.Corruption.\"  \"Dystopia.Residual\"             \n\n\n\nWHRdata2019=plyr::rename(WHRdata2019, replace = c( \"Country.or.region\"=\"Country\", \n                                  \"Overall.rank\"=\"Happiness.Rank\" ,\n                                  \"GDP.per.capita\"=\"Economy..GDP.per.Capita.\",\n                                  \"Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Perceptions.of.corruption\"=\"Trust..Government.Corruption.\",\n                                  \"Social.support\"=\"Family\",\n                                  \"Score\"=\"Happiness.Score\"))\ncolnames(WHRdata2019)\n\n[1] \"Happiness.Rank\"                \"Country\"                      \n[3] \"Happiness.Score\"               \"Economy..GDP.per.Capita.\"     \n[5] \"Family\"                        \"Health..Life.Expectancy.\"     \n[7] \"Freedom\"                       \"Generosity\"                   \n[9] \"Trust..Government.Corruption.\"\n\n\n\nWHRdata2018=plyr::rename(WHRdata2018, replace = c( \"Country.or.region\"=\"Country\", \n                                  \"Overall.rank\"=\"Happiness.Rank\" ,\n                                  \"GDP.per.capita\"=\"Economy..GDP.per.Capita.\",\n                                  \"Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Perceptions.of.corruption\"=\"Trust..Government.Corruption.\",\n                                  \"Social.support\"=\"Family\",\n                                  \"Score\"=\"Happiness.Score\"))\ncolnames(WHRdata2018)\n\n[1] \"Happiness.Rank\"                \"Country\"                      \n[3] \"Happiness.Score\"               \"Economy..GDP.per.Capita.\"     \n[5] \"Family\"                        \"Health..Life.Expectancy.\"     \n[7] \"Freedom\"                       \"Generosity\"                   \n[9] \"Trust..Government.Corruption.\"\n\n\n\nWHRdata2015=plyr::rename(WHRdata2015, replace = c( \"Happiness Rank\" = \"Happiness.Rank\", \n                                  \"Happiness Score\" = \"Happiness.Score\",\n                                  \"Economy (GDP per Capita)\" = \"Economy..GDP.per.Capita.\",\n                                  \"Health (Life Expectancy)\" = \"Health..Life.Expectancy.\",\n                                  \"Trust (Government Corruption)\" = \"Trust..Government.Corruption.\",\n                                  \"Dystopia Residual\"=\"Dystopia.Residual\"\n                                  ))\n\nThe following `from` values were not present in `x`: Happiness Rank, Happiness Score, Economy (GDP per Capita), Health (Life Expectancy), Trust (Government Corruption), Dystopia Residual\n\ncolnames(WHRdata2015)\n\n [1] \"Country\"                       \"Region\"                       \n [3] \"Happiness.Rank\"                \"Happiness.Score\"              \n [5] \"Standard.Error\"                \"Economy..GDP.per.Capita.\"     \n [7] \"Family\"                        \"Health..Life.Expectancy.\"     \n [9] \"Freedom\"                       \"Trust..Government.Corruption.\"\n[11] \"Generosity\"                    \"Dystopia.Residual\"            \n\n\n\nWHRdata2016=plyr::rename(WHRdata2016, replace = c( \"Happiness Rank\" = \"Happiness.Rank\", \n                                  \"Happiness Score\" = \"Happiness.Score\",\n                                  \"Economy (GDP per Capita)\" = \"Economy..GDP.per.Capita.\",\n                                  \"Health (Life Expectancy)\" = \"Health..Life.Expectancy.\",\n                                  \"Trust (Government Corruption)\"  = \"Trust..Government.Corruption.\",\n                                  \"Dystopia Residual\"=\"Dystopia.Residual\"\n                                  ))\n\nThe following `from` values were not present in `x`: Happiness Rank, Happiness Score, Economy (GDP per Capita), Health (Life Expectancy), Trust (Government Corruption), Dystopia Residual\n\ncolnames(WHRdata2016)\n\n [1] \"Country\"                       \"Region\"                       \n [3] \"Happiness.Rank\"                \"Happiness.Score\"              \n [5] \"Lower.Confidence.Interval\"     \"Upper.Confidence.Interval\"    \n [7] \"Economy..GDP.per.Capita.\"      \"Family\"                       \n [9] \"Health..Life.Expectancy.\"      \"Freedom\"                      \n[11] \"Trust..Government.Corruption.\" \"Generosity\"                   \n[13] \"Dystopia.Residual\"            \n\n\n\nWHRdata2015&lt;-cbind(Year=2015,WHRdata2015)\n\nWHRdata2016&lt;-cbind(Year=2016,WHRdata2016)\n\nWHRdata2017&lt;-cbind(Year=2017,WHRdata2017)\n\nWHRdata2018&lt;-cbind(Year=2018,WHRdata2018)\n\nWHRdata2019&lt;-cbind(Year=2019,WHRdata2019)\n\nWHRdata2020&lt;-cbind(Year=2020,WHRdata2020)\n\nWHRdata2021&lt;-cbind(Year=2021,WHRdata2021)\n\n\nWHRdata2018$Trust..Government.Corruption. = as.numeric(WHRdata2018$Trust..Government.Corruption.)\n\nWarning: NAs introduced by coercion\n\nstr(WHRdata2018)\n\n'data.frame':   156 obs. of  10 variables:\n $ Year                         : num  2018 2018 2018 2018 2018 ...\n $ Happiness.Rank               : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Country                      : chr  \"Finland\" \"Norway\" \"Denmark\" \"Iceland\" ...\n $ Happiness.Score              : num  7.63 7.59 7.55 7.5 7.49 ...\n $ Economy..GDP.per.Capita.     : num  1.3 1.46 1.35 1.34 1.42 ...\n $ Family                       : num  1.59 1.58 1.59 1.64 1.55 ...\n $ Health..Life.Expectancy.     : num  0.874 0.861 0.868 0.914 0.927 0.878 0.896 0.876 0.913 0.91 ...\n $ Freedom                      : num  0.681 0.686 0.683 0.677 0.66 0.638 0.653 0.669 0.659 0.647 ...\n $ Generosity                   : num  0.202 0.286 0.284 0.353 0.256 0.333 0.321 0.365 0.285 0.361 ...\n $ Trust..Government.Corruption.: num  0.393 0.34 0.408 0.138 0.357 0.295 0.291 0.389 0.383 0.302 ...\n\n\n\nWHRdata20152016&lt;-dplyr::bind_rows(WHRdata2015,WHRdata2016)\n\nWHRdata201520162017&lt;-dplyr::bind_rows(WHRdata20152016,WHRdata2017)\n\nWHRdata20182019&lt;-dplyr::bind_rows(WHRdata2018,WHRdata2019)\n\nWHRdata20202021&lt;-dplyr::bind_rows(WHRdata2020,WHRdata2021)\n\nWHRdata1&lt;-dplyr::bind_rows(WHRdata201520162017,WHRdata20182019)\n\nWHRdata&lt;-dplyr::bind_rows(WHRdata1,WHRdata20202021)\nhead(WHRdata)\n\n  Year     Country         Region Happiness.Rank Happiness.Score Standard.Error\n1 2015 Switzerland Western Europe              1           7.587        0.03411\n2 2015     Iceland Western Europe              2           7.561        0.04884\n3 2015     Denmark Western Europe              3           7.527        0.03328\n4 2015      Norway Western Europe              4           7.522        0.03880\n5 2015      Canada  North America              5           7.427        0.03553\n6 2015     Finland Western Europe              6           7.406        0.03140\n  Economy..GDP.per.Capita.  Family Health..Life.Expectancy. Freedom\n1                  1.39651 1.34951                  0.94143 0.66557\n2                  1.30232 1.40223                  0.94784 0.62877\n3                  1.32548 1.36058                  0.87464 0.64938\n4                  1.45900 1.33095                  0.88521 0.66973\n5                  1.32629 1.32261                  0.90563 0.63297\n6                  1.29025 1.31826                  0.88911 0.64169\n  Trust..Government.Corruption. Generosity Dystopia.Residual\n1                       0.41978    0.29678           2.51738\n2                       0.14145    0.43630           2.70201\n3                       0.48357    0.34139           2.49204\n4                       0.36503    0.34699           2.46531\n5                       0.32957    0.45811           2.45176\n6                       0.41372    0.23351           2.61955\n  Lower.Confidence.Interval Upper.Confidence.Interval Whisker.high Whisker.low\n1                        NA                        NA           NA          NA\n2                        NA                        NA           NA          NA\n3                        NA                        NA           NA          NA\n4                        NA                        NA           NA          NA\n5                        NA                        NA           NA          NA\n6                        NA                        NA           NA          NA\n  Standard.error.of.ladder.score upperwhisker lowerwhisker\n1                             NA           NA           NA\n2                             NA           NA           NA\n3                             NA           NA           NA\n4                             NA           NA           NA\n5                             NA           NA           NA\n6                             NA           NA           NA\n\n\n\nWHRdata$Happiness.Rank  = as.numeric(WHRdata$Happiness.Rank )\n\nstr(WHRdata)\n\n'data.frame':   1084 obs. of  20 variables:\n $ Year                          : num  2015 2015 2015 2015 2015 ...\n $ Country                       : chr  \"Switzerland\" \"Iceland\" \"Denmark\" \"Norway\" ...\n $ Region                        : chr  \"Western Europe\" \"Western Europe\" \"Western Europe\" \"Western Europe\" ...\n $ Happiness.Rank                : num  1 2 3 4 5 6 7 8 9 10 ...\n $ Happiness.Score               : num  7.59 7.56 7.53 7.52 7.43 ...\n $ Standard.Error                : num  0.0341 0.0488 0.0333 0.0388 0.0355 ...\n $ Economy..GDP.per.Capita.      : num  1.4 1.3 1.33 1.46 1.33 ...\n $ Family                        : num  1.35 1.4 1.36 1.33 1.32 ...\n $ Health..Life.Expectancy.      : num  0.941 0.948 0.875 0.885 0.906 ...\n $ Freedom                       : num  0.666 0.629 0.649 0.67 0.633 ...\n $ Trust..Government.Corruption. : num  0.42 0.141 0.484 0.365 0.33 ...\n $ Generosity                    : num  0.297 0.436 0.341 0.347 0.458 ...\n $ Dystopia.Residual             : num  2.52 2.7 2.49 2.47 2.45 ...\n $ Lower.Confidence.Interval     : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Upper.Confidence.Interval     : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Whisker.high                  : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Whisker.low                   : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Standard.error.of.ladder.score: num  NA NA NA NA NA NA NA NA NA NA ...\n $ upperwhisker                  : num  NA NA NA NA NA NA NA NA NA NA ...\n $ lowerwhisker                  : num  NA NA NA NA NA NA NA NA NA NA ...\n\n\n\ncolSums(is.na(WHRdata))\n\n                          Year                        Country \n                             0                              0 \n                        Region                 Happiness.Rank \n                           769                              0 \n               Happiness.Score                 Standard.Error \n                             0                            926 \n      Economy..GDP.per.Capita.                         Family \n                             2                              2 \n      Health..Life.Expectancy.                        Freedom \n                             2                              2 \n Trust..Government.Corruption.                     Generosity \n                             3                              2 \n             Dystopia.Residual      Lower.Confidence.Interval \n                           312                            927 \n     Upper.Confidence.Interval                   Whisker.high \n                           927                            929 \n                   Whisker.low Standard.error.of.ladder.score \n                           929                            782 \n                  upperwhisker                   lowerwhisker \n                           782                            782 \n\n\n\nWHRdata = subset(WHRdata, select = -c(Lower.Confidence.Interval,Upper.Confidence.Interval,Dystopia.Residual,Standard.Error,Whisker.high,Whisker.low, Standard.error.of.ladder.score, upperwhisker, lowerwhisker ))\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          769                             0 \n              Happiness.Score      Economy..GDP.per.Capita. \n                            0                             2 \n                       Family      Health..Life.Expectancy. \n                            2                             2 \n                      Freedom Trust..Government.Corruption. \n                            2                             3 \n                   Generosity \n                            2 \n\n\n\nWHRdata$Trust..Government.Corruption.[is.na(WHRdata$Trust..Government.Corruption.)] &lt;- median(WHRdata$Trust..Government.Corruption., na.rm = T)\n\nWHRdata$Generosity[is.na(WHRdata$Generosity)] &lt;- median(WHRdata$Generosity, na.rm = T)\n\nWHRdata$Health..Life.Expectancy.[is.na(WHRdata$Health..Life.Expectancy.)] &lt;- median(WHRdata$Health..Life.Expectancy., na.rm = T)\n\nWHRdata$Family [is.na(WHRdata$Family )] &lt;- median(WHRdata$Family , na.rm = T)\nWHRdata$Freedom [is.na(WHRdata$Freedom )] &lt;- median(WHRdata$Freedom , na.rm = T)\nWHRdata$Economy..GDP.per.Capita. [is.na(WHRdata$Economy..GDP.per.Capita. )] &lt;- median(WHRdata$Economy..GDP.per.Capita. , na.rm = T)\n\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          769                             0 \n              Happiness.Score      Economy..GDP.per.Capita. \n                            0                             0 \n                       Family      Health..Life.Expectancy. \n                            0                             0 \n                      Freedom Trust..Government.Corruption. \n                            0                             0 \n                   Generosity \n                            0 \n\n\n\naggregate(WHRdata$Country, by=list(WHRdata$Year), FUN=length)\n\n  Group.1   x\n1    2015 158\n2    2016 157\n3    2017 155\n4    2018 156\n5    2019 156\n6    2020 153\n7    2021 149\n\n\n\nCountry_2015 = subset(WHRdata, Year == 2015)$Country\nCountry_2016 = subset(WHRdata, Year == 2016)$Country\nCountry_2017 = subset(WHRdata, Year == 2017)$Country\nCountry_2018 = subset(WHRdata, Year == 2018)$Country\nCountry_2019 = subset(WHRdata, Year == 2019)$Country\nCountry_2020 = subset(WHRdata, Year == 2020)$Country\nCountry_2021 = subset(WHRdata, Year == 2021)$Country\n\n\ncommon_country =intersect(intersect(intersect(intersect(intersect(intersect(Country_2015,\nCountry_2016),Country_2017),Country_2018),Country_2019),Country_2020),Country_2021)\nlength(common_country)\n\n[1] 137\n\n\n\nWHRdata_cleaned = subset(WHRdata,Country %in% common_country)\nprint(paste(\"The amount of rows in the dataset is: \",dim(WHRdata_cleaned)[1]))\n\n[1] \"The amount of rows in the dataset is:  959\"\n\nprint(paste(\"The amount of columns in the dataset is: \",dim(WHRdata_cleaned)[2]))\n\n[1] \"The amount of columns in the dataset is:  11\"\n\n\n\ncommon_region &lt;- unique(subset(WHRdata_cleaned, Region!=\"NA\", c(Country, Region)))\n\nhead(common_country)\n\n[1] \"Switzerland\" \"Iceland\"     \"Denmark\"     \"Norway\"      \"Canada\"     \n[6] \"Finland\"    \n\n\n\nassign_region &lt;- function(x){\n  Region &lt;- common_region$Region[common_region$Country == x]\n}\n\nfor(country in common_country)\n      WHRdata_cleaned$Region[WHRdata_cleaned$Country == country] &lt;- assign_region(country)\n\n\nWHRdata_cleaned=plyr::rename(WHRdata_cleaned, replace = c( \n                                  \"Economy..GDP.per.Capita.\"=\"GDP.per.Capita\",\n                                  \"Health..Life.Expectancy.\"=\"Healthy.Life.Expectancy\",\n                                  \"Trust..Government.Corruption.\"=\"Perceptions.of.Corruption\",\n                                  \"Family\"=\"Social.Support\"))\ncolnames(WHRdata_cleaned)\n\n [1] \"Year\"                      \"Country\"                  \n [3] \"Region\"                    \"Happiness.Rank\"           \n [5] \"Happiness.Score\"           \"GDP.per.Capita\"           \n [7] \"Social.Support\"            \"Healthy.Life.Expectancy\"  \n [9] \"Freedom\"                   \"Perceptions.of.Corruption\"\n[11] \"Generosity\"               \n\n\n\nskimr::skim_without_charts(WHRdata_cleaned)\n\n\nData summary\n\n\nName\nWHRdata_cleaned\n\n\nNumber of rows\n959\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n9\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCountry\n0\n1\n4\n23\n0\n137\n0\n\n\nRegion\n0\n1\n12\n31\n0\n10\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\n\n\n\n\nYear\n0\n1\n2018.00\n2.00\n2015.00\n2016.00\n2018.00\n2020.00\n2021.00\n\n\nHappiness.Rank\n0\n1\n75.32\n44.66\n1.00\n37.00\n74.00\n114.00\n158.00\n\n\nHappiness.Score\n0\n1\n5.50\n1.12\n2.52\n4.64\n5.52\n6.32\n7.94\n\n\nGDP.per.Capita\n0\n1\n0.95\n0.40\n0.02\n0.65\n1.00\n1.27\n2.10\n\n\nSocial.Support\n0\n1\n1.09\n0.34\n0.00\n0.86\n1.13\n1.37\n1.98\n\n\nHealthy.Life.Expectancy\n0\n1\n0.64\n0.25\n0.00\n0.49\n0.66\n0.81\n1.93\n\n\nFreedom\n0\n1\n0.44\n0.15\n0.00\n0.34\n0.45\n0.56\n0.84\n\n\nPerceptions.of.Corruption\n0\n1\n0.21\n0.21\n0.00\n0.07\n0.12\n0.27\n1.00\n\n\nGenerosity\n0\n1\n0.25\n0.17\n0.00\n0.14\n0.21\n0.29\n0.99"
  },
  {
    "objectID": "WHR/WHR1521.html#importing-packages",
    "href": "WHR/WHR1521.html#importing-packages",
    "title": "WHR 2015-2021",
    "section": "",
    "text": "pacman::p_load(skimr,tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes,corrplot,GGally)"
  },
  {
    "objectID": "WHR/WHR1521.html#importing-datasets",
    "href": "WHR/WHR1521.html#importing-datasets",
    "title": "WHR 2015-2021",
    "section": "",
    "text": "WHRdata2015 = read.csv (\"data/2015.csv\")\nWHRdata2016 = read.csv (\"data/2016.csv\")\nWHRdata2017 = read.csv (\"data/2017.csv\")\nWHRdata2018 = read.csv (\"data/2018.csv\")\nWHRdata2019 = read.csv (\"data/2019.csv\")\nWHRdata2020 = read.csv (\"data/2020.csv\")\nWHRdata2021 = read.csv (\"data/2021.csv\")\n\nhead(WHRdata2019)\n\n  Overall.rank Country.or.region Score GDP.per.capita Social.support\n1            1           Finland 7.769          1.340          1.587\n2            2           Denmark 7.600          1.383          1.573\n3            3            Norway 7.554          1.488          1.582\n4            4           Iceland 7.494          1.380          1.624\n5            5       Netherlands 7.488          1.396          1.522\n6            6       Switzerland 7.480          1.452          1.526\n  Healthy.life.expectancy Freedom.to.make.life.choices Generosity\n1                   0.986                        0.596      0.153\n2                   0.996                        0.592      0.252\n3                   1.028                        0.603      0.271\n4                   1.026                        0.591      0.354\n5                   0.999                        0.557      0.322\n6                   1.052                        0.572      0.263\n  Perceptions.of.corruption\n1                     0.393\n2                     0.410\n3                     0.341\n4                     0.118\n5                     0.298\n6                     0.343\n\n\n\nWHRdata2021=plyr::rename(WHRdata2021, replace = c( \"Country.name\"=\"Country\", \n                                                   \"Rank\"=\"Happiness.Rank\" ,\n                                  \"Regional.indicator\"=\"Region\" ,\n                                  \"Ladder.score\" = \"Happiness.Score\",\n                                  \"Explained.by..Log.GDP.per.capita\"=\"Economy..GDP.per.Capita.\", \n                                  \"Explained.by..Social.support\" = \"Family\",\n                                  \"Explained.by..Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Explained.by..Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Explained.by..Perceptions.of.corruption\"=\"Trust..Government.Corruption.\", \"Explained.by..Generosity\" = \"Generosity\", \n                                  \"Dystopia...residual\"=\"Dystopia.Residual\"\n                                  \n                                  ))\ncolnames(WHRdata2021)\n\n [1] \"Country\"                        \"Region\"                        \n [3] \"Happiness.Rank\"                 \"Happiness.Score\"               \n [5] \"Standard.error.of.ladder.score\" \"upperwhisker\"                  \n [7] \"lowerwhisker\"                   \"Economy..GDP.per.Capita.\"      \n [9] \"Family\"                         \"Health..Life.Expectancy.\"      \n[11] \"Freedom\"                        \"Generosity\"                    \n[13] \"Trust..Government.Corruption.\"  \"Dystopia.Residual\"             \n\n\n\nWHRdata2020=plyr::rename(WHRdata2020, replace = c( \"Country.name\"=\"Country\", \n                                  \"Regional.indicator\"=\"Region\" ,\n                                  \"Rank\"=\"Happiness.Rank\" ,\n                                  \"Ladder.score\" = \"Happiness.Score\",\n                                  \"Explained.by..Log.GDP.per.capita\"=\"Economy..GDP.per.Capita.\", \n                                  \"Explained.by..Social.support\" = \"Family\",\n                                  \"Explained.by..Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Explained.by..Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Explained.by..Perceptions.of.corruption\"=\"Trust..Government.Corruption.\", \"Explained.by..Generosity\" = \"Generosity\", \n                                  \"Dystopia...residual\"=\"Dystopia.Residual\"\n                                  \n                                  ))\ncolnames(WHRdata2020)\n\n [1] \"Country\"                        \"Region\"                        \n [3] \"Happiness.Rank\"                 \"Happiness.Score\"               \n [5] \"Standard.error.of.ladder.score\" \"upperwhisker\"                  \n [7] \"lowerwhisker\"                   \"Economy..GDP.per.Capita.\"      \n [9] \"Family\"                         \"Health..Life.Expectancy.\"      \n[11] \"Freedom\"                        \"Generosity\"                    \n[13] \"Trust..Government.Corruption.\"  \"Dystopia.Residual\"             \n\n\n\nWHRdata2019=plyr::rename(WHRdata2019, replace = c( \"Country.or.region\"=\"Country\", \n                                  \"Overall.rank\"=\"Happiness.Rank\" ,\n                                  \"GDP.per.capita\"=\"Economy..GDP.per.Capita.\",\n                                  \"Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Perceptions.of.corruption\"=\"Trust..Government.Corruption.\",\n                                  \"Social.support\"=\"Family\",\n                                  \"Score\"=\"Happiness.Score\"))\ncolnames(WHRdata2019)\n\n[1] \"Happiness.Rank\"                \"Country\"                      \n[3] \"Happiness.Score\"               \"Economy..GDP.per.Capita.\"     \n[5] \"Family\"                        \"Health..Life.Expectancy.\"     \n[7] \"Freedom\"                       \"Generosity\"                   \n[9] \"Trust..Government.Corruption.\"\n\n\n\nWHRdata2018=plyr::rename(WHRdata2018, replace = c( \"Country.or.region\"=\"Country\", \n                                  \"Overall.rank\"=\"Happiness.Rank\" ,\n                                  \"GDP.per.capita\"=\"Economy..GDP.per.Capita.\",\n                                  \"Healthy.life.expectancy\"=\"Health..Life.Expectancy.\",\n                                  \"Freedom.to.make.life.choices\"=\"Freedom\",\n                                  \"Perceptions.of.corruption\"=\"Trust..Government.Corruption.\",\n                                  \"Social.support\"=\"Family\",\n                                  \"Score\"=\"Happiness.Score\"))\ncolnames(WHRdata2018)\n\n[1] \"Happiness.Rank\"                \"Country\"                      \n[3] \"Happiness.Score\"               \"Economy..GDP.per.Capita.\"     \n[5] \"Family\"                        \"Health..Life.Expectancy.\"     \n[7] \"Freedom\"                       \"Generosity\"                   \n[9] \"Trust..Government.Corruption.\"\n\n\n\nWHRdata2015=plyr::rename(WHRdata2015, replace = c( \"Happiness Rank\" = \"Happiness.Rank\", \n                                  \"Happiness Score\" = \"Happiness.Score\",\n                                  \"Economy (GDP per Capita)\" = \"Economy..GDP.per.Capita.\",\n                                  \"Health (Life Expectancy)\" = \"Health..Life.Expectancy.\",\n                                  \"Trust (Government Corruption)\" = \"Trust..Government.Corruption.\",\n                                  \"Dystopia Residual\"=\"Dystopia.Residual\"\n                                  ))\n\nThe following `from` values were not present in `x`: Happiness Rank, Happiness Score, Economy (GDP per Capita), Health (Life Expectancy), Trust (Government Corruption), Dystopia Residual\n\ncolnames(WHRdata2015)\n\n [1] \"Country\"                       \"Region\"                       \n [3] \"Happiness.Rank\"                \"Happiness.Score\"              \n [5] \"Standard.Error\"                \"Economy..GDP.per.Capita.\"     \n [7] \"Family\"                        \"Health..Life.Expectancy.\"     \n [9] \"Freedom\"                       \"Trust..Government.Corruption.\"\n[11] \"Generosity\"                    \"Dystopia.Residual\"            \n\n\n\nWHRdata2016=plyr::rename(WHRdata2016, replace = c( \"Happiness Rank\" = \"Happiness.Rank\", \n                                  \"Happiness Score\" = \"Happiness.Score\",\n                                  \"Economy (GDP per Capita)\" = \"Economy..GDP.per.Capita.\",\n                                  \"Health (Life Expectancy)\" = \"Health..Life.Expectancy.\",\n                                  \"Trust (Government Corruption)\"  = \"Trust..Government.Corruption.\",\n                                  \"Dystopia Residual\"=\"Dystopia.Residual\"\n                                  ))\n\nThe following `from` values were not present in `x`: Happiness Rank, Happiness Score, Economy (GDP per Capita), Health (Life Expectancy), Trust (Government Corruption), Dystopia Residual\n\ncolnames(WHRdata2016)\n\n [1] \"Country\"                       \"Region\"                       \n [3] \"Happiness.Rank\"                \"Happiness.Score\"              \n [5] \"Lower.Confidence.Interval\"     \"Upper.Confidence.Interval\"    \n [7] \"Economy..GDP.per.Capita.\"      \"Family\"                       \n [9] \"Health..Life.Expectancy.\"      \"Freedom\"                      \n[11] \"Trust..Government.Corruption.\" \"Generosity\"                   \n[13] \"Dystopia.Residual\"            \n\n\n\nWHRdata2015&lt;-cbind(Year=2015,WHRdata2015)\n\nWHRdata2016&lt;-cbind(Year=2016,WHRdata2016)\n\nWHRdata2017&lt;-cbind(Year=2017,WHRdata2017)\n\nWHRdata2018&lt;-cbind(Year=2018,WHRdata2018)\n\nWHRdata2019&lt;-cbind(Year=2019,WHRdata2019)\n\nWHRdata2020&lt;-cbind(Year=2020,WHRdata2020)\n\nWHRdata2021&lt;-cbind(Year=2021,WHRdata2021)\n\n\nWHRdata2018$Trust..Government.Corruption. = as.numeric(WHRdata2018$Trust..Government.Corruption.)\n\nWarning: NAs introduced by coercion\n\nstr(WHRdata2018)\n\n'data.frame':   156 obs. of  10 variables:\n $ Year                         : num  2018 2018 2018 2018 2018 ...\n $ Happiness.Rank               : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Country                      : chr  \"Finland\" \"Norway\" \"Denmark\" \"Iceland\" ...\n $ Happiness.Score              : num  7.63 7.59 7.55 7.5 7.49 ...\n $ Economy..GDP.per.Capita.     : num  1.3 1.46 1.35 1.34 1.42 ...\n $ Family                       : num  1.59 1.58 1.59 1.64 1.55 ...\n $ Health..Life.Expectancy.     : num  0.874 0.861 0.868 0.914 0.927 0.878 0.896 0.876 0.913 0.91 ...\n $ Freedom                      : num  0.681 0.686 0.683 0.677 0.66 0.638 0.653 0.669 0.659 0.647 ...\n $ Generosity                   : num  0.202 0.286 0.284 0.353 0.256 0.333 0.321 0.365 0.285 0.361 ...\n $ Trust..Government.Corruption.: num  0.393 0.34 0.408 0.138 0.357 0.295 0.291 0.389 0.383 0.302 ...\n\n\n\nWHRdata20152016&lt;-dplyr::bind_rows(WHRdata2015,WHRdata2016)\n\nWHRdata201520162017&lt;-dplyr::bind_rows(WHRdata20152016,WHRdata2017)\n\nWHRdata20182019&lt;-dplyr::bind_rows(WHRdata2018,WHRdata2019)\n\nWHRdata20202021&lt;-dplyr::bind_rows(WHRdata2020,WHRdata2021)\n\nWHRdata1&lt;-dplyr::bind_rows(WHRdata201520162017,WHRdata20182019)\n\nWHRdata&lt;-dplyr::bind_rows(WHRdata1,WHRdata20202021)\nhead(WHRdata)\n\n  Year     Country         Region Happiness.Rank Happiness.Score Standard.Error\n1 2015 Switzerland Western Europe              1           7.587        0.03411\n2 2015     Iceland Western Europe              2           7.561        0.04884\n3 2015     Denmark Western Europe              3           7.527        0.03328\n4 2015      Norway Western Europe              4           7.522        0.03880\n5 2015      Canada  North America              5           7.427        0.03553\n6 2015     Finland Western Europe              6           7.406        0.03140\n  Economy..GDP.per.Capita.  Family Health..Life.Expectancy. Freedom\n1                  1.39651 1.34951                  0.94143 0.66557\n2                  1.30232 1.40223                  0.94784 0.62877\n3                  1.32548 1.36058                  0.87464 0.64938\n4                  1.45900 1.33095                  0.88521 0.66973\n5                  1.32629 1.32261                  0.90563 0.63297\n6                  1.29025 1.31826                  0.88911 0.64169\n  Trust..Government.Corruption. Generosity Dystopia.Residual\n1                       0.41978    0.29678           2.51738\n2                       0.14145    0.43630           2.70201\n3                       0.48357    0.34139           2.49204\n4                       0.36503    0.34699           2.46531\n5                       0.32957    0.45811           2.45176\n6                       0.41372    0.23351           2.61955\n  Lower.Confidence.Interval Upper.Confidence.Interval Whisker.high Whisker.low\n1                        NA                        NA           NA          NA\n2                        NA                        NA           NA          NA\n3                        NA                        NA           NA          NA\n4                        NA                        NA           NA          NA\n5                        NA                        NA           NA          NA\n6                        NA                        NA           NA          NA\n  Standard.error.of.ladder.score upperwhisker lowerwhisker\n1                             NA           NA           NA\n2                             NA           NA           NA\n3                             NA           NA           NA\n4                             NA           NA           NA\n5                             NA           NA           NA\n6                             NA           NA           NA\n\n\n\nWHRdata$Happiness.Rank  = as.numeric(WHRdata$Happiness.Rank )\n\nstr(WHRdata)\n\n'data.frame':   1084 obs. of  20 variables:\n $ Year                          : num  2015 2015 2015 2015 2015 ...\n $ Country                       : chr  \"Switzerland\" \"Iceland\" \"Denmark\" \"Norway\" ...\n $ Region                        : chr  \"Western Europe\" \"Western Europe\" \"Western Europe\" \"Western Europe\" ...\n $ Happiness.Rank                : num  1 2 3 4 5 6 7 8 9 10 ...\n $ Happiness.Score               : num  7.59 7.56 7.53 7.52 7.43 ...\n $ Standard.Error                : num  0.0341 0.0488 0.0333 0.0388 0.0355 ...\n $ Economy..GDP.per.Capita.      : num  1.4 1.3 1.33 1.46 1.33 ...\n $ Family                        : num  1.35 1.4 1.36 1.33 1.32 ...\n $ Health..Life.Expectancy.      : num  0.941 0.948 0.875 0.885 0.906 ...\n $ Freedom                       : num  0.666 0.629 0.649 0.67 0.633 ...\n $ Trust..Government.Corruption. : num  0.42 0.141 0.484 0.365 0.33 ...\n $ Generosity                    : num  0.297 0.436 0.341 0.347 0.458 ...\n $ Dystopia.Residual             : num  2.52 2.7 2.49 2.47 2.45 ...\n $ Lower.Confidence.Interval     : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Upper.Confidence.Interval     : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Whisker.high                  : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Whisker.low                   : num  NA NA NA NA NA NA NA NA NA NA ...\n $ Standard.error.of.ladder.score: num  NA NA NA NA NA NA NA NA NA NA ...\n $ upperwhisker                  : num  NA NA NA NA NA NA NA NA NA NA ...\n $ lowerwhisker                  : num  NA NA NA NA NA NA NA NA NA NA ...\n\n\n\ncolSums(is.na(WHRdata))\n\n                          Year                        Country \n                             0                              0 \n                        Region                 Happiness.Rank \n                           769                              0 \n               Happiness.Score                 Standard.Error \n                             0                            926 \n      Economy..GDP.per.Capita.                         Family \n                             2                              2 \n      Health..Life.Expectancy.                        Freedom \n                             2                              2 \n Trust..Government.Corruption.                     Generosity \n                             3                              2 \n             Dystopia.Residual      Lower.Confidence.Interval \n                           312                            927 \n     Upper.Confidence.Interval                   Whisker.high \n                           927                            929 \n                   Whisker.low Standard.error.of.ladder.score \n                           929                            782 \n                  upperwhisker                   lowerwhisker \n                           782                            782 \n\n\n\nWHRdata = subset(WHRdata, select = -c(Lower.Confidence.Interval,Upper.Confidence.Interval,Dystopia.Residual,Standard.Error,Whisker.high,Whisker.low, Standard.error.of.ladder.score, upperwhisker, lowerwhisker ))\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          769                             0 \n              Happiness.Score      Economy..GDP.per.Capita. \n                            0                             2 \n                       Family      Health..Life.Expectancy. \n                            2                             2 \n                      Freedom Trust..Government.Corruption. \n                            2                             3 \n                   Generosity \n                            2 \n\n\n\nWHRdata$Trust..Government.Corruption.[is.na(WHRdata$Trust..Government.Corruption.)] &lt;- median(WHRdata$Trust..Government.Corruption., na.rm = T)\n\nWHRdata$Generosity[is.na(WHRdata$Generosity)] &lt;- median(WHRdata$Generosity, na.rm = T)\n\nWHRdata$Health..Life.Expectancy.[is.na(WHRdata$Health..Life.Expectancy.)] &lt;- median(WHRdata$Health..Life.Expectancy., na.rm = T)\n\nWHRdata$Family [is.na(WHRdata$Family )] &lt;- median(WHRdata$Family , na.rm = T)\nWHRdata$Freedom [is.na(WHRdata$Freedom )] &lt;- median(WHRdata$Freedom , na.rm = T)\nWHRdata$Economy..GDP.per.Capita. [is.na(WHRdata$Economy..GDP.per.Capita. )] &lt;- median(WHRdata$Economy..GDP.per.Capita. , na.rm = T)\n\n\ncolSums(is.na(WHRdata))\n\n                         Year                       Country \n                            0                             0 \n                       Region                Happiness.Rank \n                          769                             0 \n              Happiness.Score      Economy..GDP.per.Capita. \n                            0                             0 \n                       Family      Health..Life.Expectancy. \n                            0                             0 \n                      Freedom Trust..Government.Corruption. \n                            0                             0 \n                   Generosity \n                            0 \n\n\n\naggregate(WHRdata$Country, by=list(WHRdata$Year), FUN=length)\n\n  Group.1   x\n1    2015 158\n2    2016 157\n3    2017 155\n4    2018 156\n5    2019 156\n6    2020 153\n7    2021 149\n\n\n\nCountry_2015 = subset(WHRdata, Year == 2015)$Country\nCountry_2016 = subset(WHRdata, Year == 2016)$Country\nCountry_2017 = subset(WHRdata, Year == 2017)$Country\nCountry_2018 = subset(WHRdata, Year == 2018)$Country\nCountry_2019 = subset(WHRdata, Year == 2019)$Country\nCountry_2020 = subset(WHRdata, Year == 2020)$Country\nCountry_2021 = subset(WHRdata, Year == 2021)$Country\n\n\ncommon_country =intersect(intersect(intersect(intersect(intersect(intersect(Country_2015,\nCountry_2016),Country_2017),Country_2018),Country_2019),Country_2020),Country_2021)\nlength(common_country)\n\n[1] 137\n\n\n\nWHRdata_cleaned = subset(WHRdata,Country %in% common_country)\nprint(paste(\"The amount of rows in the dataset is: \",dim(WHRdata_cleaned)[1]))\n\n[1] \"The amount of rows in the dataset is:  959\"\n\nprint(paste(\"The amount of columns in the dataset is: \",dim(WHRdata_cleaned)[2]))\n\n[1] \"The amount of columns in the dataset is:  11\"\n\n\n\ncommon_region &lt;- unique(subset(WHRdata_cleaned, Region!=\"NA\", c(Country, Region)))\n\nhead(common_country)\n\n[1] \"Switzerland\" \"Iceland\"     \"Denmark\"     \"Norway\"      \"Canada\"     \n[6] \"Finland\"    \n\n\n\nassign_region &lt;- function(x){\n  Region &lt;- common_region$Region[common_region$Country == x]\n}\n\nfor(country in common_country)\n      WHRdata_cleaned$Region[WHRdata_cleaned$Country == country] &lt;- assign_region(country)\n\n\nWHRdata_cleaned=plyr::rename(WHRdata_cleaned, replace = c( \n                                  \"Economy..GDP.per.Capita.\"=\"GDP.per.Capita\",\n                                  \"Health..Life.Expectancy.\"=\"Healthy.Life.Expectancy\",\n                                  \"Trust..Government.Corruption.\"=\"Perceptions.of.Corruption\",\n                                  \"Family\"=\"Social.Support\"))\ncolnames(WHRdata_cleaned)\n\n [1] \"Year\"                      \"Country\"                  \n [3] \"Region\"                    \"Happiness.Rank\"           \n [5] \"Happiness.Score\"           \"GDP.per.Capita\"           \n [7] \"Social.Support\"            \"Healthy.Life.Expectancy\"  \n [9] \"Freedom\"                   \"Perceptions.of.Corruption\"\n[11] \"Generosity\"               \n\n\n\nskimr::skim_without_charts(WHRdata_cleaned)\n\n\nData summary\n\n\nName\nWHRdata_cleaned\n\n\nNumber of rows\n959\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n9\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCountry\n0\n1\n4\n23\n0\n137\n0\n\n\nRegion\n0\n1\n12\n31\n0\n10\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\n\n\n\n\nYear\n0\n1\n2018.00\n2.00\n2015.00\n2016.00\n2018.00\n2020.00\n2021.00\n\n\nHappiness.Rank\n0\n1\n75.32\n44.66\n1.00\n37.00\n74.00\n114.00\n158.00\n\n\nHappiness.Score\n0\n1\n5.50\n1.12\n2.52\n4.64\n5.52\n6.32\n7.94\n\n\nGDP.per.Capita\n0\n1\n0.95\n0.40\n0.02\n0.65\n1.00\n1.27\n2.10\n\n\nSocial.Support\n0\n1\n1.09\n0.34\n0.00\n0.86\n1.13\n1.37\n1.98\n\n\nHealthy.Life.Expectancy\n0\n1\n0.64\n0.25\n0.00\n0.49\n0.66\n0.81\n1.93\n\n\nFreedom\n0\n1\n0.44\n0.15\n0.00\n0.34\n0.45\n0.56\n0.84\n\n\nPerceptions.of.Corruption\n0\n1\n0.21\n0.21\n0.00\n0.07\n0.12\n0.27\n1.00\n\n\nGenerosity\n0\n1\n0.25\n0.17\n0.00\n0.14\n0.21\n0.29\n0.99"
  },
  {
    "objectID": "WHR/WHR1521.html#gdp",
    "href": "WHR/WHR1521.html#gdp",
    "title": "WHR 2015-2021",
    "section": "GDP",
    "text": "GDP\n\nscp1 = ggplot(WHRdata_cleaned, aes(x = GDP.per.Capita, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp1a= ggplot(WHRdata_cleaned, aes(x = GDP.per.Capita, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp1\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp1a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR1521.html#social-support",
    "href": "WHR/WHR1521.html#social-support",
    "title": "WHR 2015-2021",
    "section": "Social Support",
    "text": "Social Support\n\nscp2 = ggplot(WHRdata_cleaned, aes(x = Social.Support, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp2a = ggplot(WHRdata_cleaned, aes(x = Social.Support, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp2\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp2a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR1521.html#life-expectancy",
    "href": "WHR/WHR1521.html#life-expectancy",
    "title": "WHR 2015-2021",
    "section": "Life Expectancy",
    "text": "Life Expectancy\n\nscp3 = ggplot(WHRdata_cleaned, aes(x = Healthy.Life.Expectancy, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp3a = ggplot(WHRdata_cleaned, aes(x = Healthy.Life.Expectancy, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp3a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR1521.html#freedom",
    "href": "WHR/WHR1521.html#freedom",
    "title": "WHR 2015-2021",
    "section": "Freedom",
    "text": "Freedom\n\nscp4 = ggplot(WHRdata_cleaned, aes(x =Freedom, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp4a = ggplot(WHRdata_cleaned, aes(x =Freedom, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp4\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp4a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR1521.html#corruption",
    "href": "WHR/WHR1521.html#corruption",
    "title": "WHR 2015-2021",
    "section": "Corruption",
    "text": "Corruption\n\nscp5 = ggplot(WHRdata_cleaned, aes(x = Perceptions.of.Corruption, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp5a = ggplot(WHRdata_cleaned, aes(x = Perceptions.of.Corruption, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp5\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp5a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHR1521.html#generosity",
    "href": "WHR/WHR1521.html#generosity",
    "title": "WHR 2015-2021",
    "section": "Generosity",
    "text": "Generosity\n\nscp6 = ggplot(WHRdata_cleaned, aes(x = Generosity, y = Happiness.Score)) + \n  geom_point(size = .5, alpha = 0.8) +  \n  geom_smooth(method = \"lm\", fullrange = TRUE) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp6a = ggplot(WHRdata_cleaned, aes(x = Generosity, y = Happiness.Score)) + \n  geom_point(aes(color=Region), size = .5, alpha = 0.8) +  \n  geom_smooth(aes(color = Region, fill = Region), \n              method = \"lm\", fullrange = TRUE) +\n  facet_wrap(~Region) +\n  theme_bw() + labs(title = \"Scatter plot with regression line\")\n\nscp6\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nscp6a\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "WHR/WHRall.html",
    "href": "WHR/WHRall.html",
    "title": "WHR2010-2019",
    "section": "",
    "text": "pacman::p_load(skimr,tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes,corrplot,GGally)"
  },
  {
    "objectID": "WHR/WHRall.html#importing-packages",
    "href": "WHR/WHRall.html#importing-packages",
    "title": "WHR2010-2019",
    "section": "",
    "text": "pacman::p_load(skimr,tidyverse, patchwork, readr, dplyr, plotly, ggridges, ggiraph, ggthemes,corrplot,GGally)"
  },
  {
    "objectID": "WHR/WHRall.html#importing-data",
    "href": "WHR/WHRall.html#importing-data",
    "title": "WHR2010-2019",
    "section": "Importing Data",
    "text": "Importing Data\n\nWHRdata = read.csv (\"data/WHRdataAllYear.csv\")\nCountryRegion = read.csv(\"data/continents2.csv\")\nhead(WHRdata)\n\n  Country.name year Life.Ladder Log.GDP.per.capita Social.support\n1  Afghanistan 2008       3.724              7.350          0.451\n2  Afghanistan 2009       4.402              7.509          0.552\n3  Afghanistan 2010       4.758              7.614          0.539\n4  Afghanistan 2011       3.832              7.581          0.521\n5  Afghanistan 2012       3.783              7.661          0.521\n6  Afghanistan 2013       3.572              7.680          0.484\n  Healthy.life.expectancy.at.birth Freedom.to.make.life.choices Generosity\n1                             50.5                        0.718      0.168\n2                             50.8                        0.679      0.191\n3                             51.1                        0.600      0.121\n4                             51.4                        0.496      0.164\n5                             51.7                        0.531      0.238\n6                             52.0                        0.578      0.063\n  Perceptions.of.corruption Positive.affect Negative.affect\n1                     0.882           0.414           0.258\n2                     0.850           0.481           0.237\n3                     0.707           0.517           0.275\n4                     0.731           0.480           0.267\n5                     0.776           0.614           0.268\n6                     0.823           0.547           0.273\n\n\n\nWHRdata=plyr::rename(WHRdata, replace = c( \n  \"Country.name\" = \"Country\",\n  \"year\"=\"Year\",\n  \"Life.Ladder\"=\"Happiness.Score\",\n  \"Log.GDP.per.capita\"=\"Log.GDP.per.Capita\",\n  \"Social.support\"=\"Social.Support\",\n  \"Healthy.life.expectancy.at.birth\"=\"Healthy.Life.Expectancy\",\n  \"Freedom.to.make.life.choices\"=\"Freedom\",\n  \"Generosity\",\n  \"Perceptions.of.corruption\" = \"Perceptions.of.Corruption\",\n  \"Positive.affect\" = \"Positive.Affect\",\n  \"Negative.affect\" = \"Negative.Affect\" ))\n\nThe following `from` values were not present in `x`: \n\ncolnames(WHRdata)\n\n [1] \"Country\"                   \"Year\"                     \n [3] \"Happiness.Score\"           \"Log.GDP.per.Capita\"       \n [5] \"Social.Support\"            \"Healthy.Life.Expectancy\"  \n [7] \"Freedom\"                   \"Generosity\"               \n [9] \"Perceptions.of.Corruption\" \"Positive.Affect\"          \n[11] \"Negative.Affect\"          \n\n\n\nCountryRegion=plyr::rename(CountryRegion, replace = c( \n \"name\" = \"Country\",\n \"region\"=\"Region\",\n \"sub-region\" = \"Sub.Region\"))\n\nThe following `from` values were not present in `x`: sub-region\n\nCountryRegion = subset(CountryRegion, select = c(Country,Region,sub.region))\n\ncolnames(CountryRegion)\n\n[1] \"Country\"    \"Region\"     \"sub.region\"\n\n\n\n#WHRdata1 &lt;- merge(WHRdata, CountryRegion, by = \"Country\", all.x = TRUE)\n\n# Display the first few rows of the merged dataset to verify\n#WHRdata1\n\n\nstr(WHRdata)\n\n'data.frame':   2200 obs. of  11 variables:\n $ Country                  : chr  \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ Year                     : int  2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 ...\n $ Happiness.Score          : num  3.72 4.4 4.76 3.83 3.78 ...\n $ Log.GDP.per.Capita       : num  7.35 7.51 7.61 7.58 7.66 ...\n $ Social.Support           : num  0.451 0.552 0.539 0.521 0.521 0.484 0.526 0.529 0.559 0.491 ...\n $ Healthy.Life.Expectancy  : num  50.5 50.8 51.1 51.4 51.7 ...\n $ Freedom                  : num  0.718 0.679 0.6 0.496 0.531 0.578 0.509 0.389 0.523 0.427 ...\n $ Generosity               : num  0.168 0.191 0.121 0.164 0.238 0.063 0.106 0.082 0.044 -0.119 ...\n $ Perceptions.of.Corruption: num  0.882 0.85 0.707 0.731 0.776 0.823 0.871 0.881 0.793 0.954 ...\n $ Positive.Affect          : num  0.414 0.481 0.517 0.48 0.614 0.547 0.492 0.491 0.501 0.435 ...\n $ Negative.Affect          : num  0.258 0.237 0.275 0.267 0.268 0.273 0.375 0.339 0.348 0.371 ...\n\n\n\ncolSums(is.na(WHRdata))\n\n                  Country                      Year           Happiness.Score \n                        0                         0                         0 \n       Log.GDP.per.Capita            Social.Support   Healthy.Life.Expectancy \n                       20                        13                        54 \n                  Freedom                Generosity Perceptions.of.Corruption \n                       33                        73                       116 \n          Positive.Affect           Negative.Affect \n                       24                        16 \n\n\n\nWHRdata$Log.GDP.per.Capita &lt;- ave(WHRdata$Log.GDP.per.Capita, WHRdata$Country, FUN = function(x) {\n  ifelse(is.na(x), median(x, na.rm = TRUE), x)\n})\n\nWHRdata$Social.Support &lt;- ave(WHRdata$Social.Support, WHRdata$Country, FUN = function(x) {\n  ifelse(is.na(x), median(x, na.rm = TRUE), x)\n})\n\nWHRdata$Healthy.Life.Expectancy &lt;- ave(WHRdata$Healthy.Life.Expectancy, WHRdata$Country, FUN = function(x) {\n  ifelse(is.na(x), median(x, na.rm = TRUE), x)\n})\n\nWHRdata$Freedom &lt;- ave(WHRdata$Freedom, WHRdata$Country, FUN = function(x) {\n  ifelse(is.na(x), median(x, na.rm = TRUE), x)\n})\n\nWHRdata$Generosity &lt;- ave(WHRdata$Generosity, WHRdata$Country, FUN = function(x) {\n  ifelse(is.na(x), median(x, na.rm = TRUE), x)\n})\n\nWHRdata$Perceptions.of.Corruption &lt;- ave(WHRdata$Perceptions.of.Corruption, WHRdata$Country, FUN = function(x) {\n  ifelse(is.na(x), median(x, na.rm = TRUE), x)\n})\n\nWHRdata$Positive.Affect &lt;- ave(WHRdata$Positive.Affect, WHRdata$Country, FUN = function(x) {\n  ifelse(is.na(x), median(x, na.rm = TRUE), x)\n})\n\nWHRdata$Negative.Affect &lt;- ave(WHRdata$Negative.Affect, WHRdata$Country, FUN = function(x) {\n  ifelse(is.na(x), median(x, na.rm = TRUE), x)\n})\n\ncolSums(is.na(WHRdata))\n\n                  Country                      Year           Happiness.Score \n                        0                         0                         0 \n       Log.GDP.per.Capita            Social.Support   Healthy.Life.Expectancy \n                        9                         1                        32 \n                  Freedom                Generosity Perceptions.of.Corruption \n                        0                         9                        29 \n          Positive.Affect           Negative.Affect \n                        2                         1 \n\n\n\nrows_with_missing &lt;- which(rowSums(is.na(WHRdata)) &gt; 0)\n\n# Show the rows containing missing values\nWHRdata[rows_with_missing, ]\n\n                       Country Year Happiness.Score Log.GDP.per.Capita\n382                      China 2006           4.560              8.696\n383                      China 2007           4.863              8.824\n384                      China 2008           4.846              8.911\n385                      China 2009           4.454              8.996\n386                      China 2010           4.653              9.092\n387                      China 2011           5.037              9.178\n388                      China 2012           5.095              9.247\n389                      China 2013           5.241              9.315\n390                      China 2014           5.196              9.380\n391                      China 2015           5.304              9.442\n392                      China 2016           5.325              9.503\n393                      China 2017           5.099              9.564\n394                      China 2018           5.131              9.625\n395                      China 2019           5.144              9.679\n396                      China 2020           5.771              9.699\n397                      China 2021           5.863              9.776\n476                       Cuba 2006           5.418                 NA\n794  Hong Kong S.A.R. of China 2006           5.511             10.746\n795  Hong Kong S.A.R. of China 2008           5.137             10.816\n796  Hong Kong S.A.R. of China 2009           5.397             10.788\n797  Hong Kong S.A.R. of China 2010           5.643             10.847\n798  Hong Kong S.A.R. of China 2011           5.474             10.887\n799  Hong Kong S.A.R. of China 2012           5.484             10.893\n800  Hong Kong S.A.R. of China 2014           5.458             10.939\n801  Hong Kong S.A.R. of China 2016           5.498             10.970\n802  Hong Kong S.A.R. of China 2017           5.362             10.999\n803  Hong Kong S.A.R. of China 2019           5.659             10.995\n804  Hong Kong S.A.R. of China 2020           5.295             10.931\n805  Hong Kong S.A.R. of China 2021           5.322             11.002\n1032                    Kosovo 2007           5.104              9.153\n1033                    Kosovo 2008           5.522              8.858\n1034                    Kosovo 2009           5.891              8.899\n1035                    Kosovo 2010           5.177              8.940\n1036                    Kosovo 2011           4.860              8.992\n1037                    Kosovo 2012           5.640              9.000\n1038                    Kosovo 2013           6.126              9.046\n1039                    Kosovo 2014           5.000              9.082\n1040                    Kosovo 2015           5.077              9.153\n1041                    Kosovo 2016           5.759              9.213\n1042                    Kosovo 2017           6.149              9.253\n1043                    Kosovo 2018           6.392              9.283\n1044                    Kosovo 2019           6.425              9.334\n1045                    Kosovo 2020           6.294              9.279\n1046                    Kosovo 2021           6.648              9.383\n1047                    Kosovo 2022           6.160              9.416\n1208                  Maldives 2018           5.198              9.893\n1486                      Oman 2011           6.853             10.539\n1757         Somaliland region 2009           4.991                 NA\n1758         Somaliland region 2010           4.657                 NA\n1759         Somaliland region 2011           4.931                 NA\n1760         Somaliland region 2012           5.057                 NA\n1794               South Sudan 2014           3.832                 NA\n1795               South Sudan 2015           4.071                 NA\n1796               South Sudan 2016           2.888                 NA\n1797               South Sudan 2017           2.817                 NA\n1998              Turkmenistan 2009           6.568              8.955\n1999              Turkmenistan 2011           5.792              9.146\n2000              Turkmenistan 2012           5.464              9.233\n2001              Turkmenistan 2013           5.392              9.312\n2002              Turkmenistan 2014           5.787              9.392\n2003              Turkmenistan 2015           5.791              9.437\n2004              Turkmenistan 2016           5.887              9.479\n2005              Turkmenistan 2017           5.229              9.525\n2006              Turkmenistan 2018           4.621              9.569\n2007              Turkmenistan 2019           5.474              9.615\n     Social.Support Healthy.Life.Expectancy Freedom Generosity\n382           0.747                  65.660  0.8530     -0.176\n383           0.811                  65.920  0.8530     -0.179\n384           0.748                  66.180  0.8530     -0.095\n385           0.798                  66.440  0.7710     -0.163\n386           0.768                  66.700  0.8050     -0.136\n387           0.787                  66.960  0.8240     -0.189\n388           0.788                  67.220  0.8080     -0.187\n389           0.778                  67.480  0.8050     -0.161\n390           0.820                  67.740  0.8530     -0.219\n391           0.794                  68.000  0.8530     -0.247\n392           0.742                  68.125  0.8530     -0.230\n393           0.772                  68.250  0.8780     -0.178\n394           0.788                  68.375  0.8950     -0.161\n395           0.822                  68.500  0.9270     -0.176\n396           0.808                  68.625  0.8910     -0.106\n397           0.856                  68.750  0.8750      0.022\n476           0.970                  68.000  0.2810         NA\n794           0.812                      NA  0.9100      0.151\n795           0.840                      NA  0.9220      0.292\n796           0.835                      NA  0.9180      0.303\n797           0.857                      NA  0.8900      0.328\n798           0.846                      NA  0.8940      0.230\n799           0.826                      NA  0.8800      0.218\n800           0.834                      NA  0.8430      0.219\n801           0.832                      NA  0.8000      0.096\n802           0.831                      NA  0.8310      0.136\n803           0.856                      NA  0.7270      0.063\n804           0.813                      NA  0.7050     -0.074\n805           0.821                      NA  0.6690      0.022\n1032          0.848                      NA  0.3810      0.174\n1033          0.884                      NA  0.6360      0.097\n1034          0.830                      NA  0.5060      0.206\n1035          0.708                      NA  0.4510      0.174\n1036          0.759                      NA  0.5890      0.006\n1037          0.757                      NA  0.6360      0.030\n1038          0.721                      NA  0.5680      0.117\n1039          0.706                      NA  0.4410      0.013\n1040          0.805                      NA  0.5610      0.180\n1041          0.824                      NA  0.8270      0.123\n1042          0.792                      NA  0.8580      0.115\n1043          0.822                      NA  0.8900      0.267\n1044          0.843                      NA  0.8410      0.244\n1045          0.792                      NA  0.8800      0.304\n1046          0.849                      NA  0.8400      0.261\n1047          0.888                      NA  0.8650      0.211\n1208          0.913                  69.775  0.8550      0.016\n1486             NA                  62.340  0.9160      0.010\n1757          0.880                      NA  0.7460         NA\n1758          0.829                      NA  0.8200         NA\n1759          0.788                      NA  0.8580         NA\n1760          0.786                      NA  0.7580         NA\n1794          0.545                  52.880  0.5670         NA\n1795          0.585                  53.000  0.5120         NA\n1796          0.532                  53.175  0.4400         NA\n1797          0.557                  53.350  0.4560         NA\n1998          0.924                  59.780  0.7675     -0.102\n1999          0.964                  60.420  0.7675      0.018\n2000          0.946                  60.740  0.7860     -0.123\n2001          0.846                  61.060  0.7050     -0.072\n2002          0.909                  61.380  0.8050      0.031\n2003          0.960                  61.700  0.7010      0.092\n2004          0.929                  61.800  0.7490      0.004\n2005          0.908                  61.900  0.7200      0.065\n2006          0.984                  62.000  0.8580      0.259\n2007          0.982                  62.100  0.8920      0.284\n     Perceptions.of.Corruption Positive.Affect Negative.Affect\n382                         NA           0.658           0.170\n383                         NA           0.664           0.159\n384                         NA           0.705           0.147\n385                         NA           0.670           0.162\n386                         NA           0.658           0.158\n387                         NA           0.710           0.134\n388                         NA           0.689           0.159\n389                         NA           0.717           0.142\n390                         NA           0.710           0.112\n391                         NA           0.667           0.171\n392                         NA           0.683           0.146\n393                         NA           0.682           0.214\n394                         NA           0.722           0.190\n395                         NA           0.760           0.147\n396                         NA           0.663           0.245\n397                         NA           0.698           0.240\n476                         NA           0.596           0.277\n794                      0.356           0.591           0.236\n795                      0.274           0.575           0.237\n796                      0.272           0.606           0.210\n797                      0.256           0.601           0.183\n798                      0.245           0.582           0.196\n799                      0.380           0.580           0.183\n800                      0.423           0.602           0.243\n801                      0.403           0.569           0.213\n802                      0.416           0.536           0.201\n803                      0.432           0.519           0.358\n804                      0.380           0.522           0.210\n805                      0.390           0.534           0.224\n1032                     0.894           0.614           0.237\n1033                     0.849           0.500           0.318\n1034                     0.968           0.528           0.169\n1035                     0.967           0.673           0.118\n1036                     0.919           0.604           0.124\n1037                     0.950           0.562           0.100\n1038                     0.935           0.650           0.203\n1039                     0.775           0.552           0.206\n1040                     0.851           0.685           0.180\n1041                     0.941           0.588           0.150\n1042                     0.925           0.617           0.186\n1043                     0.922           0.642           0.170\n1044                     0.920           0.612           0.141\n1045                     0.910           0.593           0.201\n1046                     0.842           0.578           0.116\n1047                     0.846           0.549           0.142\n1208                        NA              NA              NA\n1486                        NA              NA           0.295\n1757                     0.513           0.708           0.112\n1758                     0.471           0.632           0.083\n1759                     0.357           0.691           0.122\n1760                     0.334           0.687           0.152\n1794                     0.742           0.578           0.428\n1795                     0.710           0.553           0.450\n1796                     0.785           0.594           0.549\n1797                     0.761           0.565           0.517\n1998                        NA           0.695           0.152\n1999                        NA           0.577           0.122\n2000                        NA           0.541           0.117\n2001                        NA           0.552           0.160\n2002                        NA           0.614           0.154\n2003                        NA           0.633           0.301\n2004                        NA           0.560           0.255\n2005                        NA           0.488           0.350\n2006                        NA           0.567           0.189\n2007                        NA           0.494           0.183\n\n\n\nWHRdata_clean &lt;- na.omit(WHRdata)\n\ncolSums(is.na(WHRdata_clean))\n\n                  Country                      Year           Happiness.Score \n                        0                         0                         0 \n       Log.GDP.per.Capita            Social.Support   Healthy.Life.Expectancy \n                        0                         0                         0 \n                  Freedom                Generosity Perceptions.of.Corruption \n                        0                         0                         0 \n          Positive.Affect           Negative.Affect \n                        0                         0 \n\n\n\naggregate(WHRdata_clean$Country, by=list(WHRdata_clean$Year), FUN=length)\n\n   Group.1   x\n1     2005  27\n2     2006  86\n3     2007 100\n4     2008 107\n5     2009 109\n6     2010 120\n7     2011 140\n8     2012 137\n9     2013 133\n10    2014 139\n11    2015 138\n12    2016 136\n13    2017 142\n14    2018 137\n15    2019 139\n16    2020 113\n17    2021 119\n18    2022 113\n\n\n\nCountry_2010 = subset(WHRdata_clean, Year == 2010)$Country\nCountry_2011 = subset(WHRdata_clean, Year == 2011)$Country\nCountry_2012 = subset(WHRdata_clean, Year == 2012)$Country\nCountry_2013 = subset(WHRdata_clean, Year == 2013)$Country\nCountry_2014 = subset(WHRdata_clean, Year == 2014)$Country\nCountry_2015 = subset(WHRdata_clean, Year == 2015)$Country\nCountry_2016 = subset(WHRdata_clean, Year == 2016)$Country\nCountry_2017 = subset(WHRdata_clean, Year == 2017)$Country\nCountry_2018 = subset(WHRdata_clean, Year == 2018)$Country\nCountry_2019 = subset(WHRdata_clean, Year == 2019)$Country\n\n\ncommon_country =intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(intersect(Country_2010,\nCountry_2011),Country_2012),Country_2013),Country_2014),Country_2015),Country_2016),Country_2017),Country_2018),Country_2019)\nlength(common_country)\n\n[1] 101\n\n\n\nWHRdata_cleaned = subset(WHRdata_clean,Country %in% common_country)\nprint(paste(\"The amount of rows in the dataset is: \",dim(WHRdata_cleaned)[1]))\n\n[1] \"The amount of rows in the dataset is:  1614\"\n\nprint(paste(\"The amount of columns in the dataset is: \",dim(WHRdata_cleaned)[2]))\n\n[1] \"The amount of columns in the dataset is:  11\"\n\n\n\nWHRdata_cleaned &lt;- merge(WHRdata_cleaned, CountryRegion, by = \"Country\", all.x = TRUE)\n\nWHRdata_cleaned\n\n                      Country Year Happiness.Score Log.GDP.per.Capita\n1                 Afghanistan 2008           3.724             7.3500\n2                 Afghanistan 2009           4.402             7.5090\n3                 Afghanistan 2010           4.758             7.6140\n4                 Afghanistan 2011           3.832             7.5810\n5                 Afghanistan 2012           3.783             7.6610\n6                 Afghanistan 2013           3.572             7.6800\n7                 Afghanistan 2014           3.131             7.6710\n8                 Afghanistan 2015           3.983             7.6540\n9                 Afghanistan 2016           4.220             7.6500\n10                Afghanistan 2017           2.662             7.6480\n11                Afghanistan 2018           2.694             7.6310\n12                Afghanistan 2019           2.375             7.6400\n13                Afghanistan 2021           2.436             7.3240\n14                Afghanistan 2022           1.281             7.6400\n15                    Albania 2007           4.634             9.1220\n16                    Albania 2009           5.485             9.2410\n17                    Albania 2010           5.269             9.2830\n18                    Albania 2011           5.867             9.3110\n19                    Albania 2012           5.510             9.3260\n20                    Albania 2013           4.551             9.3380\n21                    Albania 2014           4.814             9.3580\n22                    Albania 2015           4.607             9.3830\n23                    Albania 2016           4.511             9.4170\n24                    Albania 2017           4.640             9.4550\n25                    Albania 2018           5.004             9.4970\n26                    Albania 2019           4.995             9.5220\n27                    Albania 2020           5.365             9.4920\n28                    Albania 2021           5.255             9.5830\n29                    Albania 2022           5.212             9.6260\n30                  Argentina 2006           6.313             9.9370\n31                  Argentina 2007           6.073            10.0130\n32                  Argentina 2008           5.961            10.0430\n33                  Argentina 2009           6.424             9.9720\n34                  Argentina 2010           6.441            10.0660\n35                  Argentina 2011           6.776            10.1120\n36                  Argentina 2012           6.468            10.0910\n37                  Argentina 2013           6.582            10.1030\n38                  Argentina 2014           6.671            10.0670\n39                  Argentina 2015           6.697            10.0830\n40                  Argentina 2016           6.427            10.0510\n41                  Argentina 2017           6.039            10.0690\n42                  Argentina 2018           5.793            10.0320\n43                  Argentina 2019           6.086            10.0020\n44                  Argentina 2020           5.901             9.8880\n45                  Argentina 2021           5.908             9.9770\n46                  Argentina 2022           6.261            10.0110\n47                    Armenia 2006           4.289             9.0210\n48                    Armenia 2007           4.882             9.1570\n49                    Armenia 2008           4.652             9.2300\n50                    Armenia 2009           4.178             9.0850\n51                    Armenia 2010           4.368             9.1130\n52                    Armenia 2011           4.260             9.1640\n53                    Armenia 2012           4.320             9.2390\n54                    Armenia 2013           4.277             9.2760\n55                    Armenia 2014           4.453             9.3150\n56                    Armenia 2015           4.348             9.3510\n57                    Armenia 2016           4.325             9.3570\n58                    Armenia 2017           4.288             9.4340\n59                    Armenia 2018           5.062             9.4900\n60                    Armenia 2019           5.488             9.5690\n61                    Armenia 2021           5.301             9.5610\n62                    Armenia 2022           5.382             9.6680\n63                  Australia 2005           7.341            10.6620\n64                  Australia 2007           7.285            10.6940\n65                  Australia 2008           7.254            10.7090\n66                  Australia 2010           7.450            10.7140\n67                  Australia 2011           7.406            10.7230\n68                  Australia 2012           7.196            10.7440\n69                  Australia 2013           7.364            10.7520\n70                  Australia 2014           7.289            10.7630\n71                  Australia 2015           7.309            10.7700\n72                  Australia 2016           7.250            10.7810\n73                  Australia 2017           7.257            10.7870\n74                  Australia 2018           7.177            10.8010\n75                  Australia 2019           7.234            10.8070\n76                  Australia 2020           7.137            10.7940\n77                  Australia 2021           7.112            10.8150\n78                  Australia 2022           7.035            10.8540\n79                    Austria 2006           7.122            10.8360\n80                    Austria 2008           7.181            10.8810\n81                    Austria 2010           7.303            10.8560\n82                    Austria 2011           7.471            10.8810\n83                    Austria 2012           7.401            10.8840\n84                    Austria 2013           7.499            10.8780\n85                    Austria 2014           6.950            10.8770\n86                    Austria 2015           7.076            10.8760\n87                    Austria 2016           7.048            10.8850\n88                    Austria 2017           7.294            10.9000\n89                    Austria 2018           7.396            10.9190\n90                    Austria 2019           7.195            10.9300\n91                    Austria 2020           7.213            10.8590\n92                    Austria 2021           7.080            10.8990\n93                    Austria 2022           6.999            10.9390\n94                 Azerbaijan 2006           4.728             9.1540\n95                 Azerbaijan 2007           4.568             9.3660\n96                 Azerbaijan 2008           4.817             9.4470\n97                 Azerbaijan 2009           4.574             9.5150\n98                 Azerbaijan 2010           4.219             9.5530\n99                 Azerbaijan 2011           4.680             9.5410\n100                Azerbaijan 2012           4.911             9.5490\n101                Azerbaijan 2013           5.481             9.5920\n102                Azerbaijan 2014           5.252             9.6070\n103                Azerbaijan 2015           5.147             9.6060\n104                Azerbaijan 2016           5.304             9.5630\n105                Azerbaijan 2017           5.152             9.5550\n106                Azerbaijan 2018           5.168             9.5620\n107                Azerbaijan 2019           5.173             9.5780\n108                Bangladesh 2006           4.319             7.9400\n109                Bangladesh 2007           4.607             7.9970\n110                Bangladesh 2008           5.052             8.0470\n111                Bangladesh 2009           5.083             8.0870\n112                Bangladesh 2010           4.858             8.1300\n113                Bangladesh 2011           4.986             8.1810\n114                Bangladesh 2012           4.724             8.2310\n115                Bangladesh 2013           4.660             8.2770\n116                Bangladesh 2014           4.636             8.3230\n117                Bangladesh 2015           4.633             8.3750\n118                Bangladesh 2016           4.556             8.4310\n119                Bangladesh 2017           4.310             8.4830\n120                Bangladesh 2018           4.499             8.5420\n121                Bangladesh 2019           5.114             8.6070\n122                Bangladesh 2020           5.280             8.6290\n123                Bangladesh 2021           4.123             8.6850\n124                Bangladesh 2022           3.408             8.7430\n125                   Belarus 2006           5.658             9.4890\n126                   Belarus 2007           5.617             9.5760\n127                   Belarus 2008           5.463             9.6770\n128                   Belarus 2009           5.564             9.6810\n129                   Belarus 2010           5.526             9.7590\n130                   Belarus 2011           5.225             9.8130\n131                   Belarus 2012           5.749             9.8320\n132                   Belarus 2013           5.876             9.8420\n133                   Belarus 2014           5.812             9.8580\n134                   Belarus 2015           5.719             9.8180\n135                   Belarus 2016           5.178             9.7920\n136                   Belarus 2017           5.553             9.8180\n137                   Belarus 2018           5.234             9.8510\n138                   Belarus 2019           5.821             9.8670\n139                   Belgium 2005           7.262            10.7440\n140                   Belgium 2007           7.219            10.7910\n141                   Belgium 2008           7.117            10.7880\n142                   Belgium 2010           6.854            10.7780\n143                   Belgium 2011           7.111            10.7820\n144                   Belgium 2012           6.935            10.7830\n145                   Belgium 2013           7.104            10.7830\n146                   Belgium 2014           6.855            10.7940\n147                   Belgium 2015           6.904            10.8090\n148                   Belgium 2016           6.949            10.8160\n149                   Belgium 2017           6.928            10.8290\n150                   Belgium 2018           6.892            10.8420\n151                   Belgium 2019           6.772            10.8590\n152                   Belgium 2020           6.839            10.7990\n153                   Belgium 2021           6.882            10.8540\n154                   Belgium 2022           6.857            10.8780\n155                   Bolivia 2006           5.374             8.6710\n156                   Bolivia 2007           5.628             8.6980\n157                   Bolivia 2008           5.298             8.7400\n158                   Bolivia 2009           6.086             8.7560\n159                   Bolivia 2010           5.781             8.7800\n160                   Bolivia 2011           5.779             8.8130\n161                   Bolivia 2012           6.019             8.8470\n162                   Bolivia 2013           5.767             8.8960\n163                   Bolivia 2014           5.865             8.9330\n164                   Bolivia 2015           5.834             8.9650\n165                   Bolivia 2016           5.770             8.9910\n166                   Bolivia 2017           5.651             9.0170\n167                   Bolivia 2018           5.916             9.0440\n168                   Bolivia 2019           5.674             9.0510\n169                   Bolivia 2020           5.559             8.9460\n170                   Bolivia 2021           5.569             8.9940\n171                   Bolivia 2022           5.929             9.0140\n172    Bosnia and Herzegovina 2007           4.900             9.1910\n173    Bosnia and Herzegovina 2009           4.963             9.2460\n174    Bosnia and Herzegovina 2010           4.669             9.2720\n175    Bosnia and Herzegovina 2011           4.995             9.3000\n176    Bosnia and Herzegovina 2012           4.773             9.3100\n177    Bosnia and Herzegovina 2013           5.124             9.3490\n178    Bosnia and Herzegovina 2014           5.249             9.3730\n179    Bosnia and Herzegovina 2015           5.117             9.4170\n180    Bosnia and Herzegovina 2016           5.181             9.4600\n181    Bosnia and Herzegovina 2017           5.090             9.5030\n182    Bosnia and Herzegovina 2018           5.887             9.5520\n183    Bosnia and Herzegovina 2019           6.016             9.5910\n184    Bosnia and Herzegovina 2020           5.516             9.5720\n185    Bosnia and Herzegovina 2021           5.749             9.6590\n186                  Botswana 2006           4.739             9.4950\n187                  Botswana 2008           5.451             9.5430\n188                  Botswana 2010           3.553             9.4460\n189                  Botswana 2011           3.520             9.4920\n190                  Botswana 2012           4.836             9.4710\n191                  Botswana 2013           4.128             9.5570\n192                  Botswana 2014           4.031             9.5930\n193                  Botswana 2015           3.762             9.5240\n194                  Botswana 2016           3.499             9.5730\n195                  Botswana 2017           3.505             9.5930\n196                  Botswana 2018           3.461             9.6130\n197                  Botswana 2019           3.471             9.6240\n198                  Botswana 2022           3.435             9.6290\n199                    Brazil 2005           6.637             9.4350\n200                    Brazil 2007           6.321             9.5120\n201                    Brazil 2008           6.691             9.5520\n202                    Brazil 2009           7.001             9.5410\n203                    Brazil 2010           6.837             9.6040\n204                    Brazil 2011           7.038             9.6340\n205                    Brazil 2012           6.660             9.6440\n206                    Brazil 2013           7.140             9.6650\n207                    Brazil 2014           6.981             9.6610\n208                    Brazil 2015           6.547             9.6170\n209                    Brazil 2016           6.375             9.5750\n210                    Brazil 2017           6.333             9.5800\n211                    Brazil 2018           6.191             9.5900\n212                    Brazil 2019           6.451             9.5950\n213                    Brazil 2020           6.110             9.5480\n214                    Brazil 2021           6.010             9.5880\n215                    Brazil 2022           6.257             9.6110\n216                  Bulgaria 2007           3.844             9.7460\n217                  Bulgaria 2010           3.912             9.8070\n218                  Bulgaria 2011           3.875             9.8340\n219                  Bulgaria 2012           4.222             9.8480\n220                  Bulgaria 2013           3.993             9.8480\n221                  Bulgaria 2014           4.438             9.8630\n222                  Bulgaria 2015           4.865             9.9030\n223                  Bulgaria 2016           4.838             9.9400\n224                  Bulgaria 2017           5.097             9.9750\n225                  Bulgaria 2018           5.099            10.0080\n226                  Bulgaria 2019           5.108            10.0550\n227                  Bulgaria 2020           5.598            10.0210\n228                  Bulgaria 2021           5.422            10.1020\n229                  Bulgaria 2022           5.378            10.1380\n230              Burkina Faso 2006           3.801             7.3270\n231              Burkina Faso 2007           4.017             7.3370\n232              Burkina Faso 2008           3.846             7.3640\n233              Burkina Faso 2010           4.036             7.4160\n234              Burkina Faso 2011           4.785             7.4500\n235              Burkina Faso 2012           3.955             7.4820\n236              Burkina Faso 2013           3.326             7.5090\n237              Burkina Faso 2014           3.481             7.5210\n238              Burkina Faso 2015           4.419             7.5300\n239              Burkina Faso 2016           4.206             7.5580\n240              Burkina Faso 2017           4.647             7.5900\n241              Burkina Faso 2018           4.927             7.6260\n242              Burkina Faso 2019           4.741             7.6540\n243              Burkina Faso 2020           4.640             7.6470\n244              Burkina Faso 2021           4.636             7.6870\n245                  Cambodia 2006           3.569             7.7460\n246                  Cambodia 2007           4.156             7.8260\n247                  Cambodia 2008           4.462             7.8740\n248                  Cambodia 2009           4.111             7.8600\n249                  Cambodia 2010           4.141             7.9040\n250                  Cambodia 2011           4.161             7.9570\n251                  Cambodia 2012           3.899             8.0130\n252                  Cambodia 2013           3.674             8.0700\n253                  Cambodia 2014           3.883             8.1250\n254                  Cambodia 2015           4.162             8.1790\n255                  Cambodia 2016           4.461             8.2330\n256                  Cambodia 2017           4.586             8.2870\n257                  Cambodia 2018           5.122             8.3470\n258                  Cambodia 2019           4.998             8.4040\n259                  Cambodia 2020           4.377             8.3610\n260                  Cambodia 2021           4.555             8.3790\n261                  Cambodia 2022           4.250             8.4150\n262                  Cameroon 2006           3.851             8.0900\n263                  Cameroon 2007           4.350             8.1040\n264                  Cameroon 2008           4.292             8.1040\n265                  Cameroon 2009           4.741             8.1010\n266                  Cameroon 2010           4.554             8.1010\n267                  Cameroon 2011           4.434             8.1060\n268                  Cameroon 2012           4.245             8.1230\n269                  Cameroon 2013           4.271             8.1440\n270                  Cameroon 2014           4.240             8.1690\n271                  Cameroon 2015           5.038             8.1930\n272                  Cameroon 2016           4.816             8.2070\n273                  Cameroon 2017           5.074             8.2140\n274                  Cameroon 2018           5.251             8.2250\n275                  Cameroon 2019           4.937             8.2310\n276                  Cameroon 2020           5.241             8.2070\n277                  Cameroon 2021           4.963             8.2160\n278                  Cameroon 2022           4.712             8.2270\n279                    Canada 2005           7.418            10.7070\n280                    Canada 2007           7.482            10.7340\n281                    Canada 2008           7.486            10.7330\n282                    Canada 2009           7.488            10.6920\n283                    Canada 2010           7.650            10.7110\n284                    Canada 2011           7.426            10.7330\n285                    Canada 2012           7.415            10.7390\n286                    Canada 2013           7.594            10.7520\n287                    Canada 2014           7.304            10.7700\n288                    Canada 2015           7.413            10.7690\n289                    Canada 2016           7.245            10.7680\n290                    Canada 2017           7.415            10.7860\n291                    Canada 2018           7.175            10.7990\n292                    Canada 2019           7.109            10.8030\n293                    Canada 2020           7.025            10.7380\n294                    Canada 2021           6.939            10.7770\n295                    Canada 2022           6.918            10.8030\n296                      Chad 2006           3.435             7.3690\n297                      Chad 2007           4.141             7.3680\n298                      Chad 2008           4.632             7.3630\n299                      Chad 2009           3.639             7.3690\n300                      Chad 2010           3.743             7.4620\n301                      Chad 2011           4.393             7.4280\n302                      Chad 2012           4.033             7.4780\n303                      Chad 2013           3.508             7.4980\n304                      Chad 2014           3.460             7.5290\n305                      Chad 2015           4.323             7.5250\n306                      Chad 2016           4.029             7.4290\n307                      Chad 2017           4.559             7.3650\n308                      Chad 2018           4.486             7.3550\n309                      Chad 2019           4.251             7.3540\n310                      Chad 2022           4.397             7.2610\n311                     Chile 2006           6.063             9.8700\n312                     Chile 2007           5.698             9.9100\n313                     Chile 2008           5.789             9.9380\n314                     Chile 2009           6.494             9.9160\n315                     Chile 2010           6.636             9.9630\n316                     Chile 2011           6.526            10.0130\n317                     Chile 2012           6.599            10.0630\n318                     Chile 2013           6.740            10.0860\n319                     Chile 2014           6.844            10.0940\n320                     Chile 2015           6.533            10.1050\n321                     Chile 2016           6.579            10.1100\n322                     Chile 2017           6.320            10.1080\n323                     Chile 2018           6.436            10.1300\n324                     Chile 2019           5.942            10.1190\n325                     Chile 2020           6.151            10.0440\n326                     Chile 2021           6.436            10.1440\n327                     Chile 2022           6.415            10.1540\n328                  Colombia 2006           6.025             9.2770\n329                  Colombia 2007           6.138             9.3300\n330                  Colombia 2008           6.168             9.3510\n331                  Colombia 2009           6.272             9.3510\n332                  Colombia 2010           6.408             9.3830\n333                  Colombia 2011           6.464             9.4400\n334                  Colombia 2012           6.375             9.4680\n335                  Colombia 2013           6.607             9.5080\n336                  Colombia 2014           6.449             9.5420\n337                  Colombia 2015           6.388             9.5620\n338                  Colombia 2016           6.234             9.5720\n339                  Colombia 2017           6.157             9.5700\n340                  Colombia 2018           5.984             9.5770\n341                  Colombia 2019           6.350             9.5900\n342                  Colombia 2020           5.709             9.5020\n343                  Colombia 2021           5.290             9.5920\n344                  Colombia 2022           5.892             9.6600\n345                Costa Rica 2006           7.082             9.6070\n346                Costa Rica 2007           7.432             9.6720\n347                Costa Rica 2008           6.851             9.7040\n348                Costa Rica 2009           7.615             9.6820\n349                Costa Rica 2010           7.271             9.7210\n350                Costa Rica 2011           7.229             9.7520\n351                Costa Rica 2012           7.272             9.7880\n352                Costa Rica 2013           7.158             9.8010\n353                Costa Rica 2014           7.247             9.8240\n354                Costa Rica 2015           6.854             9.8500\n355                Costa Rica 2016           7.136             9.8810\n356                Costa Rica 2017           7.225             9.9120\n357                Costa Rica 2018           7.141             9.9280\n358                Costa Rica 2019           6.998             9.9440\n359                Costa Rica 2020           6.338             9.8950\n360                Costa Rica 2021           6.408             9.9620\n361                Costa Rica 2022           7.077             9.9980\n362                   Croatia 2007           5.821            10.1740\n363                   Croatia 2009           5.433            10.1200\n364                   Croatia 2010           5.596            10.1100\n365                   Croatia 2011           5.385            10.1130\n366                   Croatia 2012           6.028            10.0920\n367                   Croatia 2013           5.885            10.0910\n368                   Croatia 2014           5.381            10.0910\n369                   Croatia 2015           5.205            10.1240\n370                   Croatia 2016           5.417            10.1660\n371                   Croatia 2017           5.343            10.2110\n372                   Croatia 2018           5.536            10.2480\n373                   Croatia 2019           5.626            10.2870\n374                   Croatia 2020           6.508            10.2020\n375                   Croatia 2021           6.287            10.3620\n376                   Croatia 2022           5.579            10.4580\n377                    Cyprus 2006           6.238            10.5680\n378                    Cyprus 2009           6.833            10.5600\n379                    Cyprus 2010           6.387            10.5560\n380                    Cyprus 2011           6.690            10.5350\n381                    Cyprus 2012           6.181            10.4840\n382                    Cyprus 2013           5.439            10.4180\n383                    Cyprus 2014           5.627            10.4120\n384                    Cyprus 2015           5.439            10.4510\n385                    Cyprus 2016           5.795            10.5100\n386                    Cyprus 2017           6.062            10.5560\n387                    Cyprus 2018           6.276            10.5990\n388                    Cyprus 2019           6.137            10.6390\n389                    Cyprus 2020           6.260            10.5830\n390                    Cyprus 2021           6.269            10.6380\n391                    Cyprus 2022           5.865            10.5560\n392                   Denmark 2005           8.019            10.8490\n393                   Denmark 2007           7.834            10.8890\n394                   Denmark 2008           7.971            10.8780\n395                   Denmark 2009           7.683            10.8220\n396                   Denmark 2010           7.771            10.8360\n397                   Denmark 2011           7.788            10.8450\n398                   Denmark 2012           7.520            10.8440\n399                   Denmark 2013           7.589            10.8490\n400                   Denmark 2014           7.508            10.8600\n401                   Denmark 2015           7.514            10.8760\n402                   Denmark 2016           7.558            10.9000\n403                   Denmark 2017           7.594            10.9220\n404                   Denmark 2018           7.649            10.9360\n405                   Denmark 2019           7.693            10.9480\n406                   Denmark 2020           7.515            10.9240\n407                   Denmark 2021           7.699            10.9680\n408                   Denmark 2022           7.545            10.9940\n409        Dominican Republic 2006           5.088             9.3060\n410        Dominican Republic 2007           5.081             9.3650\n411        Dominican Republic 2008           4.842             9.3840\n412        Dominican Republic 2009           5.432             9.3810\n413        Dominican Republic 2010           4.735             9.4480\n414        Dominican Republic 2011           5.397             9.4650\n415        Dominican Republic 2012           4.753             9.4790\n416        Dominican Republic 2013           5.016             9.5150\n417        Dominican Republic 2014           5.387             9.5700\n418        Dominican Republic 2015           5.062             9.6250\n419        Dominican Republic 2016           5.239             9.6780\n420        Dominican Republic 2017           5.605             9.7130\n421        Dominican Republic 2018           5.433             9.7690\n422        Dominican Republic 2019           6.004             9.8080\n423        Dominican Republic 2020           5.168             9.7270\n424        Dominican Republic 2021           6.031             9.8320\n425        Dominican Republic 2022           5.518             9.8740\n426                   Ecuador 2006           5.024             9.1890\n427                   Ecuador 2007           4.996             9.1940\n428                   Ecuador 2008           5.297             9.2380\n429                   Ecuador 2009           6.022             9.2270\n430                   Ecuador 2010           5.838             9.2450\n431                   Ecuador 2011           5.795             9.3050\n432                   Ecuador 2012           5.961             9.3430\n433                   Ecuador 2013           6.019             9.3760\n434                   Ecuador 2014           5.946             9.3990\n435                   Ecuador 2015           5.964             9.3850\n436                   Ecuador 2016           6.115             9.3580\n437                   Ecuador 2017           5.840             9.3660\n438                   Ecuador 2018           6.128             9.3590\n439                   Ecuador 2019           5.809             9.3410\n440                   Ecuador 2020           5.354             9.2450\n441                   Ecuador 2021           5.435             9.2750\n442                   Ecuador 2022           5.887             9.2900\n443                     Egypt 2005           5.168             8.9900\n444                     Egypt 2007           5.541             9.0850\n445                     Egypt 2008           4.632             9.1350\n446                     Egypt 2009           5.066             9.1610\n447                     Egypt 2010           4.669             9.1910\n448                     Egypt 2011           4.174             9.1860\n449                     Egypt 2012           4.204             9.1860\n450                     Egypt 2013           3.559             9.1840\n451                     Egypt 2014           4.885             9.1900\n452                     Egypt 2015           4.763             9.2100\n453                     Egypt 2016           4.557             9.2320\n454                     Egypt 2017           3.929             9.2530\n455                     Egypt 2018           4.005             9.2860\n456                     Egypt 2019           4.328             9.3220\n457                     Egypt 2020           4.472             9.3400\n458                     Egypt 2021           4.026             9.3560\n459                     Egypt 2022           4.024             9.4040\n460               El Salvador 2006           5.701             8.8850\n461               El Salvador 2007           5.296             8.9020\n462               El Salvador 2008           5.191             8.9190\n463               El Salvador 2009           6.839             8.8940\n464               El Salvador 2010           6.740             8.9110\n465               El Salvador 2011           4.741             8.9450\n466               El Salvador 2012           5.934             8.9680\n467               El Salvador 2013           6.325             8.9870\n468               El Salvador 2014           5.857             9.0000\n469               El Salvador 2015           6.018             9.0200\n470               El Salvador 2016           6.140             9.0420\n471               El Salvador 2017           6.339             9.0620\n472               El Salvador 2018           6.241             9.0840\n473               El Salvador 2019           6.455             9.1070\n474               El Salvador 2020           5.462             9.0200\n475               El Salvador 2021           6.431             9.1140\n476               El Salvador 2022           6.492             9.1350\n477                   Finland 2006           7.672            10.7450\n478                   Finland 2008           7.671            10.7960\n479                   Finland 2010           7.393            10.7340\n480                   Finland 2011           7.354            10.7540\n481                   Finland 2012           7.420            10.7350\n482                   Finland 2013           7.445            10.7220\n483                   Finland 2014           7.385            10.7140\n484                   Finland 2015           7.448            10.7160\n485                   Finland 2016           7.660            10.7410\n486                   Finland 2017           7.788            10.7700\n487                   Finland 2018           7.858            10.7800\n488                   Finland 2019           7.780            10.7910\n489                   Finland 2020           7.889            10.7670\n490                   Finland 2021           7.794            10.7950\n491                   Finland 2022           7.729            10.8140\n492                    France 2005           7.093            10.6370\n493                    France 2006           6.583            10.6540\n494                    France 2008           7.008            10.6690\n495                    France 2009           6.283            10.6350\n496                    France 2010           6.798            10.6490\n497                    France 2011           6.959            10.6660\n498                    France 2012           6.649            10.6640\n499                    France 2013           6.667            10.6650\n500                    France 2014           6.467            10.6690\n501                    France 2015           6.358            10.6770\n502                    France 2016           6.475            10.6850\n503                    France 2017           6.635            10.7050\n504                    France 2018           6.666            10.7200\n505                    France 2019           6.690            10.7350\n506                    France 2020           6.714            10.6510\n507                    France 2021           6.656            10.7140\n508                    France 2022           6.614            10.7370\n509                   Georgia 2006           3.675             8.9930\n510                   Georgia 2007           3.707             9.1170\n511                   Georgia 2008           4.156             9.1440\n512                   Georgia 2009           3.801             9.1160\n513                   Georgia 2010           4.102             9.1840\n514                   Georgia 2011           4.203             9.2630\n515                   Georgia 2012           4.254             9.3320\n516                   Georgia 2013           4.349             9.3710\n517                   Georgia 2014           4.288             9.4140\n518                   Georgia 2015           4.122             9.4420\n519                   Georgia 2016           4.448             9.4700\n520                   Georgia 2017           4.451             9.5170\n521                   Georgia 2018           4.659             9.5650\n522                   Georgia 2019           4.892             9.6150\n523                   Georgia 2020           5.123             9.5440\n524                   Georgia 2021           4.911             9.6480\n525                   Georgia 2022           5.293             9.7460\n526                   Germany 2005           6.620            10.6910\n527                   Germany 2007           6.417            10.7600\n528                   Germany 2008           6.522            10.7710\n529                   Germany 2009           6.641            10.7150\n530                   Germany 2010           6.725            10.7580\n531                   Germany 2011           6.621            10.8150\n532                   Germany 2012           6.702            10.8170\n533                   Germany 2013           6.965            10.8190\n534                   Germany 2014           6.984            10.8370\n535                   Germany 2015           7.037            10.8430\n536                   Germany 2016           6.874            10.8570\n537                   Germany 2017           7.074            10.8790\n538                   Germany 2018           7.118            10.8860\n539                   Germany 2019           7.035            10.8940\n540                   Germany 2020           7.312            10.8560\n541                   Germany 2021           6.755            10.8810\n542                   Germany 2022           6.608            10.8990\n543                     Ghana 2006           4.535             8.0670\n544                     Ghana 2007           5.220             8.0840\n545                     Ghana 2008           4.965             8.1450\n546                     Ghana 2009           4.198             8.1670\n547                     Ghana 2010           4.606             8.2190\n548                     Ghana 2011           5.608             8.3260\n549                     Ghana 2012           5.057             8.3900\n550                     Ghana 2013           4.965             8.4360\n551                     Ghana 2014           3.860             8.4400\n552                     Ghana 2015           3.986             8.4370\n553                     Ghana 2016           4.514             8.4470\n554                     Ghana 2017           5.481             8.5030\n555                     Ghana 2018           5.004             8.5420\n556                     Ghana 2019           4.967             8.5840\n557                     Ghana 2020           5.319             8.5690\n558                     Ghana 2021           4.378             8.6010\n559                     Ghana 2022           4.191             8.6150\n560                    Greece 2005           6.006            10.4540\n561                    Greece 2007           6.647            10.5350\n562                    Greece 2009           6.039            10.4830\n563                    Greece 2010           5.840            10.4250\n564                    Greece 2011           5.372            10.3200\n565                    Greece 2012           5.096            10.2510\n566                    Greece 2013           4.720            10.2330\n567                    Greece 2014           4.756            10.2450\n568                    Greece 2015           5.623            10.2490\n569                    Greece 2016           5.303            10.2480\n570                    Greece 2017           5.148            10.2610\n571                    Greece 2018           5.409            10.2800\n572                    Greece 2019           5.952            10.3000\n573                    Greece 2020           5.788            10.2070\n574                    Greece 2021           6.104            10.2940\n575                    Greece 2022           5.900            10.3640\n576                 Guatemala 2006           5.901             8.8500\n577                 Guatemala 2007           6.330             8.8910\n578                 Guatemala 2008           6.414             8.9050\n579                 Guatemala 2009           6.452             8.8900\n580                 Guatemala 2010           6.290             8.9010\n581                 Guatemala 2011           5.743             8.9230\n582                 Guatemala 2012           5.856             8.9350\n583                 Guatemala 2013           5.985             8.9530\n584                 Guatemala 2014           6.536             8.9800\n585                 Guatemala 2015           6.465             9.0030\n586                 Guatemala 2016           6.359             9.0130\n587                 Guatemala 2017           6.325             9.0270\n588                 Guatemala 2018           6.627             9.0440\n589                 Guatemala 2019           6.262             9.0680\n590                 Guatemala 2022           6.150             9.1160\n591                  Honduras 2006           5.397             8.4480\n592                  Honduras 2007           5.097             8.4850\n593                  Honduras 2008           5.420             8.5040\n594                  Honduras 2009           6.033             8.4580\n595                  Honduras 2010           5.866             8.4740\n596                  Honduras 2011           4.961             8.4920\n597                  Honduras 2012           4.602             8.5130\n598                  Honduras 2013           4.713             8.5210\n599                  Honduras 2014           5.056             8.5330\n600                  Honduras 2015           4.845             8.5530\n601                  Honduras 2016           5.648             8.5730\n602                  Honduras 2017           6.020             8.6030\n603                  Honduras 2018           5.908             8.6240\n604                  Honduras 2019           5.930             8.6330\n605                  Honduras 2021           6.114             8.6260\n606                  Honduras 2022           5.932             8.6450\n607                   Hungary 2005           5.194            10.1030\n608                   Hungary 2007           4.954            10.1480\n609                   Hungary 2009           4.895            10.0930\n610                   Hungary 2010           4.725            10.1060\n611                   Hungary 2011           4.918            10.1270\n612                   Hungary 2012           4.683            10.1190\n613                   Hungary 2013           4.914            10.1400\n614                   Hungary 2014           5.181            10.1840\n615                   Hungary 2015           5.344            10.2230\n616                   Hungary 2016           5.449            10.2480\n617                   Hungary 2017           6.065            10.2920\n618                   Hungary 2018           5.936            10.3460\n619                   Hungary 2019           6.000            10.3940\n620                   Hungary 2020           6.038            10.3490\n621                   Hungary 2021           6.227            10.4220\n622                   Hungary 2022           5.861            10.4840\n623                     India 2006           5.348             8.1410\n624                     India 2007           5.027             8.2000\n625                     India 2008           5.146             8.2160\n626                     India 2009           4.522             8.2780\n627                     India 2010           4.989             8.3460\n628                     India 2011           4.635             8.3830\n629                     India 2012           4.720             8.4230\n630                     India 2013           4.428             8.4720\n631                     India 2014           4.424             8.5310\n632                     India 2015           4.342             8.5960\n633                     India 2016           4.179             8.6640\n634                     India 2017           4.046             8.7180\n635                     India 2018           3.818             8.7700\n636                     India 2019           3.249             8.7960\n637                     India 2020           4.224             8.7180\n638                     India 2021           3.558             8.7940\n639                     India 2022           3.930             8.8500\n640                 Indonesia 2006           4.947             8.8390\n641                 Indonesia 2007           5.101             8.8880\n642                 Indonesia 2008           4.815             8.9330\n643                 Indonesia 2009           5.472             8.9660\n644                 Indonesia 2010           5.457             9.0130\n645                 Indonesia 2011           5.173             9.0610\n646                 Indonesia 2012           5.368             9.1070\n647                 Indonesia 2013           5.292             9.1490\n648                 Indonesia 2014           5.597             9.1860\n649                 Indonesia 2015           5.043             9.2220\n650                 Indonesia 2016           5.136             9.2610\n651                 Indonesia 2017           5.098             9.3000\n652                 Indonesia 2018           5.340             9.3410\n653                 Indonesia 2019           5.347             9.3810\n654                 Indonesia 2020           4.828             9.3510\n655                 Indonesia 2021           5.433             9.3810\n656                 Indonesia 2022           5.585             9.4250\n657                   Ireland 2006           7.144            10.9820\n658                   Ireland 2008           7.568            10.9390\n659                   Ireland 2009           7.046            10.8760\n660                   Ireland 2010           7.257            10.8870\n661                   Ireland 2011           7.007            10.8910\n662                   Ireland 2012           6.965            10.8870\n663                   Ireland 2013           6.760            10.8930\n664                   Ireland 2014           7.018            10.9690\n665                   Ireland 2015           6.830            11.1770\n666                   Ireland 2016           7.041            11.1860\n667                   Ireland 2017           7.060            11.2610\n668                   Ireland 2018           6.962            11.3310\n669                   Ireland 2019           7.255            11.3700\n670                   Ireland 2020           7.035            11.4200\n671                   Ireland 2021           6.828            11.5380\n672                   Ireland 2022           6.870            11.6250\n673                    Israel 2006           7.173            10.3590\n674                    Israel 2007           6.841            10.4000\n675                    Israel 2008           7.261            10.4140\n676                    Israel 2009           7.353            10.3990\n677                    Israel 2010           7.359            10.4360\n678                    Israel 2011           7.433            10.4720\n679                    Israel 2012           7.111            10.4790\n680                    Israel 2013           7.321            10.5030\n681                    Israel 2014           7.401            10.5230\n682                    Israel 2015           7.079            10.5270\n683                    Israel 2016           7.159            10.5520\n684                    Israel 2017           7.331            10.5740\n685                    Israel 2018           6.927            10.5950\n686                    Israel 2019           7.332            10.6170\n687                    Israel 2020           7.195            10.5800\n688                    Israel 2021           7.578            10.6470\n689                    Israel 2022           7.662            10.6920\n690                     Italy 2005           6.854            10.6980\n691                     Italy 2007           6.574            10.7220\n692                     Italy 2008           6.780            10.7060\n693                     Italy 2009           6.334            10.6470\n694                     Italy 2010           6.354            10.6610\n695                     Italy 2011           6.057            10.6660\n696                     Italy 2012           5.839            10.6330\n697                     Italy 2013           6.009            10.6030\n698                     Italy 2014           6.027            10.5940\n699                     Italy 2015           5.848            10.6030\n700                     Italy 2016           5.955            10.6170\n701                     Italy 2017           6.199            10.6350\n702                     Italy 2018           6.517            10.6470\n703                     Italy 2019           6.445            10.6630\n704                     Italy 2020           6.488            10.5730\n705                     Italy 2021           6.467            10.6440\n706                     Italy 2022           6.258            10.6850\n707                     Japan 2005           6.516            10.5520\n708                     Japan 2007           6.238            10.5780\n709                     Japan 2008           5.911            10.5660\n710                     Japan 2009           5.845            10.5070\n711                     Japan 2010           6.057            10.5470\n712                     Japan 2011           6.263            10.5490\n713                     Japan 2012           5.968            10.5650\n714                     Japan 2013           5.959            10.5860\n715                     Japan 2014           5.923            10.5900\n716                     Japan 2015           5.880            10.6070\n717                     Japan 2016           5.955            10.6150\n718                     Japan 2017           5.911            10.6320\n719                     Japan 2018           5.794            10.6390\n720                     Japan 2019           5.908            10.6380\n721                     Japan 2020           6.118            10.5950\n722                     Japan 2021           6.091            10.6160\n723                     Japan 2022           6.178            10.6360\n724                    Jordan 2005           6.295             9.2830\n725                    Jordan 2007           5.598             9.3080\n726                    Jordan 2008           4.930             9.3540\n727                    Jordan 2009           6.000             9.3810\n728                    Jordan 2010           5.570             9.3820\n729                    Jordan 2011           5.539             9.3830\n730                    Jordan 2012           5.132             9.3930\n731                    Jordan 2013           5.172             9.3540\n732                    Jordan 2014           5.333             9.2690\n733                    Jordan 2015           5.405             9.2020\n734                    Jordan 2016           5.271             9.1730\n735                    Jordan 2017           4.808             9.1730\n736                    Jordan 2018           4.639             9.1680\n737                    Jordan 2019           4.453             9.1640\n738                    Jordan 2020           4.094             9.1270\n739                    Jordan 2021           3.909             9.1290\n740                    Jordan 2022           4.356             9.1340\n741                Kazakhstan 2006           5.476             9.8040\n742                Kazakhstan 2007           5.719             9.8780\n743                Kazakhstan 2008           5.886             9.8920\n744                Kazakhstan 2009           5.383             9.8840\n745                Kazakhstan 2010           5.514             9.9400\n746                Kazakhstan 2011           5.736             9.9970\n747                Kazakhstan 2012           5.759            10.0300\n748                Kazakhstan 2013           5.835            10.0740\n749                Kazakhstan 2014           5.970            10.1010\n750                Kazakhstan 2015           5.950            10.0980\n751                Kazakhstan 2016           5.534            10.0950\n752                Kazakhstan 2017           5.882            10.1210\n753                Kazakhstan 2018           6.008            10.1480\n754                Kazakhstan 2019           6.272            10.1790\n755                Kazakhstan 2020           6.168            10.1410\n756                Kazakhstan 2021           6.260            10.1700\n757                Kazakhstan 2022           6.006            10.1870\n758                     Kenya 2006           4.223             8.1640\n759                     Kenya 2007           4.576             8.2010\n760                     Kenya 2008           4.015             8.1730\n761                     Kenya 2009           4.270             8.1760\n762                     Kenya 2010           4.256             8.2260\n763                     Kenya 2011           4.405             8.2490\n764                     Kenya 2012           4.547             8.2690\n765                     Kenya 2013           3.795             8.2820\n766                     Kenya 2014           4.905             8.3080\n767                     Kenya 2015           4.358             8.3340\n768                     Kenya 2016           4.396             8.3530\n769                     Kenya 2017           4.476             8.3690\n770                     Kenya 2018           4.656             8.4040\n771                     Kenya 2019           4.619             8.4340\n772                     Kenya 2020           4.547             8.4110\n773                     Kenya 2021           4.465             8.4650\n774                     Kenya 2022           4.448             8.4990\n775                Kyrgyzstan 2006           4.641             8.1850\n776                Kyrgyzstan 2007           4.698             8.2580\n777                Kyrgyzstan 2008           4.737             8.3290\n778                Kyrgyzstan 2009           5.069             8.3450\n779                Kyrgyzstan 2010           4.996             8.3290\n780                Kyrgyzstan 2011           4.921             8.3740\n781                Kyrgyzstan 2012           5.208             8.3570\n782                Kyrgyzstan 2013           5.402             8.4410\n783                Kyrgyzstan 2014           5.252             8.4600\n784                Kyrgyzstan 2015           4.905             8.4770\n785                Kyrgyzstan 2016           4.857             8.5000\n786                Kyrgyzstan 2017           5.630             8.5260\n787                Kyrgyzstan 2018           5.297             8.5430\n788                Kyrgyzstan 2019           5.685             8.5680\n789                Kyrgyzstan 2020           6.250             8.4610\n790                Kyrgyzstan 2021           5.564             8.4790\n791                Kyrgyzstan 2022           5.668             8.5170\n792                   Lebanon 2005           5.491             9.5730\n793                   Lebanon 2006           4.653             9.5720\n794                   Lebanon 2008           4.595             9.7120\n795                   Lebanon 2009           5.206             9.7970\n796                   Lebanon 2010           5.032             9.8650\n797                   Lebanon 2011           5.188             9.8640\n798                   Lebanon 2012           4.573             9.8630\n799                   Lebanon 2013           4.983             9.8080\n800                   Lebanon 2014           5.233             9.7330\n801                   Lebanon 2015           5.172             9.7180\n802                   Lebanon 2016           5.271             9.7550\n803                   Lebanon 2017           5.154             9.7870\n804                   Lebanon 2018           5.167             9.7970\n805                   Lebanon 2019           4.024             9.7510\n806                   Lebanon 2020           2.634             9.5310\n807                   Lebanon 2021           2.179             9.4710\n808                   Lebanon 2022           2.352             9.4280\n809                 Lithuania 2006           5.954            10.0420\n810                 Lithuania 2007           5.808            10.1600\n811                 Lithuania 2008           5.554            10.1960\n812                 Lithuania 2009           5.467            10.0460\n813                 Lithuania 2010           5.066            10.0830\n814                 Lithuania 2011           5.432            10.1650\n815                 Lithuania 2012           5.771            10.2160\n816                 Lithuania 2013           5.596            10.2610\n817                 Lithuania 2014           6.126            10.3040\n818                 Lithuania 2015           5.711            10.3340\n819                 Lithuania 2016           5.866            10.3710\n820                 Lithuania 2017           6.273            10.4270\n821                 Lithuania 2018           6.309            10.4760\n822                 Lithuania 2019           6.064            10.5240\n823                 Lithuania 2020           6.391            10.5230\n824                 Lithuania 2021           6.865            10.5790\n825                 Lithuania 2022           7.038            10.6020\n826                Luxembourg 2009           6.958            11.6280\n827                Luxembourg 2010           7.097            11.6470\n828                Luxembourg 2011           7.101            11.6350\n829                Luxembourg 2012           6.964            11.6270\n830                Luxembourg 2013           7.131            11.6360\n831                Luxembourg 2014           6.891            11.6380\n832                Luxembourg 2015           6.702            11.6370\n833                Luxembourg 2016           6.967            11.6640\n834                Luxembourg 2017           7.061            11.6530\n835                Luxembourg 2018           7.243            11.6450\n836                Luxembourg 2019           7.404            11.6490\n837                Luxembourg 2022           7.228            11.6600\n838                      Mali 2006           4.014             7.5610\n839                      Mali 2008           4.115             7.5760\n840                      Mali 2009           3.977             7.5910\n841                      Mali 2010           3.762             7.6100\n842                      Mali 2011           4.667             7.6090\n843                      Mali 2012           4.313             7.5720\n844                      Mali 2013           3.676             7.5650\n845                      Mali 2014           3.975             7.6020\n846                      Mali 2015           4.582             7.6310\n847                      Mali 2016           4.016             7.6550\n848                      Mali 2017           4.742             7.6750\n849                      Mali 2018           4.416             7.6900\n850                      Mali 2019           4.988             7.7050\n851                      Mali 2020           4.269             7.6610\n852                      Mali 2021           4.113             7.6590\n853                      Mali 2022           4.211             7.6450\n854                     Malta 2009           6.328            10.3530\n855                     Malta 2010           5.774            10.4020\n856                     Malta 2011           6.155            10.4020\n857                     Malta 2012           5.963            10.4340\n858                     Malta 2013           6.380            10.4730\n859                     Malta 2014           6.452            10.5260\n860                     Malta 2015           6.613            10.5940\n861                     Malta 2016           6.591            10.6050\n862                     Malta 2017           6.676            10.6810\n863                     Malta 2018           6.910            10.7060\n864                     Malta 2019           6.733            10.7240\n865                     Malta 2020           6.157            10.6150\n866                     Malta 2021           6.444            10.7070\n867                     Malta 2022           6.299            10.5940\n868                Mauritania 2007           4.149             8.5280\n869                Mauritania 2008           4.248             8.5000\n870                Mauritania 2009           4.500             8.4740\n871                Mauritania 2010           4.772             8.4710\n872                Mauritania 2011           4.785             8.4820\n873                Mauritania 2012           4.673             8.4940\n874                Mauritania 2013           4.199             8.5060\n875                Mauritania 2014           4.483             8.5210\n876                Mauritania 2015           3.923             8.5470\n877                Mauritania 2016           4.472             8.5330\n878                Mauritania 2017           4.678             8.5680\n879                Mauritania 2018           4.314             8.5880\n880                Mauritania 2019           4.153             8.6140\n881                Mauritania 2022           4.724             8.5910\n882                    Mexico 2005           6.581             9.7920\n883                    Mexico 2007           6.525             9.8310\n884                    Mexico 2008           6.829             9.8300\n885                    Mexico 2009           6.963             9.7640\n886                    Mexico 2010           6.802             9.8000\n887                    Mexico 2011           6.910             9.8220\n888                    Mexico 2012           7.320             9.8440\n889                    Mexico 2013           7.443             9.8440\n890                    Mexico 2014           6.680             9.8600\n891                    Mexico 2015           6.236             9.8800\n892                    Mexico 2016           6.824             9.8950\n893                    Mexico 2017           6.410             9.9050\n894                    Mexico 2018           6.550             9.9170\n895                    Mexico 2019           6.432             9.9070\n896                    Mexico 2020           5.964             9.8160\n897                    Mexico 2021           5.991             9.8570\n898                    Mexico 2022           7.038             9.8760\n899                   Moldova 2006           5.102             8.9360\n900                   Moldova 2007           4.775             8.9670\n901                   Moldova 2008           5.503             9.0440\n902                   Moldova 2009           5.554             8.9840\n903                   Moldova 2010           5.590             9.0530\n904                   Moldova 2011           5.792             9.1110\n905                   Moldova 2012           5.996             9.1050\n906                   Moldova 2013           5.756             9.1920\n907                   Moldova 2014           5.917             9.2410\n908                   Moldova 2015           6.017             9.2450\n909                   Moldova 2016           5.578             9.3000\n910                   Moldova 2017           5.326             9.3630\n911                   Moldova 2018           5.682             9.4230\n912                   Moldova 2019           5.803             9.4750\n913                   Moldova 2020           5.812             9.4090\n914                   Moldova 2021           5.959             9.5470\n915                   Moldova 2022           5.687             9.5400\n916                  Mongolia 2007           4.609             8.8270\n917                  Mongolia 2008           4.493             8.9020\n918                  Mongolia 2010           4.586             8.9250\n919                  Mongolia 2011           5.031             9.0690\n920                  Mongolia 2012           4.885             9.1680\n921                  Mongolia 2013           4.913             9.2600\n922                  Mongolia 2014           4.825             9.3150\n923                  Mongolia 2015           4.983             9.3180\n924                  Mongolia 2016           5.057             9.3110\n925                  Mongolia 2017           5.334             9.3440\n926                  Mongolia 2018           5.465             9.3970\n927                  Mongolia 2019           5.563             9.4300\n928                  Mongolia 2020           6.011             9.3650\n929                  Mongolia 2021           5.721             9.3650\n930                  Mongolia 2022           5.788             9.3880\n931                Montenegro 2007           5.196             9.6960\n932                Montenegro 2009           4.801             9.7020\n933                Montenegro 2010           5.455             9.7270\n934                Montenegro 2011           5.223             9.7580\n935                Montenegro 2012           5.219             9.7290\n936                Montenegro 2013           5.074             9.7630\n937                Montenegro 2014           5.283             9.7800\n938                Montenegro 2015           5.125             9.8130\n939                Montenegro 2016           5.304             9.8420\n940                Montenegro 2017           5.615             9.8880\n941                Montenegro 2018           5.650             9.9370\n942                Montenegro 2019           5.386             9.9780\n943                Montenegro 2020           5.722             9.8130\n944                     Nepal 2006           4.567             7.7340\n945                     Nepal 2007           4.748             7.7610\n946                     Nepal 2008           4.441             7.8140\n947                     Nepal 2009           4.917             7.8530\n948                     Nepal 2010           4.350             7.8950\n949                     Nepal 2011           3.809             7.9240\n950                     Nepal 2012           4.233             7.9680\n951                     Nepal 2013           4.605             8.0000\n952                     Nepal 2014           4.975             8.0560\n953                     Nepal 2015           4.812             8.0890\n954                     Nepal 2016           5.100             8.0850\n955                     Nepal 2017           4.737             8.1590\n956                     Nepal 2018           4.910             8.2210\n957                     Nepal 2019           5.449             8.2740\n958                     Nepal 2020           5.982             8.2330\n959                     Nepal 2021           4.622             8.2510\n960                     Nepal 2022           5.474             8.2850\n961               Netherlands 2005           7.464            10.8090\n962               Netherlands 2007           7.452            10.8760\n963               Netherlands 2008           7.631            10.8940\n964               Netherlands 2010           7.502            10.8600\n965               Netherlands 2011           7.564            10.8700\n966               Netherlands 2012           7.471            10.8560\n967               Netherlands 2013           7.407            10.8520\n968               Netherlands 2014           7.321            10.8630\n969               Netherlands 2015           7.324            10.8780\n970               Netherlands 2016           7.541            10.8940\n971               Netherlands 2017           7.459            10.9170\n972               Netherlands 2018           7.463            10.9340\n973               Netherlands 2019           7.425            10.9470\n974               Netherlands 2020           7.504            10.9020\n975               Netherlands 2021           7.314            10.9440\n976               Netherlands 2022           7.390            10.9810\n977               New Zealand 2006           7.305            10.5410\n978               New Zealand 2007           7.604            10.5610\n979               New Zealand 2008           7.381            10.5420\n980               New Zealand 2010           7.224            10.5340\n981               New Zealand 2011           7.191            10.5490\n982               New Zealand 2012           7.250            10.5660\n983               New Zealand 2013           7.280            10.5850\n984               New Zealand 2014           7.306            10.6050\n985               New Zealand 2015           7.418            10.6220\n986               New Zealand 2016           7.226            10.6360\n987               New Zealand 2017           7.327            10.6510\n988               New Zealand 2018           7.370            10.6660\n989               New Zealand 2019           7.205            10.6720\n990               New Zealand 2020           7.257            10.6370\n991               New Zealand 2021           7.137            10.6670\n992               New Zealand 2022           6.975            10.6820\n993                 Nicaragua 2006           4.460             8.3950\n994                 Nicaragua 2007           4.944             8.4310\n995                 Nicaragua 2008           5.104             8.4500\n996                 Nicaragua 2009           5.353             8.4020\n997                 Nicaragua 2010           5.687             8.4310\n998                 Nicaragua 2011           5.386             8.4770\n999                 Nicaragua 2012           5.448             8.5260\n1000                Nicaragua 2013           5.772             8.5590\n1001                Nicaragua 2014           6.275             8.5910\n1002                Nicaragua 2015           5.924             8.6240\n1003                Nicaragua 2016           6.013             8.6540\n1004                Nicaragua 2017           6.476             8.6850\n1005                Nicaragua 2018           5.819             8.6370\n1006                Nicaragua 2019           6.113             8.5850\n1007                Nicaragua 2020           6.287             8.5530\n1008                Nicaragua 2021           6.095             8.6370\n1009                Nicaragua 2022           6.392             8.6640\n1010                    Niger 2006           3.737             6.8720\n1011                    Niger 2007           4.277             6.8670\n1012                    Niger 2008           4.236             6.9050\n1013                    Niger 2009           4.267             6.8870\n1014                    Niger 2010           4.101             6.9320\n1015                    Niger 2011           4.556             6.9180\n1016                    Niger 2012           3.798             6.9800\n1017                    Niger 2013           3.716             6.9940\n1018                    Niger 2014           4.181             7.0200\n1019                    Niger 2015           3.671             7.0250\n1020                    Niger 2016           4.235             7.0420\n1021                    Niger 2017           4.616             7.0530\n1022                    Niger 2018           5.164             7.0840\n1023                    Niger 2019           5.004             7.1050\n1024                    Niger 2022           4.501             7.0910\n1025          North Macedonia 2007           4.494             9.4350\n1026          North Macedonia 2009           4.428             9.4810\n1027          North Macedonia 2010           4.180             9.5120\n1028          North Macedonia 2011           4.898             9.5330\n1029          North Macedonia 2012           4.640             9.5270\n1030          North Macedonia 2013           5.186             9.5550\n1031          North Macedonia 2014           5.204             9.5890\n1032          North Macedonia 2015           4.976             9.6250\n1033          North Macedonia 2016           5.346             9.6520\n1034          North Macedonia 2017           5.234             9.6620\n1035          North Macedonia 2018           5.240             9.6900\n1036          North Macedonia 2019           5.015             9.7280\n1037          North Macedonia 2020           5.054             9.6670\n1038          North Macedonia 2021           5.535             9.7090\n1039          North Macedonia 2022           5.167             9.7330\n1040                 Pakistan 2005           5.225             8.2520\n1041                 Pakistan 2007           5.671             8.3140\n1042                 Pakistan 2008           4.414             8.3090\n1043                 Pakistan 2009           5.208             8.3150\n1044                 Pakistan 2010           5.786             8.3080\n1045                 Pakistan 2011           5.267             8.3140\n1046                 Pakistan 2012           5.132             8.3310\n1047                 Pakistan 2013           5.138             8.3590\n1048                 Pakistan 2014           5.436             8.3900\n1049                 Pakistan 2015           4.823             8.4230\n1050                 Pakistan 2016           5.549             8.4650\n1051                 Pakistan 2017           5.831             8.4950\n1052                 Pakistan 2018           5.472             8.5400\n1053                 Pakistan 2019           4.443             8.5480\n1054                 Pakistan 2020           4.624             8.5180\n1055                 Pakistan 2021           4.487             8.5630\n1056                   Panama 2006           6.128             9.7710\n1057                   Panama 2007           6.894             9.8650\n1058                   Panama 2008           6.931             9.9410\n1059                   Panama 2009           7.034             9.9350\n1060                   Panama 2010           7.321             9.9740\n1061                   Panama 2011           7.248            10.0630\n1062                   Panama 2012           6.860            10.1390\n1063                   Panama 2013           6.866            10.1880\n1064                   Panama 2014           6.631            10.2200\n1065                   Panama 2015           6.606            10.2580\n1066                   Panama 2016           6.118            10.2890\n1067                   Panama 2017           6.568            10.3260\n1068                   Panama 2018           6.281            10.3460\n1069                   Panama 2019           6.086            10.3590\n1070                   Panama 2021           6.553            10.2760\n1071                   Panama 2022           5.979            10.3330\n1072                     Peru 2006           4.811             8.9790\n1073                     Peru 2007           5.214             9.0540\n1074                     Peru 2008           5.129             9.1340\n1075                     Peru 2009           5.519             9.1380\n1076                     Peru 2010           5.613             9.2100\n1077                     Peru 2011           5.892             9.2630\n1078                     Peru 2012           5.825             9.3130\n1079                     Peru 2013           5.783             9.3610\n1080                     Peru 2014           5.866             9.3740\n1081                     Peru 2015           5.577             9.3940\n1082                     Peru 2016           5.701             9.4190\n1083                     Peru 2017           5.711             9.4290\n1084                     Peru 2018           5.680             9.4490\n1085                     Peru 2019           5.999             9.4520\n1086                     Peru 2020           4.994             9.3220\n1087                     Peru 2021           5.694             9.4350\n1088                     Peru 2022           5.892             9.4490\n1089              Philippines 2006           4.670             8.5620\n1090              Philippines 2007           5.074             8.6060\n1091              Philippines 2008           4.589             8.6300\n1092              Philippines 2009           4.880             8.6260\n1093              Philippines 2010           4.942             8.6790\n1094              Philippines 2011           4.994             8.6990\n1095              Philippines 2012           5.002             8.7480\n1096              Philippines 2013           4.977             8.7960\n1097              Philippines 2014           5.313             8.8420\n1098              Philippines 2015           5.547             8.8870\n1099              Philippines 2016           5.431             8.9380\n1100              Philippines 2017           5.594             8.9870\n1101              Philippines 2018           5.869             9.0320\n1102              Philippines 2019           6.268             9.0750\n1103              Philippines 2020           5.080             8.9580\n1104              Philippines 2021           5.965             8.9990\n1105                   Poland 2005           5.587             9.8440\n1106                   Poland 2007           5.886             9.9730\n1107                   Poland 2009           5.772            10.0410\n1108                   Poland 2010           5.887            10.0730\n1109                   Poland 2011           5.646            10.1220\n1110                   Poland 2012           5.876            10.1370\n1111                   Poland 2013           5.746            10.1460\n1112                   Poland 2014           5.750            10.1840\n1113                   Poland 2015           6.007            10.2280\n1114                   Poland 2016           6.162            10.2580\n1115                   Poland 2017           6.201            10.3080\n1116                   Poland 2018           6.111            10.3650\n1117                   Poland 2019           6.242            10.4090\n1118                   Poland 2020           6.139            10.3900\n1119                   Poland 2021           5.978            10.4610\n1120                   Poland 2022           6.666            10.5090\n1121                 Portugal 2006           5.405            10.3590\n1122                 Portugal 2008           5.717            10.3830\n1123                 Portugal 2010           5.095            10.3670\n1124                 Portugal 2011           5.220            10.3520\n1125                 Portugal 2012           4.994            10.3140\n1126                 Portugal 2013           5.158            10.3100\n1127                 Portugal 2014           5.127            10.3240\n1128                 Portugal 2015           5.081            10.3460\n1129                 Portugal 2016           5.447            10.3690\n1130                 Portugal 2017           5.711            10.4060\n1131                 Portugal 2018           5.920            10.4350\n1132                 Portugal 2019           6.095            10.4620\n1133                 Portugal 2020           5.768            10.3740\n1134                 Portugal 2021           6.183            10.4240\n1135                 Portugal 2022           5.953            10.4870\n1136                  Romania 2005           5.049             9.7330\n1137                  Romania 2007           5.394             9.9010\n1138                  Romania 2009           5.368             9.9580\n1139                  Romania 2010           4.909             9.9240\n1140                  Romania 2011           5.023             9.9730\n1141                  Romania 2012           5.167             9.9970\n1142                  Romania 2013           5.082            10.0030\n1143                  Romania 2014           5.727            10.0470\n1144                  Romania 2015           5.777            10.0830\n1145                  Romania 2016           5.969            10.1170\n1146                  Romania 2017           6.090            10.2020\n1147                  Romania 2018           6.151            10.2660\n1148                  Romania 2019           6.130            10.3090\n1149                  Romania 2020           6.785            10.2770\n1150                  Romania 2021           6.549            10.3350\n1151                  Romania 2022           6.437            10.4040\n1152                   Russia 2006           4.964             9.9880\n1153                   Russia 2007           5.223            10.0710\n1154                   Russia 2008           5.619            10.1220\n1155                   Russia 2009           5.158            10.0410\n1156                   Russia 2010           5.385            10.0840\n1157                   Russia 2011           5.389            10.1260\n1158                   Russia 2012           5.621            10.1630\n1159                   Russia 2013           5.537            10.1790\n1160                   Russia 2014           6.037            10.1680\n1161                   Russia 2015           5.996            10.1460\n1162                   Russia 2016           5.855            10.1460\n1163                   Russia 2017           5.579            10.1630\n1164                   Russia 2018           5.514            10.1910\n1165                   Russia 2019           5.441            10.2130\n1166                   Russia 2020           5.495            10.1880\n1167                   Russia 2021           5.448            10.2390\n1168                   Russia 2022           6.044            10.2030\n1169             Saudi Arabia 2005           7.080            10.6750\n1170             Saudi Arabia 2007           7.267            10.6420\n1171             Saudi Arabia 2008           6.811            10.6640\n1172             Saudi Arabia 2009           6.148            10.6060\n1173             Saudi Arabia 2010           6.307            10.6230\n1174             Saudi Arabia 2011           6.700            10.6930\n1175             Saudi Arabia 2012           6.396            10.7240\n1176             Saudi Arabia 2013           6.495            10.7290\n1177             Saudi Arabia 2014           6.278            10.7450\n1178             Saudi Arabia 2015           6.345            10.7660\n1179             Saudi Arabia 2016           6.474            10.7620\n1180             Saudi Arabia 2017           6.294            10.7320\n1181             Saudi Arabia 2018           6.356            10.7330\n1182             Saudi Arabia 2019           6.561            10.7130\n1183             Saudi Arabia 2020           6.560            10.6660\n1184             Saudi Arabia 2021           6.445            10.7000\n1185             Saudi Arabia 2022           6.382            10.7810\n1186                  Senegal 2006           4.417             7.9300\n1187                  Senegal 2007           4.680             7.9310\n1188                  Senegal 2008           4.683             7.9410\n1189                  Senegal 2009           4.335             7.9420\n1190                  Senegal 2010           4.372             7.9480\n1191                  Senegal 2011           3.834             7.9340\n1192                  Senegal 2012           3.669             7.9460\n1193                  Senegal 2013           3.647             7.9430\n1194                  Senegal 2014           4.395             7.9760\n1195                  Senegal 2015           4.617             8.0100\n1196                  Senegal 2016           4.595             8.0450\n1197                  Senegal 2017           4.683             8.0890\n1198                  Senegal 2018           4.769             8.1220\n1199                  Senegal 2019           5.489             8.1400\n1200                  Senegal 2020           4.757             8.1270\n1201                  Senegal 2021           4.903             8.1590\n1202                  Senegal 2022           4.907             8.1800\n1203                   Serbia 2007           4.750             9.5360\n1204                   Serbia 2009           4.380             9.5720\n1205                   Serbia 2010           4.461             9.5830\n1206                   Serbia 2011           4.815             9.6110\n1207                   Serbia 2012           5.155             9.6090\n1208                   Serbia 2013           5.102             9.6420\n1209                   Serbia 2014           5.113             9.6310\n1210                   Serbia 2015           5.318             9.6540\n1211                   Serbia 2016           5.753             9.6920\n1212                   Serbia 2017           5.122             9.7180\n1213                   Serbia 2018           5.936             9.7670\n1214                   Serbia 2019           6.241             9.8150\n1215                   Serbia 2020           6.042             9.8130\n1216                   Serbia 2021           6.245             9.8950\n1217                Singapore 2006           6.463            11.1670\n1218                Singapore 2007           6.834            11.2120\n1219                Singapore 2008           6.642            11.1770\n1220                Singapore 2009           6.145            11.1480\n1221                Singapore 2010           6.531            11.2660\n1222                Singapore 2011           6.561            11.3050\n1223                Singapore 2012           6.532            11.3680\n1224                Singapore 2013           6.533            11.3550\n1225                Singapore 2014           7.062            11.3810\n1226                Singapore 2015           6.620            11.3980\n1227                Singapore 2016           6.033            11.4200\n1228                Singapore 2017           6.378            11.4650\n1229                Singapore 2018           6.375            11.4960\n1230                Singapore 2019           6.378            11.4960\n1231                Singapore 2021           6.587            11.5710\n1232                 Slovakia 2006           5.265             9.9860\n1233                 Slovakia 2010           6.052            10.1490\n1234                 Slovakia 2011           5.945            10.1740\n1235                 Slovakia 2012           5.911            10.1850\n1236                 Slovakia 2013           5.937            10.1910\n1237                 Slovakia 2014           6.139            10.2160\n1238                 Slovakia 2015           6.162            10.2660\n1239                 Slovakia 2016           5.993            10.2840\n1240                 Slovakia 2017           6.366            10.3110\n1241                 Slovakia 2018           6.235            10.3490\n1242                 Slovakia 2019           6.243            10.3730\n1243                 Slovakia 2020           6.519            10.3370\n1244                 Slovakia 2021           6.419            10.3690\n1245                 Slovenia 2006           5.811            10.3990\n1246                 Slovenia 2009           5.830            10.4060\n1247                 Slovenia 2010           6.083            10.4150\n1248                 Slovenia 2011           6.036            10.4210\n1249                 Slovenia 2012           6.063            10.3920\n1250                 Slovenia 2013           5.975            10.3810\n1251                 Slovenia 2014           5.678            10.4070\n1252                 Slovenia 2015           5.741            10.4280\n1253                 Slovenia 2016           5.937            10.4590\n1254                 Slovenia 2017           6.167            10.5050\n1255                 Slovenia 2018           6.249            10.5450\n1256                 Slovenia 2019           6.665            10.5720\n1257                 Slovenia 2020           6.462            10.5210\n1258                 Slovenia 2021           6.761            10.5980\n1259                 Slovenia 2022           6.723            10.6440\n1260             South Africa 2006           5.084             9.4550\n1261             South Africa 2007           5.204             9.4970\n1262             South Africa 2008           5.346             9.5180\n1263             South Africa 2009           5.218             9.4900\n1264             South Africa 2010           4.652             9.5080\n1265             South Africa 2011           4.931             9.5270\n1266             South Africa 2012           5.134             9.5370\n1267             South Africa 2013           3.661             9.5480\n1268             South Africa 2014           4.828             9.5460\n1269             South Africa 2015           4.887             9.5390\n1270             South Africa 2016           4.770             9.5360\n1271             South Africa 2017           4.514             9.5430\n1272             South Africa 2018           4.884             9.5460\n1273             South Africa 2019           5.035             9.5360\n1274             South Africa 2020           4.947             9.4580\n1275             South Africa 2021           5.599             9.4960\n1276              South Korea 2006           5.332            10.3090\n1277              South Korea 2007           5.767            10.3600\n1278              South Korea 2008           5.390            10.3820\n1279              South Korea 2009           5.648            10.3850\n1280              South Korea 2010           6.116            10.4460\n1281              South Korea 2011           6.947            10.4740\n1282              South Korea 2012           6.003            10.4930\n1283              South Korea 2013           5.959            10.5190\n1284              South Korea 2014           5.801            10.5440\n1285              South Korea 2015           5.780            10.5670\n1286              South Korea 2016           5.971            10.5920\n1287              South Korea 2017           5.874            10.6200\n1288              South Korea 2018           5.840            10.6450\n1289              South Korea 2019           5.903            10.6630\n1290              South Korea 2020           5.793            10.6550\n1291              South Korea 2021           6.113            10.6970\n1292              South Korea 2022           5.950            10.7260\n1293                    Spain 2005           7.153            10.5440\n1294                    Spain 2007           6.995            10.5840\n1295                    Spain 2008           7.294            10.5770\n1296                    Spain 2009           6.199            10.5300\n1297                    Spain 2010           6.188            10.5270\n1298                    Spain 2011           6.518            10.5150\n1299                    Spain 2012           6.291            10.4840\n1300                    Spain 2013           6.150            10.4730\n1301                    Spain 2014           6.456            10.4900\n1302                    Spain 2015           6.381            10.5290\n1303                    Spain 2016           6.319            10.5580\n1304                    Spain 2017           6.230            10.5850\n1305                    Spain 2018           6.513            10.6030\n1306                    Spain 2019           6.457            10.6150\n1307                    Spain 2020           6.502            10.4900\n1308                    Spain 2021           6.470            10.5430\n1309                    Spain 2022           6.337            10.5870\n1310       State of Palestine 2006           4.716             8.2010\n1311       State of Palestine 2007           4.151             8.1810\n1312       State of Palestine 2008           4.386             8.2750\n1313       State of Palestine 2009           4.470             8.3370\n1314       State of Palestine 2010           4.703             8.3630\n1315       State of Palestine 2011           4.751             8.4520\n1316       State of Palestine 2012           4.647             8.5980\n1317       State of Palestine 2013           4.844             8.5950\n1318       State of Palestine 2014           4.722             8.6180\n1319       State of Palestine 2015           4.695             8.6830\n1320       State of Palestine 2016           4.907             8.7380\n1321       State of Palestine 2017           4.628             8.7340\n1322       State of Palestine 2018           4.554             8.7180\n1323       State of Palestine 2019           4.483             8.7160\n1324       State of Palestine 2022           4.908             8.5965\n1325                   Sweden 2005           7.376            10.7240\n1326                   Sweden 2007           7.241            10.7910\n1327                   Sweden 2008           7.516            10.7780\n1328                   Sweden 2009           7.266            10.7250\n1329                   Sweden 2010           7.496            10.7750\n1330                   Sweden 2011           7.382            10.7990\n1331                   Sweden 2012           7.560            10.7850\n1332                   Sweden 2013           7.434            10.7890\n1333                   Sweden 2014           7.239            10.8050\n1334                   Sweden 2015           7.289            10.8380\n1335                   Sweden 2016           7.369            10.8460\n1336                   Sweden 2017           7.287            10.8580\n1337                   Sweden 2018           7.375            10.8660\n1338                   Sweden 2019           7.398            10.8750\n1339                   Sweden 2020           7.314            10.8460\n1340                   Sweden 2021           7.439            10.8900\n1341                   Sweden 2022           7.431            10.9130\n1342 Taiwan Province of China 2006           6.189            10.6020\n1343 Taiwan Province of China 2008           5.548            10.6000\n1344 Taiwan Province of China 2010           6.229            10.6810\n1345 Taiwan Province of China 2011           6.309            10.6930\n1346 Taiwan Province of China 2012           6.126            10.7180\n1347 Taiwan Province of China 2013           6.340            10.7240\n1348 Taiwan Province of China 2014           6.363            10.7490\n1349 Taiwan Province of China 2015           6.450            10.7790\n1350 Taiwan Province of China 2016           6.513            10.7680\n1351 Taiwan Province of China 2017           6.359            10.7740\n1352 Taiwan Province of China 2018           6.467            10.7810\n1353 Taiwan Province of China 2019           6.537            10.7970\n1354 Taiwan Province of China 2020           6.751            10.7365\n1355 Taiwan Province of China 2021           6.247            10.7365\n1356 Taiwan Province of China 2022           6.607            10.7365\n1357               Tajikistan 2006           4.613             7.5910\n1358               Tajikistan 2007           4.432             7.6480\n1359               Tajikistan 2008           5.064             7.7050\n1360               Tajikistan 2009           4.575             7.7240\n1361               Tajikistan 2010           4.381             7.7660\n1362               Tajikistan 2011           4.263             7.8170\n1363               Tajikistan 2012           4.497             7.8670\n1364               Tajikistan 2013           4.967             7.9160\n1365               Tajikistan 2014           4.896             7.9580\n1366               Tajikistan 2015           5.124             7.9930\n1367               Tajikistan 2016           5.104             8.0360\n1368               Tajikistan 2017           5.829             8.0820\n1369               Tajikistan 2018           5.497             8.1330\n1370               Tajikistan 2019           5.464             8.1820\n1371               Tajikistan 2020           5.373             8.2030\n1372               Tajikistan 2021           5.287             8.2700\n1373                 Tanzania 2006           3.922             7.4600\n1374                 Tanzania 2007           4.318             7.4970\n1375                 Tanzania 2008           4.385             7.5250\n1376                 Tanzania 2009           3.408             7.5520\n1377                 Tanzania 2010           3.229             7.5870\n1378                 Tanzania 2011           4.074             7.6330\n1379                 Tanzania 2012           4.007             7.6480\n1380                 Tanzania 2013           3.852             7.6830\n1381                 Tanzania 2014           3.483             7.7170\n1382                 Tanzania 2015           3.661             7.7440\n1383                 Tanzania 2016           2.903             7.7750\n1384                 Tanzania 2017           3.347             7.8070\n1385                 Tanzania 2018           3.445             7.8280\n1386                 Tanzania 2019           3.640             7.8550\n1387                 Tanzania 2020           3.786             7.8440\n1388                 Tanzania 2021           3.681             7.8560\n1389                 Tanzania 2022           3.616             7.8720\n1390                 Thailand 2006           5.885             9.4520\n1391                 Thailand 2007           5.784             9.4980\n1392                 Thailand 2008           5.636             9.5070\n1393                 Thailand 2009           5.476             9.4930\n1394                 Thailand 2010           6.217             9.5590\n1395                 Thailand 2011           6.664             9.5610\n1396                 Thailand 2012           6.300             9.6240\n1397                 Thailand 2013           6.231             9.6450\n1398                 Thailand 2014           6.985             9.6490\n1399                 Thailand 2015           6.202             9.6750\n1400                 Thailand 2016           6.074             9.7050\n1401                 Thailand 2017           5.939             9.7410\n1402                 Thailand 2018           6.012             9.7800\n1403                 Thailand 2019           6.022             9.7980\n1404                 Thailand 2020           5.885             9.7320\n1405                 Thailand 2021           5.638             9.7450\n1406                 Thailand 2022           6.007             9.7770\n1407                  Tunisia 2009           5.025             9.2380\n1408                  Tunisia 2010           5.131             9.2570\n1409                  Tunisia 2011           4.876             9.2240\n1410                  Tunisia 2012           4.464             9.2520\n1411                  Tunisia 2013           5.246             9.2650\n1412                  Tunisia 2014           4.764             9.2840\n1413                  Tunisia 2015           5.132             9.2830\n1414                  Tunisia 2016           4.521             9.2830\n1415                  Tunisia 2017           4.124             9.2940\n1416                  Tunisia 2018           4.741             9.3100\n1417                  Tunisia 2019           4.315             9.3150\n1418                  Tunisia 2020           4.731             9.2150\n1419                  Tunisia 2021           4.499             9.2490\n1420                  Tunisia 2022           4.261             9.2660\n1421                  Turkiye 2005           4.719             9.8000\n1422                  Turkiye 2007           5.623             9.8910\n1423                  Turkiye 2008           5.118             9.8870\n1424                  Turkiye 2009           5.213             9.8250\n1425                  Turkiye 2010           5.490             9.8930\n1426                  Turkiye 2011           5.272             9.9860\n1427                  Turkiye 2012           5.309            10.0180\n1428                  Turkiye 2013           4.888            10.0820\n1429                  Turkiye 2014           5.580            10.1110\n1430                  Turkiye 2015           5.514            10.1500\n1431                  Turkiye 2016           5.326            10.1660\n1432                  Turkiye 2017           5.607            10.2250\n1433                  Turkiye 2018           5.186            10.2460\n1434                  Turkiye 2019           4.872            10.2450\n1435                  Turkiye 2020           4.862            10.2570\n1436                  Turkiye 2021           4.367            10.3570\n1437                   Uganda 2006           3.734             7.3700\n1438                   Uganda 2007           4.456             7.4220\n1439                   Uganda 2008           4.569             7.4760\n1440                   Uganda 2009           4.612             7.5130\n1441                   Uganda 2010           4.193             7.5380\n1442                   Uganda 2011           4.826             7.5990\n1443                   Uganda 2012           4.309             7.6080\n1444                   Uganda 2013           3.710             7.6140\n1445                   Uganda 2014           3.770             7.6340\n1446                   Uganda 2015           4.238             7.6540\n1447                   Uganda 2016           4.233             7.6670\n1448                   Uganda 2017           4.001             7.6630\n1449                   Uganda 2018           4.322             7.6900\n1450                   Uganda 2019           4.948             7.7190\n1451                   Uganda 2020           4.641             7.7140\n1452                   Uganda 2021           4.225             7.7170\n1453                  Ukraine 2006           4.804             9.4140\n1454                  Ukraine 2007           5.252             9.4990\n1455                  Ukraine 2008           5.172             9.5270\n1456                  Ukraine 2009           5.166             9.3670\n1457                  Ukraine 2010           5.058             9.4110\n1458                  Ukraine 2011           5.083             9.4680\n1459                  Ukraine 2012           5.030             9.4720\n1460                  Ukraine 2013           4.711             9.4740\n1461                  Ukraine 2014           4.297             9.4240\n1462                  Ukraine 2015           3.965             9.3250\n1463                  Ukraine 2016           4.029             9.3530\n1464                  Ukraine 2017           4.311             9.3810\n1465                  Ukraine 2018           4.662             9.4200\n1466                  Ukraine 2019           4.702             9.4580\n1467                  Ukraine 2020           5.270             9.4260\n1468                  Ukraine 2021           5.311             9.4680\n1469                  Ukraine 2022           4.637             9.0490\n1470     United Arab Emirates 2006           6.734            11.4330\n1471     United Arab Emirates 2009           6.866            10.9520\n1472     United Arab Emirates 2010           7.097            10.9090\n1473     United Arab Emirates 2011           7.119            10.9650\n1474     United Arab Emirates 2012           7.218            11.0010\n1475     United Arab Emirates 2013           6.621            11.0410\n1476     United Arab Emirates 2014           6.540            11.0720\n1477     United Arab Emirates 2015           6.568            11.1280\n1478     United Arab Emirates 2016           6.831            11.1740\n1479     United Arab Emirates 2017           7.039            11.1730\n1480     United Arab Emirates 2018           6.604            11.1780\n1481     United Arab Emirates 2019           6.711            11.1810\n1482     United Arab Emirates 2020           6.458            11.1220\n1483     United Arab Emirates 2021           6.733            11.1520\n1484     United Arab Emirates 2022           6.738            11.2020\n1485           United Kingdom 2005           6.984            10.6670\n1486           United Kingdom 2007           6.802            10.6990\n1487           United Kingdom 2008           6.986            10.6890\n1488           United Kingdom 2009           6.907            10.6360\n1489           United Kingdom 2010           7.029            10.6520\n1490           United Kingdom 2011           6.869            10.6550\n1491           United Kingdom 2012           6.881            10.6620\n1492           United Kingdom 2013           6.918            10.6730\n1493           United Kingdom 2014           6.758            10.6980\n1494           United Kingdom 2015           6.515            10.7130\n1495           United Kingdom 2016           6.824            10.7270\n1496           United Kingdom 2017           7.103            10.7440\n1497           United Kingdom 2018           7.233            10.7550\n1498           United Kingdom 2019           7.157            10.7660\n1499           United Kingdom 2020           6.798            10.6450\n1500           United Kingdom 2021           6.867            10.7140\n1501           United Kingdom 2022           6.722            10.7540\n1502            United States 2006           7.182            10.9210\n1503            United States 2007           7.513            10.9310\n1504            United States 2008           7.280            10.9230\n1505            United States 2009           7.158            10.8880\n1506            United States 2010           7.164            10.9060\n1507            United States 2011           7.115            10.9140\n1508            United States 2012           7.026            10.9300\n1509            United States 2013           7.249            10.9410\n1510            United States 2014           7.151            10.9560\n1511            United States 2015           6.864            10.9760\n1512            United States 2016           6.804            10.9850\n1513            United States 2017           6.992            11.0010\n1514            United States 2018           6.883            11.0240\n1515            United States 2019           6.944            11.0430\n1516            United States 2020           7.028            11.0050\n1517            United States 2021           6.959            11.0610\n1518            United States 2022           6.693            11.0790\n1519                  Uruguay 2006           5.786             9.6290\n1520                  Uruguay 2007           5.694             9.6910\n1521                  Uruguay 2008           5.664             9.7580\n1522                  Uruguay 2009           6.296             9.7970\n1523                  Uruguay 2010           6.062             9.8700\n1524                  Uruguay 2011           6.554             9.9170\n1525                  Uruguay 2012           6.450             9.9490\n1526                  Uruguay 2013           6.444             9.9910\n1527                  Uruguay 2014           6.561            10.0200\n1528                  Uruguay 2015           6.628            10.0210\n1529                  Uruguay 2016           6.171            10.0340\n1530                  Uruguay 2017           6.336            10.0480\n1531                  Uruguay 2018           6.372            10.0510\n1532                  Uruguay 2019           6.600            10.0540\n1533                  Uruguay 2020           6.310             9.9910\n1534                  Uruguay 2021           6.502            10.0350\n1535                  Uruguay 2022           6.671            10.0840\n1536               Uzbekistan 2006           5.232             8.2560\n1537               Uzbekistan 2008           5.311             8.4020\n1538               Uzbekistan 2009           5.261             8.4630\n1539               Uzbekistan 2010           5.095             8.5080\n1540               Uzbekistan 2011           5.739             8.5540\n1541               Uzbekistan 2012           6.019             8.6080\n1542               Uzbekistan 2013           5.940             8.6620\n1543               Uzbekistan 2014           6.049             8.7120\n1544               Uzbekistan 2015           5.972             8.7640\n1545               Uzbekistan 2016           5.893             8.8040\n1546               Uzbekistan 2017           6.421             8.8310\n1547               Uzbekistan 2018           6.205             8.8650\n1548               Uzbekistan 2019           6.154             8.9020\n1549               Uzbekistan 2020           5.842             8.9020\n1550               Uzbekistan 2021           6.185             8.9530\n1551               Uzbekistan 2022           6.016             8.9900\n1552                Venezuela 2005           7.170             9.3160\n1553                Venezuela 2006           6.525             9.4670\n1554                Venezuela 2008           6.258             9.7190\n1555                Venezuela 2009           7.189             9.5670\n1556                Venezuela 2010           7.478             9.7480\n1557                Venezuela 2011           6.580             9.8590\n1558                Venezuela 2012           7.067             9.8620\n1559                Venezuela 2013           6.553             9.8020\n1560                Venezuela 2014           6.136             9.3660\n1561                Venezuela 2015           5.569             8.5320\n1562                Venezuela 2016           4.041             7.6020\n1563                Venezuela 2017           5.071             5.9430\n1564                Venezuela 2018           5.006             5.9350\n1565                Venezuela 2019           5.081             5.5270\n1566                Venezuela 2020           4.574             9.4165\n1567                Venezuela 2021           5.108             9.4165\n1568                Venezuela 2022           5.949             9.4165\n1569                  Vietnam 2006           5.294             8.5540\n1570                  Vietnam 2007           5.422             8.6130\n1571                  Vietnam 2008           5.480             8.6580\n1572                  Vietnam 2009           5.304             8.7010\n1573                  Vietnam 2010           5.296             8.7520\n1574                  Vietnam 2011           5.767             8.8040\n1575                  Vietnam 2012           5.535             8.8470\n1576                  Vietnam 2013           5.023             8.8900\n1577                  Vietnam 2014           5.085             8.9410\n1578                  Vietnam 2015           5.076             8.9990\n1579                  Vietnam 2016           5.062             9.0530\n1580                  Vietnam 2017           5.175             9.1110\n1581                  Vietnam 2018           5.296             9.1730\n1582                  Vietnam 2019           5.467             9.2350\n1583                  Vietnam 2020           5.462             9.2540\n1584                  Vietnam 2021           5.540             9.2710\n1585                  Vietnam 2022           6.267             9.3330\n1586                    Yemen 2007           4.477             8.2120\n1587                    Yemen 2009           4.809             8.2500\n1588                    Yemen 2010           4.350             8.4140\n1589                    Yemen 2011           3.746             8.2640\n1590                    Yemen 2012           4.061             8.1790\n1591                    Yemen 2013           4.218             8.1660\n1592                    Yemen 2014           3.968             8.1590\n1593                    Yemen 2015           2.983             7.7720\n1594                    Yemen 2016           3.826             7.5520\n1595                    Yemen 2017           3.254             7.2430\n1596                    Yemen 2018           3.058             7.4440\n1597                    Yemen 2019           4.197             7.4480\n1598                 Zimbabwe 2006           3.826             7.4600\n1599                 Zimbabwe 2007           3.280             7.4130\n1600                 Zimbabwe 2008           3.174             7.2100\n1601                 Zimbabwe 2009           4.056             7.3130\n1602                 Zimbabwe 2010           4.682             7.4950\n1603                 Zimbabwe 2011           4.846             7.6170\n1604                 Zimbabwe 2012           4.955             7.7450\n1605                 Zimbabwe 2013           4.690             7.7550\n1606                 Zimbabwe 2014           4.184             7.7480\n1607                 Zimbabwe 2015           3.703             7.7470\n1608                 Zimbabwe 2016           3.735             7.7350\n1609                 Zimbabwe 2017           3.638             7.7540\n1610                 Zimbabwe 2018           3.616             7.7830\n1611                 Zimbabwe 2019           2.694             7.6980\n1612                 Zimbabwe 2020           3.160             7.5960\n1613                 Zimbabwe 2021           3.155             7.6570\n1614                 Zimbabwe 2022           3.296             7.6700\n     Social.Support Healthy.Life.Expectancy Freedom Generosity\n1            0.4510                  50.500  0.7180     0.1680\n2            0.5520                  50.800  0.6790     0.1910\n3            0.5390                  51.100  0.6000     0.1210\n4            0.5210                  51.400  0.4960     0.1640\n5            0.5210                  51.700  0.5310     0.2380\n6            0.4840                  52.000  0.5780     0.0630\n7            0.5260                  52.300  0.5090     0.1060\n8            0.5290                  52.600  0.3890     0.0820\n9            0.5590                  52.925  0.5230     0.0440\n10           0.4910                  53.250  0.4270    -0.1190\n11           0.5080                  53.575  0.3740    -0.0910\n12           0.4200                  53.900  0.3940    -0.1060\n13           0.4540                  54.550  0.3940    -0.0810\n14           0.2280                  54.875  0.3680     0.0820\n15           0.8210                  66.760  0.5290    -0.0100\n16           0.8330                  67.320  0.5250    -0.1590\n17           0.7330                  67.600  0.5690    -0.1740\n18           0.7590                  67.880  0.4870    -0.2060\n19           0.7850                  68.160  0.6020    -0.1700\n20           0.7590                  68.440  0.6320    -0.1290\n21           0.6260                  68.720  0.7350    -0.0260\n22           0.6390                  69.000  0.7040    -0.0820\n23           0.6380                  69.025  0.7300    -0.0190\n24           0.6380                  69.050  0.7500    -0.0310\n25           0.6840                  69.075  0.8240     0.0070\n26           0.6860                  69.100  0.7770    -0.1010\n27           0.7100                  69.125  0.7540     0.0040\n28           0.7020                  69.150  0.8270     0.0410\n29           0.7240                  69.175  0.8020    -0.0660\n30           0.9380                  65.820  0.7330    -0.1600\n31           0.8620                  65.940  0.6530    -0.1440\n32           0.8920                  66.060  0.6780    -0.1350\n33           0.9190                  66.180  0.6370    -0.1330\n34           0.9270                  66.300  0.7300    -0.1290\n35           0.8890                  66.420  0.8160    -0.1780\n36           0.9020                  66.540  0.7470    -0.1510\n37           0.9100                  66.660  0.7370    -0.1340\n38           0.9180                  66.780  0.7450    -0.1680\n39           0.9260                  66.900  0.8810    -0.1780\n40           0.8830                  66.950  0.8480    -0.1950\n41           0.9070                  67.000  0.8320    -0.1900\n42           0.9000                  67.050  0.8460    -0.2140\n43           0.8960                  67.100  0.8170    -0.2140\n44           0.8970                  67.150  0.8230    -0.1290\n45           0.8820                  67.200  0.8190    -0.0120\n46           0.8930                  67.250  0.8250    -0.1280\n47           0.6820                  63.840  0.5200    -0.2320\n48           0.7600                  64.080  0.6050    -0.2520\n49           0.7090                  64.320  0.4620    -0.2160\n50           0.6800                  64.560  0.4410    -0.2150\n51           0.6600                  64.800  0.4590    -0.1770\n52           0.7050                  65.040  0.4650    -0.2270\n53           0.6760                  65.280  0.5020    -0.2170\n54           0.7230                  65.520  0.5040    -0.1980\n55           0.7390                  65.760  0.5060    -0.2220\n56           0.7230                  66.000  0.5510    -0.2070\n57           0.7090                  66.275  0.6110    -0.1750\n58           0.6980                  66.550  0.6140    -0.1520\n59           0.8140                  66.825  0.8080    -0.1690\n60           0.7820                  67.100  0.8440    -0.1790\n61           0.7620                  67.650  0.7950    -0.1560\n62           0.8110                  67.925  0.7900    -0.1540\n63           0.9680                  69.800  0.9350     0.2700\n64           0.9650                  69.960  0.8910     0.3430\n65           0.9470                  70.040  0.9160     0.3020\n66           0.9550                  70.200  0.9320     0.3130\n67           0.9670                  70.280  0.9450     0.3660\n68           0.9450                  70.360  0.9350     0.2700\n69           0.9280                  70.440  0.9330     0.2650\n70           0.9240                  70.520  0.9230     0.3150\n71           0.9520                  70.600  0.9220     0.3280\n72           0.9420                  70.675  0.9220     0.2350\n73           0.9500                  70.750  0.9110     0.3140\n74           0.9400                  70.825  0.9160     0.1430\n75           0.9430                  70.900  0.9180     0.1170\n76           0.9370                  70.975  0.9050     0.2030\n77           0.9200                  71.050  0.9120     0.2360\n78           0.9420                  71.125  0.8540     0.1530\n79           0.9360                  69.500  0.9410     0.2980\n80           0.9350                  69.700  0.8790     0.2870\n81           0.9140                  69.900  0.8960     0.1270\n82           0.9440                  70.000  0.9390     0.1280\n83           0.9450                  70.100  0.9200     0.1140\n84           0.9500                  70.200  0.9220     0.1640\n85           0.8990                  70.300  0.8850     0.1140\n86           0.9280                  70.400  0.9000     0.0950\n87           0.9260                  70.525  0.8890     0.0760\n88           0.9060                  70.650  0.8900     0.1290\n89           0.9120                  70.775  0.9040     0.0500\n90           0.9640                  70.900  0.9030     0.0560\n91           0.9250                  71.025  0.9120     0.0060\n92           0.8630                  71.150  0.7950     0.1590\n93           0.8760                  71.275  0.8560     0.1390\n94           0.8540                  60.580  0.7720    -0.2370\n95           0.7530                  60.860  0.5220    -0.2090\n96           0.6840                  61.140  0.6010    -0.0310\n97           0.7360                  61.420  0.4980    -0.0890\n98           0.6870                  61.700  0.5010    -0.1250\n99           0.7250                  61.980  0.5370    -0.1080\n100          0.7620                  62.260  0.5990    -0.1430\n101          0.7700                  62.540  0.6720    -0.1710\n102          0.7990                  62.820  0.7330    -0.2110\n103          0.7860                  63.100  0.7640    -0.2010\n104          0.7770                  63.225  0.7130    -0.2070\n105          0.7870                  63.350  0.7310    -0.2280\n106          0.7810                  63.475  0.7720    -0.2350\n107          0.8870                  63.600  0.8540    -0.2180\n108          0.6720                  59.120  0.6120     0.0550\n109          0.5140                  59.640  0.6050     0.0270\n110          0.4670                  60.160  0.6060    -0.0570\n111          0.5280                  60.680  0.6310    -0.0880\n112          0.5490                  61.200  0.6590    -0.0300\n113          0.6060                  61.720  0.8380    -0.0830\n114          0.5820                  62.240  0.6680    -0.0480\n115          0.5300                  62.760  0.7420    -0.0290\n116          0.5770                  63.280  0.7360    -0.1120\n117          0.6010                  63.800  0.8150    -0.0820\n118          0.6490                  63.925  0.8750    -0.1020\n119          0.7130                  64.050  0.8960    -0.0010\n120          0.7060                  64.175  0.9010    -0.0560\n121          0.6730                  64.300  0.9020    -0.0640\n122          0.7390                  64.425  0.7770    -0.0230\n123          0.4850                  64.550  0.8930     0.0920\n124          0.4040                  64.675  0.8650    -0.0550\n125          0.9180                  60.060  0.7070    -0.2490\n126          0.8580                  60.620  0.6670    -0.2280\n127          0.9040                  61.180  0.6400    -0.2230\n128          0.9080                  61.740  0.6790    -0.2060\n129          0.9180                  62.300  0.7000    -0.1660\n130          0.9100                  62.860  0.6560    -0.1710\n131          0.9020                  63.420  0.6450    -0.2210\n132          0.9230                  63.980  0.7230    -0.1810\n133          0.8800                  64.540  0.6470    -0.0520\n134          0.9240                  65.100  0.6230    -0.0950\n135          0.9270                  65.325  0.6580    -0.1290\n136          0.9000                  65.550  0.6210    -0.1250\n137          0.9050                  65.775  0.6440    -0.1780\n138          0.9170                  66.000  0.6570    -0.1900\n139          0.9350                  68.400  0.9240     0.0030\n140          0.9220                  68.720  0.9010     0.0650\n141          0.9230                  68.880  0.8870     0.0030\n142          0.9310                  69.200  0.8070     0.0180\n143          0.9370                  69.360  0.8800    -0.0180\n144          0.9270                  69.520  0.8550    -0.0540\n145          0.9090                  69.680  0.8910     0.0120\n146          0.9440                  69.840  0.8610    -0.0030\n147          0.8850                  70.000  0.8690     0.0580\n148          0.9290                  70.150  0.8660    -0.0600\n149          0.9220                  70.300  0.8570     0.0500\n150          0.9300                  70.450  0.8080    -0.1290\n151          0.8840                  70.600  0.7760    -0.1760\n152          0.9040                  70.750  0.7670    -0.1700\n153          0.9150                  70.900  0.8230     0.0790\n154          0.9230                  71.050  0.8900     0.0970\n155          0.8340                  60.900  0.7700    -0.0460\n156          0.7960                  61.100  0.7800    -0.0010\n157          0.7850                  61.300  0.7260    -0.0930\n158          0.8310                  61.500  0.7790    -0.0370\n159          0.8070                  61.700  0.7030    -0.0700\n160          0.8170                  61.900  0.7820    -0.0410\n161          0.7810                  62.100  0.8620    -0.0160\n162          0.8030                  62.300  0.8460    -0.0680\n163          0.8210                  62.500  0.8810     0.0170\n164          0.8290                  62.700  0.8840    -0.0310\n165          0.7960                  62.850  0.8820    -0.0480\n166          0.7790                  63.000  0.8840    -0.1220\n167          0.8270                  63.150  0.8630    -0.0940\n168          0.7840                  63.300  0.8810    -0.0870\n169          0.8050                  63.450  0.8770    -0.0530\n170          0.7980                  63.600  0.8620    -0.0550\n171          0.8240                  63.750  0.8650    -0.0800\n172          0.7660                  67.000  0.3420     0.0080\n173          0.7350                  67.000  0.2580    -0.0250\n174          0.7730                  67.000  0.3650    -0.1280\n175          0.7250                  67.000  0.3330    -0.0350\n176          0.7790                  67.000  0.4200    -0.0130\n177          0.7670                  67.000  0.3900     0.0410\n178          0.7880                  67.000  0.4120     0.2310\n179          0.6560                  67.000  0.6310    -0.0550\n180          0.8080                  67.050  0.6330     0.1340\n181          0.7750                  67.100  0.5640     0.0910\n182          0.8360                  67.150  0.6590     0.1220\n183          0.8730                  67.200  0.7220     0.0770\n184          0.8990                  67.250  0.7400     0.1350\n185          0.8600                  67.300  0.7590     0.2770\n186          0.8830                  48.840  0.8240    -0.1980\n187          0.8320                  49.720  0.8580    -0.1640\n188          0.8660                  50.600  0.8260    -0.1380\n189          0.8600                  51.040  0.8130    -0.2450\n190          0.8370                  51.480  0.7990    -0.1950\n191          0.8560                  51.920  0.7670    -0.1450\n192          0.8590                  52.360  0.7910    -0.0970\n193          0.8160                  52.800  0.8570    -0.1050\n194          0.7680                  53.075  0.8520    -0.2440\n195          0.7680                  53.350  0.8170    -0.2400\n196          0.7950                  53.625  0.8180    -0.2460\n197          0.7740                  53.900  0.8330    -0.2310\n198          0.7500                  54.725  0.7390    -0.2150\n199          0.8830                  63.100  0.8820    -0.0650\n200          0.8860                  63.420  0.7770    -0.0190\n201          0.8780                  63.580  0.7820    -0.0810\n202          0.9130                  63.740  0.7670    -0.0580\n203          0.9060                  63.900  0.8060    -0.0570\n204          0.9160                  64.060  0.8340    -0.0750\n205          0.8900                  64.220  0.8490    -0.0650\n206          0.9100                  64.380  0.7850    -0.0980\n207          0.8980                  64.540  0.7140    -0.1180\n208          0.9070                  64.700  0.7990    -0.0190\n209          0.9120                  64.875  0.8070    -0.1030\n210          0.9050                  65.050  0.7650    -0.1780\n211          0.8820                  65.225  0.7510    -0.1200\n212          0.8990                  65.400  0.8300    -0.0650\n213          0.8310                  65.575  0.7860    -0.0580\n214          0.8140                  65.750  0.7920     0.0890\n215          0.8660                  65.925  0.8300    -0.0610\n216          0.8320                  64.780  0.5660    -0.1430\n217          0.8430                  65.200  0.5450    -0.1510\n218          0.8600                  65.340  0.6640    -0.2340\n219          0.8380                  65.480  0.6410    -0.1790\n220          0.8290                  65.620  0.6030    -0.1970\n221          0.8860                  65.760  0.5760    -0.0600\n222          0.9080                  65.900  0.6370    -0.2050\n223          0.9260                  66.000  0.7000    -0.1750\n224          0.9420                  66.100  0.6890    -0.1580\n225          0.9240                  66.200  0.7240    -0.1800\n226          0.9480                  66.300  0.8220    -0.1130\n227          0.9160                  66.400  0.8180    -0.0100\n228          0.8840                  66.500  0.8410    -0.0160\n229          0.9530                  66.600  0.7410    -0.1450\n230          0.7960                  49.440  0.5880     0.0300\n231          0.7710                  49.880  0.5820    -0.0590\n232          0.7270                  50.320  0.6120    -0.0990\n233          0.7730                  51.200  0.5870    -0.0350\n234          0.7100                  51.640  0.7250    -0.1030\n235          0.7440                  52.080  0.6220    -0.0680\n236          0.7450                  52.520  0.7410    -0.0150\n237          0.7420                  52.960  0.7100    -0.0030\n238          0.7050                  53.400  0.6590     0.0050\n239          0.7640                  53.775  0.6450     0.0010\n240          0.7850                  54.150  0.6140    -0.0620\n241          0.6650                  54.525  0.7210    -0.0120\n242          0.6830                  54.900  0.6780    -0.0030\n243          0.6680                  55.275  0.7500     0.1230\n244          0.6580                  55.650  0.6440     0.0670\n245          0.7930                  57.640  0.9510     0.2530\n246          0.6750                  57.980  0.8190     0.1140\n247          0.6190                  58.320  0.9140     0.0440\n248          0.8180                  58.660  0.9370     0.1510\n249          0.6970                  59.000  0.9400     0.3480\n250          0.7160                  59.340  0.9270     0.4170\n251          0.6060                  59.680  0.9560     0.2450\n252          0.6510                  60.020  0.9410     0.1620\n253          0.6930                  60.360  0.9380     0.2370\n254          0.7290                  60.700  0.9560     0.2080\n255          0.7460                  60.900  0.9580     0.0730\n256          0.7650                  61.100  0.9640     0.0850\n257          0.7950                  61.300  0.9580     0.0320\n258          0.7590                  61.500  0.9570     0.0100\n259          0.7240                  61.700  0.9630     0.0500\n260          0.7130                  61.900  0.9650     0.0150\n261          0.7840                  62.100  0.9460     0.1540\n262          0.6900                  47.840  0.6530    -0.0170\n263          0.7170                  48.280  0.6440    -0.0390\n264          0.6970                  48.720  0.5800    -0.0760\n265          0.7290                  49.160  0.6980    -0.0240\n266          0.7590                  49.600  0.7920    -0.0040\n267          0.7380                  50.040  0.8170    -0.0350\n268          0.7430                  50.480  0.7660    -0.0380\n269          0.7600                  50.920  0.7940    -0.0360\n270          0.7780                  51.360  0.7950    -0.0770\n271          0.6460                  51.800  0.7910     0.0440\n272          0.6590                  52.475  0.7130    -0.0080\n273          0.6950                  53.150  0.7670    -0.0330\n274          0.6770                  53.825  0.8160     0.0310\n275          0.7110                  54.500  0.7120    -0.0120\n276          0.7200                  55.175  0.6750     0.0450\n277          0.6950                  55.850  0.7150    -0.0260\n278          0.6290                  56.525  0.6750     0.0250\n279          0.9620                  70.500  0.9570     0.2480\n280          0.9325                  70.620  0.9300     0.2460\n281          0.9390                  70.680  0.9260     0.2580\n282          0.9430                  70.740  0.9150     0.2420\n283          0.9540                  70.800  0.9340     0.2270\n284          0.9220                  70.860  0.9510     0.2490\n285          0.9480                  70.920  0.9180     0.2860\n286          0.9360                  70.980  0.9160     0.3120\n287          0.9180                  71.040  0.9390     0.2660\n288          0.9390                  71.100  0.9310     0.2490\n289          0.9240                  71.150  0.9120     0.2070\n290          0.9340                  71.200  0.9450     0.1590\n291          0.9230                  71.250  0.9460     0.1020\n292          0.9250                  71.300  0.9120     0.1070\n293          0.9310                  71.350  0.8870     0.0450\n294          0.9260                  71.400  0.8980     0.1910\n295          0.9290                  71.450  0.8380     0.2220\n296          0.7240                  47.080  0.3060     0.0260\n297          0.4790                  47.460  0.2950    -0.0130\n298          0.5710                  47.840  0.5270     0.0610\n299          0.6460                  48.220  0.4010     0.0200\n300          0.7340                  48.600  0.5050     0.0230\n301          0.8190                  48.980  0.5400     0.0290\n302          0.6730                  49.360  0.5630    -0.0360\n303          0.7140                  49.740  0.4880    -0.0470\n304          0.7330                  50.120  0.5670    -0.0710\n305          0.7510                  50.500  0.4740    -0.0300\n306          0.6160                  50.875  0.5250     0.0510\n307          0.6610                  51.250  0.6150     0.0070\n308          0.5770                  51.625  0.6500     0.0230\n309          0.6400                  52.000  0.5370     0.0540\n310          0.7200                  53.125  0.6790     0.2210\n311          0.8360                  67.780  0.7440     0.1630\n312          0.8150                  67.960  0.6620     0.2390\n313          0.8040                  68.140  0.6400     0.0780\n314          0.8320                  68.320  0.7470     0.1430\n315          0.8570                  68.500  0.7860     0.1020\n316          0.8190                  68.680  0.7010     0.1060\n317          0.8550                  68.860  0.7340     0.1890\n318          0.8620                  69.040  0.7370     0.0790\n319          0.8620                  69.220  0.7330     0.2110\n320          0.8270                  69.400  0.7690     0.0340\n321          0.8410                  69.550  0.6520     0.0960\n322          0.8800                  69.700  0.7900    -0.0260\n323          0.8900                  69.850  0.7890    -0.0660\n324          0.8690                  70.000  0.6590    -0.1080\n325          0.8880                  70.150  0.7810     0.0280\n326          0.8910                  70.300  0.8030    -0.0500\n327          0.8870                  70.450  0.7930    -0.0110\n328          0.9100                  66.320  0.8050    -0.0180\n329          0.8940                  66.540  0.7860    -0.0430\n330          0.8800                  66.760  0.7950    -0.0450\n331          0.8860                  66.980  0.7570    -0.0580\n332          0.8930                  67.200  0.8160    -0.0530\n333          0.9040                  67.420  0.8110    -0.0760\n334          0.9140                  67.640  0.8280    -0.0120\n335          0.9010                  67.860  0.8410    -0.0740\n336          0.9070                  68.080  0.8010    -0.0930\n337          0.8900                  68.300  0.7910    -0.1030\n338          0.8820                  68.475  0.8350    -0.1040\n339          0.9090                  68.650  0.8380    -0.1600\n340          0.8710                  68.825  0.8510    -0.1520\n341          0.8730                  69.000  0.8220    -0.1750\n342          0.7970                  69.175  0.8400    -0.0880\n343          0.7930                  69.350  0.7750    -0.0630\n344          0.8770                  69.525  0.7990    -0.1620\n345          0.9370                  68.560  0.8820     0.0540\n346          0.9180                  68.720  0.9230     0.0920\n347          0.9160                  68.880  0.9120     0.0890\n348          0.9000                  69.040  0.8860     0.0590\n349          0.9150                  69.200  0.8810     0.0410\n350          0.8920                  69.360  0.9260    -0.0400\n351          0.9020                  69.520  0.9290     0.0390\n352          0.9020                  69.680  0.8980     0.0110\n353          0.9140                  69.840  0.9270     0.0030\n354          0.8780                  70.000  0.9070    -0.0660\n355          0.9010                  70.000  0.8730    -0.0400\n356          0.9220                  70.000  0.9360    -0.0840\n357          0.8760                  70.000  0.9420    -0.1140\n358          0.9060                  70.000  0.9270    -0.1540\n359          0.8340                  70.000  0.8890    -0.1360\n360          0.8760                  70.000  0.8870    -0.0270\n361          0.9020                  70.000  0.9100    -0.0470\n362          0.9100                  66.940  0.6620    -0.0970\n363          0.8610                  67.180  0.5490    -0.2760\n364          0.7960                  67.300  0.5640    -0.2420\n365          0.7900                  67.420  0.5170    -0.2030\n366          0.7760                  67.540  0.5420    -0.2470\n367          0.7510                  67.660  0.6270    -0.2090\n368          0.6460                  67.780  0.5190     0.1270\n369          0.7680                  67.900  0.6940    -0.1020\n370          0.7980                  68.075  0.6720    -0.0700\n371          0.7700                  68.250  0.7160    -0.1100\n372          0.9100                  68.425  0.6910    -0.1560\n373          0.9360                  68.600  0.7390    -0.1430\n374          0.9230                  68.775  0.8370    -0.0690\n375          0.9180                  68.950  0.8420     0.0030\n376          0.9100                  69.125  0.5930    -0.2130\n377          0.8780                  70.160  0.8360     0.0140\n378          0.8120                  70.640  0.7750     0.0500\n379          0.8220                  70.800  0.7550     0.0680\n380          0.8440                  70.960  0.7450     0.1750\n381          0.7670                  71.120  0.7250     0.0940\n382          0.7440                  71.280  0.6560     0.0980\n383          0.7700                  71.440  0.7150     0.0550\n384          0.7700                  71.600  0.6280     0.1090\n385          0.7860                  71.800  0.7560    -0.0350\n386          0.8190                  72.000  0.8120     0.0380\n387          0.8260                  72.200  0.7940    -0.0290\n388          0.7760                  72.400  0.7400    -0.0160\n389          0.8060                  72.600  0.7630    -0.0840\n390          0.8550                  72.800  0.7180    -0.0360\n391          0.8200                  73.000  0.6980     0.0440\n392          0.9720                  68.300  0.9710     0.1810\n393          0.9540                  68.740  0.9320     0.2360\n394          0.9540                  68.960  0.9700     0.2680\n395          0.9390                  69.180  0.9490     0.2590\n396          0.9750                  69.400  0.9440     0.2380\n397          0.9620                  69.620  0.9350     0.2930\n398          0.9510                  69.840  0.9330     0.1350\n399          0.9650                  70.060  0.9200     0.2110\n400          0.9560                  70.280  0.9420     0.1140\n401          0.9600                  70.500  0.9410     0.2180\n402          0.9540                  70.625  0.9480     0.1340\n403          0.9520                  70.750  0.9550     0.1510\n404          0.9580                  70.875  0.9350     0.0130\n405          0.9580                  71.000  0.9630     0.0160\n406          0.9470                  71.125  0.9380     0.0470\n407          0.9450                  71.250  0.9330     0.1310\n408          0.9700                  71.375  0.9300     0.2240\n409          0.9190                  65.360  0.8580     0.0350\n410          0.8480                  65.120  0.8860    -0.0100\n411          0.8500                  64.880  0.8480    -0.0480\n412          0.8780                  64.640  0.8630    -0.0550\n413          0.8600                  64.400  0.8240    -0.0770\n414          0.8720                  64.160  0.8480     0.0110\n415          0.8790                  63.920  0.8400    -0.0640\n416          0.8780                  63.680  0.8890     0.0180\n417          0.8910                  63.440  0.9050    -0.0230\n418          0.8930                  63.200  0.8560    -0.0680\n419          0.8950                  63.400  0.8730    -0.0830\n420          0.8940                  63.600  0.8550    -0.1240\n421          0.8620                  63.800  0.8670    -0.1530\n422          0.8840                  64.000  0.8770    -0.1250\n423          0.8060                  64.200  0.8350    -0.1260\n424          0.8570                  64.400  0.8590    -0.0860\n425          0.8200                  64.600  0.8530    -0.0840\n426          0.9100                  64.440  0.6710    -0.0940\n427          0.8390                  64.780  0.6700    -0.0660\n428          0.8290                  65.120  0.6400    -0.0980\n429          0.7790                  65.460  0.7370    -0.1110\n430          0.8390                  65.800  0.7230    -0.0660\n431          0.8180                  66.140  0.7880    -0.1580\n432          0.7850                  66.480  0.8250    -0.0870\n433          0.8010                  66.820  0.7870    -0.1940\n434          0.8310                  67.160  0.7190    -0.1700\n435          0.8560                  67.500  0.8010    -0.1170\n436          0.8420                  67.750  0.8460    -0.0190\n437          0.8490                  68.000  0.8790    -0.1710\n438          0.8510                  68.250  0.8690    -0.1030\n439          0.8080                  68.500  0.8300    -0.1180\n440          0.8040                  68.750  0.8290    -0.1600\n441          0.7860                  69.000  0.8210    -0.0830\n442          0.8250                  69.250  0.7590    -0.0800\n443          0.8480                  61.400  0.8170    -0.1385\n444          0.6860                  61.520  0.6090    -0.1200\n445          0.7380                  61.580  0.6335    -0.0860\n446          0.7440                  61.640  0.6110    -0.0990\n447          0.7690                  61.700  0.4860    -0.0750\n448          0.7530                  61.760  0.5900    -0.1510\n449          0.7370                  61.820  0.4520    -0.1370\n450          0.6750                  61.880  0.4740    -0.1400\n451          0.6190                  61.940  0.5780    -0.1250\n452          0.7300                  62.000  0.6590    -0.0880\n453          0.8090                  62.250  0.6560    -0.1410\n454          0.6380                  62.500  0.5930    -0.1520\n455          0.7590                  62.750  0.6820    -0.2150\n456          0.7720                  63.000  0.7740    -0.1980\n457          0.6730                  63.250  0.7700    -0.1120\n458          0.7170                  63.500  0.7040    -0.2260\n459          0.7690                  63.750  0.7330    -0.2080\n460          0.8780                  65.120  0.6830    -0.0590\n461          0.7170                  64.940  0.6390    -0.0190\n462          0.7470                  64.760  0.6360    -0.0820\n463          0.7340                  64.580  0.6710    -0.1070\n464          0.7570                  64.400  0.6690    -0.0670\n465          0.7310                  64.220  0.7470    -0.1300\n466          0.8060                  64.040  0.6830    -0.1580\n467          0.8270                  63.860  0.7160    -0.1530\n468          0.7980                  63.680  0.7780    -0.1980\n469          0.7910                  63.500  0.7330    -0.1600\n470          0.7940                  63.850  0.8000    -0.1890\n471          0.8290                  64.200  0.7580    -0.1760\n472          0.8200                  64.550  0.8630    -0.1000\n473          0.7640                  64.900  0.8770    -0.1140\n474          0.6960                  65.250  0.9240    -0.1290\n475          0.7960                  65.600  0.9150    -0.0810\n476          0.7720                  65.950  0.9140    -0.1120\n477          0.9650                  68.720  0.9690    -0.0090\n478          0.9510                  69.160  0.9340     0.0230\n479          0.9350                  69.600  0.9160     0.0870\n480          0.9380                  69.820  0.9360     0.0970\n481          0.9280                  70.040  0.9210    -0.0050\n482          0.9410                  70.260  0.9190     0.0350\n483          0.9520                  70.480  0.9330    -0.0050\n484          0.9480                  70.700  0.9300     0.1070\n485          0.9540                  70.775  0.9480    -0.0310\n486          0.9640                  70.850  0.9620    -0.0070\n487          0.9620                  70.925  0.9380    -0.1310\n488          0.9370                  71.000  0.9480    -0.0560\n489          0.9620                  71.075  0.9620    -0.1210\n490          0.9700                  71.150  0.9630    -0.0370\n491          0.9740                  71.225  0.9590     0.1020\n492          0.9400                  70.700  0.8950    -0.1145\n493          0.9440                  70.800  0.7890     0.1220\n494          0.9350                  71.000  0.8330    -0.0350\n495          0.9180                  71.100  0.7980    -0.0860\n496          0.9430                  71.200  0.8500    -0.1070\n497          0.9210                  71.300  0.9030    -0.1060\n498          0.9370                  71.400  0.8410    -0.1530\n499          0.9080                  71.500  0.8780    -0.1280\n500          0.8780                  71.600  0.8030    -0.1220\n501          0.8960                  71.700  0.8170    -0.1430\n502          0.8850                  71.800  0.7870    -0.0950\n503          0.9310                  71.900  0.8340    -0.1270\n504          0.9210                  72.000  0.8160    -0.1420\n505          0.9580                  72.100  0.8270    -0.1370\n506          0.9470                  72.200  0.8230    -0.1740\n507          0.9150                  72.300  0.8370    -0.1020\n508          0.8660                  72.400  0.7980    -0.0250\n509          0.6470                  63.300  0.5530    -0.2700\n510          0.5480                  63.400  0.4640    -0.2700\n511          0.6080                  63.500  0.6140    -0.2270\n512          0.5440                  63.600  0.4950    -0.2350\n513          0.5400                  63.700  0.5580    -0.2510\n514          0.5030                  63.800  0.6320    -0.2580\n515          0.5330                  63.900  0.6590    -0.2720\n516          0.5590                  64.000  0.7220    -0.2570\n517          0.5580                  64.100  0.7200    -0.2360\n518          0.5170                  64.200  0.6400    -0.2080\n519          0.5330                  64.325  0.6060    -0.2520\n520          0.5900                  64.450  0.8210    -0.2470\n521          0.6170                  64.575  0.7750    -0.2360\n522          0.6750                  64.700  0.8110    -0.2630\n523          0.7180                  64.825  0.7640    -0.2230\n524          0.6710                  64.950  0.7770    -0.2870\n525          0.7540                  65.075  0.8210    -0.2530\n526          0.9630                  69.900  0.8470     0.0810\n527          0.9260                  69.940  0.8010     0.1630\n528          0.9230                  69.960  0.7660     0.0810\n529          0.9350                  69.980  0.8440     0.1230\n530          0.9390                  70.000  0.8430     0.0910\n531          0.9470                  70.020  0.9060     0.0290\n532          0.9260                  70.040  0.9040     0.0670\n533          0.9310                  70.060  0.8940     0.0200\n534          0.9380                  70.080  0.8990     0.0830\n535          0.9260                  70.100  0.8890     0.1730\n536          0.9060                  70.300  0.8710     0.1440\n537          0.8920                  70.500  0.8410     0.1410\n538          0.9200                  70.700  0.8770     0.0300\n539          0.8860                  70.900  0.8850     0.0530\n540          0.9050                  71.100  0.8640    -0.0660\n541          0.8680                  71.300  0.7780     0.0750\n542          0.9160                  71.500  0.8950     0.0810\n543          0.7280                  52.540  0.8490     0.2120\n544          0.7300                  52.980  0.8910     0.1360\n545          0.6220                  53.420  0.8380     0.1180\n546          0.6330                  53.860  0.7570     0.0040\n547          0.7390                  54.300  0.8910     0.0720\n548          0.7240                  54.740  0.8520     0.0090\n549          0.6850                  55.180  0.6790     0.0380\n550          0.6760                  55.620  0.7940    -0.0670\n551          0.6510                  56.060  0.6770    -0.0010\n552          0.6870                  56.500  0.8520    -0.0400\n553          0.6470                  56.875  0.7510     0.0880\n554          0.6690                  57.250  0.7830     0.0770\n555          0.7610                  57.625  0.8170     0.0610\n556          0.7460                  58.000  0.7870     0.1140\n557          0.6430                  58.375  0.8240     0.1990\n558          0.6330                  58.750  0.7300     0.1080\n559          0.6280                  59.125  0.7860     0.1170\n560          0.8370                  69.600  0.7340    -0.2910\n561          0.8080                  69.760  0.5750    -0.1940\n562          0.7930                  69.920  0.4430    -0.2970\n563          0.8680                  70.000  0.4840    -0.3060\n564          0.8520                  70.080  0.5280    -0.3190\n565          0.8120                  70.160  0.3730    -0.3080\n566          0.6870                  70.240  0.4260    -0.2750\n567          0.8320                  70.320  0.3690    -0.2910\n568          0.8350                  70.400  0.5320    -0.2750\n569          0.8030                  70.525  0.4820    -0.2630\n570          0.7530                  70.650  0.4380    -0.2930\n571          0.7940                  70.775  0.5640    -0.3380\n572          0.8910                  70.900  0.6140    -0.2910\n573          0.7790                  71.025  0.5650    -0.2440\n574          0.8500                  71.150  0.5740    -0.1590\n575          0.8750                  71.275  0.5630    -0.3160\n576          0.8300                  58.980  0.6630     0.1700\n577          0.8660                  59.260  0.6280     0.1330\n578          0.8660                  59.540  0.6300     0.2030\n579          0.8340                  59.820  0.6430     0.1940\n580          0.8590                  60.100  0.6960     0.1640\n581          0.7680                  60.380  0.7630     0.0060\n582          0.8020                  60.660  0.8650     0.0180\n583          0.8300                  60.940  0.8840     0.0420\n584          0.8340                  61.220  0.8430     0.1050\n585          0.8230                  61.500  0.8690     0.0490\n586          0.8110                  61.700  0.8630     0.0090\n587          0.8260                  61.900  0.9150    -0.0610\n588          0.8410                  62.100  0.9100    -0.0130\n589          0.7740                  62.300  0.9010    -0.0650\n590          0.8060                  62.900  0.8560    -0.0570\n591          0.9330                  63.100  0.6500     0.0880\n592          0.8190                  62.900  0.6760     0.2290\n593          0.8280                  62.700  0.6870     0.2220\n594          0.8240                  62.500  0.6610     0.1170\n595          0.8030                  62.300  0.6460     0.1040\n596          0.7660                  62.100  0.7830     0.0940\n597          0.7790                  61.900  0.7000    -0.0040\n598          0.7920                  61.700  0.6980    -0.0280\n599          0.7900                  61.500  0.6960     0.0140\n600          0.7720                  61.300  0.5340    -0.0980\n601          0.7740                  61.725  0.8500     0.0790\n602          0.8430                  62.150  0.8980     0.0710\n603          0.8270                  62.575  0.8720     0.0980\n604          0.7970                  63.000  0.8460     0.0620\n605          0.8060                  63.850  0.8350     0.1140\n606          0.7290                  64.275  0.8510     0.0810\n607          0.9300                  65.000  0.6970    -0.1430\n608          0.9310                  65.320  0.5380    -0.1640\n609          0.9010                  65.640  0.4640    -0.1290\n610          0.8960                  65.800  0.5140    -0.1490\n611          0.8940                  65.960  0.6310    -0.0930\n612          0.9060                  66.120  0.5690    -0.1400\n613          0.8770                  66.280  0.6740    -0.1170\n614          0.8450                  66.440  0.4940    -0.1540\n615          0.8590                  66.600  0.5580    -0.2020\n616          0.9000                  66.750  0.5540    -0.1910\n617          0.8770                  66.900  0.6610    -0.1430\n618          0.9410                  67.050  0.6930    -0.2470\n619          0.9470                  67.200  0.7980    -0.1990\n620          0.9430                  67.350  0.7710    -0.1250\n621          0.9480                  67.500  0.7270    -0.0440\n622          0.9370                  67.650  0.7760    -0.0080\n623          0.7070                  55.860  0.7740     0.0500\n624          0.5690                  56.220  0.7290    -0.0530\n625          0.6840                  56.580  0.7560    -0.0740\n626          0.6530                  56.940  0.6790    -0.0280\n627          0.6050                  57.300  0.7830     0.0560\n628          0.5530                  57.660  0.8380    -0.0400\n629          0.5110                  58.020  0.6090     0.0650\n630          0.5530                  58.380  0.7400     0.0820\n631          0.6210                  58.740  0.8090    -0.0280\n632          0.6100                  59.100  0.7770    -0.0070\n633          0.6140                  59.400  0.8200     0.0440\n634          0.6070                  59.700  0.8860    -0.0440\n635          0.6380                  60.000  0.8900     0.0830\n636          0.5610                  60.300  0.8760     0.1110\n637          0.6160                  60.600  0.9060     0.0710\n638          0.5700                  60.900  0.8660     0.0560\n639          0.6080                  61.200  0.8930     0.0900\n640          0.7710                  60.320  0.7130     0.3460\n641          0.7040                  60.540  0.6030     0.3100\n642          0.6750                  60.760  0.5960     0.1620\n643          0.7790                  60.980  0.7840     0.1890\n644          0.8160                  61.200  0.7000     0.4450\n645          0.8250                  61.420  0.8780     0.4360\n646          0.8340                  61.640  0.7700     0.3520\n647          0.7940                  61.860  0.7810     0.3740\n648          0.9050                  62.080  0.7190     0.4050\n649          0.8090                  62.300  0.7790     0.4690\n650          0.7920                  62.425  0.8300     0.4970\n651          0.7960                  62.550  0.8650     0.4850\n652          0.8090                  62.675  0.8790     0.5090\n653          0.8020                  62.800  0.8660     0.5520\n654          0.7510                  62.925  0.8530     0.5320\n655          0.8170                  63.050  0.8850     0.5430\n656          0.8340                  63.175  0.9030     0.5190\n657          0.9670                  69.620  0.9430     0.2370\n658          0.9830                  69.860  0.8940     0.3170\n659          0.9590                  69.980  0.8350     0.3100\n660          0.9730                  70.100  0.8560     0.3430\n661          0.9770                  70.220  0.9520     0.3780\n662          0.9620                  70.340  0.9020     0.2970\n663          0.9550                  70.460  0.8840     0.3260\n664          0.9680                  70.580  0.9220     0.2580\n665          0.9530                  70.700  0.8920     0.2280\n666          0.9580                  70.800  0.8750     0.1710\n667          0.9430                  70.900  0.9050     0.2120\n668          0.9380                  71.000  0.8610     0.1400\n669          0.9440                  71.100  0.8920     0.0690\n670          0.9600                  71.200  0.8820     0.0020\n671          0.8500                  71.300  0.8460     0.1330\n672          0.9060                  71.400  0.8950     0.1400\n673          0.9270                  71.080  0.8170     0.1370\n674          0.8680                  71.160  0.6830     0.2170\n675          0.8590                  71.240  0.6630     0.1360\n676          0.9370                  71.320  0.5930     0.1700\n677          0.8820                  71.400  0.5610     0.1480\n678          0.8930                  71.480  0.7220     0.1380\n679          0.9030                  71.560  0.6810     0.1500\n680          0.9090                  71.640  0.7390     0.1470\n681          0.8890                  71.720  0.7070     0.0900\n682          0.8640                  71.800  0.7530     0.1050\n683          0.8900                  71.950  0.7720     0.1490\n684          0.9160                  72.100  0.7680     0.1410\n685          0.9100                  72.250  0.7250     0.0500\n686          0.9460                  72.400  0.8340     0.0800\n687          0.9590                  72.550  0.8310    -0.0570\n688          0.9170                  72.700  0.8200    -0.0060\n689          0.9540                  72.850  0.7750    -0.0050\n690          0.9280                  70.600  0.8020    -0.0510\n691          0.9120                  70.800  0.6840     0.1100\n692          0.8800                  70.900  0.5430     0.0450\n693          0.8800                  71.000  0.7010     0.2370\n694          0.8720                  71.100  0.7380    -0.0630\n695          0.9130                  71.200  0.5680    -0.0220\n696          0.8690                  71.300  0.5700     0.1090\n697          0.9160                  71.400  0.4990    -0.1060\n698          0.8980                  71.500  0.6240    -0.0690\n699          0.9090                  71.600  0.5750    -0.0680\n700          0.9270                  71.675  0.6240    -0.0840\n701          0.9200                  71.750  0.6330    -0.0390\n702          0.9130                  71.825  0.6500    -0.0250\n703          0.8380                  71.900  0.7090    -0.0860\n704          0.8900                  71.975  0.7180    -0.1550\n705          0.8860                  72.050  0.7030    -0.0940\n706          0.8690                  72.125  0.7110     0.0280\n707          0.9280                  72.400  0.8680    -0.1610\n708          0.9380                  72.640  0.7960    -0.0960\n709          0.8870                  72.760  0.7720    -0.1410\n710          0.8880                  72.880  0.7300    -0.2150\n711          0.9020                  73.000  0.7720    -0.1450\n712          0.9170                  73.120  0.8140    -0.0570\n713          0.9050                  73.240  0.7530    -0.1610\n714          0.9240                  73.360  0.8210    -0.1520\n715          0.9000                  73.480  0.8380    -0.1440\n716          0.9230                  73.600  0.8320    -0.1610\n717          0.9000                  73.725  0.8360    -0.0680\n718          0.8820                  73.850  0.8490    -0.2110\n719          0.8860                  73.975  0.7730    -0.2670\n720          0.8780                  74.100  0.8060    -0.2590\n721          0.8870                  74.225  0.8060    -0.2640\n722          0.8960                  74.350  0.8010    -0.2110\n723          0.8990                  74.475  0.7890    -0.2350\n724          0.9200                  65.800  0.7620    -0.1385\n725          0.8410                  66.160  0.6460    -0.1140\n726          0.7660                  66.340  0.7620    -0.1310\n727          0.8990                  66.520  0.7710    -0.0810\n728          0.9180                  66.700  0.7880    -0.0540\n729          0.8780                  66.880  0.7600    -0.1530\n730          0.8290                  67.060  0.6930    -0.1730\n731          0.8400                  67.240  0.6920    -0.1280\n732          0.8160                  67.420  0.7290    -0.1100\n733          0.8300                  67.600  0.7670    -0.0480\n734          0.8200                  67.600  0.7710    -0.0390\n735          0.8150                  67.600  0.7660    -0.1530\n736          0.8000                  67.600  0.7620    -0.1870\n737          0.7930                  67.600  0.7260    -0.1650\n738          0.7090                  67.600  0.7790    -0.1510\n739          0.7030                  67.600  0.7730    -0.1460\n740          0.7740                  67.600  0.7590    -0.1530\n741          0.8720                  58.000  0.7310    -0.2770\n742          0.8610                  58.600  0.8060    -0.2490\n743          0.8390                  59.200  0.7270    -0.2240\n744          0.8930                  59.800  0.8560    -0.2530\n745          0.9040                  60.400  0.7850    -0.2190\n746          0.9050                  61.000  0.8780    -0.2390\n747          0.8920                  61.600  0.8400    -0.1750\n748          0.8890                  62.200  0.7820    -0.2330\n749          0.7950                  62.800  0.7990     0.0000\n750          0.9310                  63.400  0.7400    -0.0410\n751          0.9280                  63.800  0.7830    -0.0400\n752          0.9140                  64.200  0.7450    -0.0390\n753          0.9370                  64.600  0.8400    -0.1020\n754          0.9510                  65.000  0.8520    -0.0590\n755          0.9660                  65.400  0.8720    -0.0600\n756          0.9060                  65.800  0.8070     0.0360\n757          0.9230                  66.200  0.8830     0.0220\n758          0.9090                  51.420  0.6160    -0.0310\n759          0.8410                  51.940  0.7500     0.0430\n760          0.8270                  52.460  0.6200    -0.0220\n761          0.7890                  52.980  0.5840     0.0890\n762          0.8050                  53.500  0.6350     0.0080\n763          0.8460                  54.020  0.7090     0.0120\n764          0.8310                  54.540  0.6280     0.0560\n765          0.8250                  55.060  0.7080     0.2040\n766          0.7650                  55.580  0.8190     0.1640\n767          0.7770                  56.100  0.7930     0.2120\n768          0.7060                  56.500  0.7490     0.2910\n769          0.7150                  56.900  0.8530     0.2280\n770          0.7070                  57.300  0.8210     0.2850\n771          0.6760                  57.700  0.8180     0.3030\n772          0.6740                  58.100  0.7020     0.2540\n773          0.7020                  58.500  0.6780     0.3160\n774          0.6910                  58.900  0.7060     0.2940\n775          0.8440                  59.920  0.6780    -0.1420\n776          0.8330                  60.340  0.6840    -0.0930\n777          0.7920                  60.760  0.7190    -0.1020\n778          0.8550                  61.180  0.6990    -0.1420\n779          0.8850                  61.600  0.7200    -0.0740\n780          0.8910                  62.020  0.7480    -0.1570\n781          0.8560                  62.440  0.7030    -0.0810\n782          0.8510                  62.860  0.7550    -0.0870\n783          0.8980                  63.280  0.7360     0.3530\n784          0.8570                  63.700  0.8130     0.1970\n785          0.9140                  64.225  0.8140     0.0540\n786          0.8830                  64.750  0.8590     0.1410\n787          0.8980                  65.275  0.9450     0.2650\n788          0.8770                  65.800  0.9200    -0.0050\n789          0.9020                  66.325  0.9350     0.1040\n790          0.9040                  66.850  0.9180     0.2030\n791          0.9270                  67.375  0.9480     0.2360\n792          0.7960                  65.100  0.7030    -0.0120\n793          0.8530                  65.160  0.6700     0.0660\n794          0.7170                  65.280  0.5240     0.0330\n795          0.7360                  65.340  0.6650     0.0700\n796          0.7210                  65.400  0.6780     0.0700\n797          0.7330                  65.460  0.6570     0.0000\n798          0.7130                  65.520  0.6210    -0.0140\n799          0.7080                  65.580  0.6550    -0.0100\n800          0.7590                  65.640  0.6570    -0.0150\n801          0.7420                  65.700  0.5970     0.0680\n802          0.8280                  65.775  0.6570     0.0230\n803          0.7770                  65.850  0.6050    -0.0850\n804          0.8290                  65.925  0.6070    -0.0790\n805          0.8660                  66.000  0.4470    -0.0960\n806          0.5470                  66.075  0.5520    -0.1360\n807          0.5070                  66.150  0.4230    -0.1610\n808          0.5350                  66.225  0.4500    -0.1260\n809          0.9300                  63.500  0.5670    -0.2990\n810          0.9410                  63.700  0.5900    -0.2850\n811          0.9140                  63.900  0.6210    -0.2630\n812          0.9330                  64.100  0.4960    -0.3070\n813          0.8820                  64.300  0.5190    -0.2780\n814          0.9110                  64.500  0.5660    -0.1520\n815          0.9190                  64.700  0.5030    -0.2770\n816          0.9130                  64.900  0.5560    -0.2400\n817          0.9080                  65.100  0.5080    -0.2670\n818          0.9290                  65.300  0.6410    -0.2570\n819          0.9380                  65.650  0.6140    -0.2700\n820          0.9260                  66.000  0.7490    -0.1770\n821          0.9290                  66.350  0.6990    -0.2410\n822          0.9180                  66.700  0.7800    -0.2560\n823          0.9530                  67.050  0.8240    -0.1270\n824          0.9280                  67.400  0.7070    -0.1190\n825          0.9370                  67.750  0.7100    -0.1910\n826          0.9390                  70.300  0.9390     0.1170\n827          0.9520                  70.500  0.9080     0.0870\n828          0.9340                  70.700  0.9620     0.0980\n829          0.9140                  70.900  0.9170     0.0490\n830          0.9170                  71.100  0.7900    -0.0630\n831          0.8750                  71.300  0.9380     0.0980\n832          0.9340                  71.500  0.9320     0.0460\n833          0.9410                  71.525  0.8820     0.0120\n834          0.9050                  71.550  0.9030     0.0380\n835          0.9020                  71.575  0.8840    -0.0270\n836          0.9120                  71.600  0.9300    -0.0500\n837          0.8780                  71.675  0.9150     0.0240\n838          0.7610                  49.940  0.5550    -0.0710\n839          0.7470                  50.620  0.4950    -0.0120\n840          0.7330                  50.960  0.6340     0.0090\n841          0.7510                  51.300  0.7490    -0.0270\n842          0.7960                  51.640  0.8230    -0.1000\n843          0.8230                  51.980  0.7040    -0.0880\n844          0.8200                  52.320  0.6650    -0.0530\n845          0.8430                  52.660  0.6520    -0.0360\n846          0.8300                  53.000  0.6340    -0.0660\n847          0.8360                  53.400  0.6960    -0.0690\n848          0.7410                  53.800  0.7530    -0.0680\n849          0.6920                  54.200  0.7370    -0.0320\n850          0.7550                  54.600  0.6700    -0.0360\n851          0.5680                  55.000  0.6450    -0.0650\n852          0.5730                  55.400  0.6730     0.0000\n853          0.6420                  55.800  0.8180    -0.0190\n854          0.9160                  70.220  0.8030     0.4580\n855          0.9080                  70.400  0.8020     0.2800\n856          0.9230                  70.580  0.8820     0.2900\n857          0.9220                  70.760  0.8610     0.3450\n858          0.9420                  70.940  0.9090     0.4020\n859          0.9410                  71.120  0.9040     0.3970\n860          0.9190                  71.300  0.9120     0.3410\n861          0.9300                  71.350  0.9160     0.3410\n862          0.9370                  71.400  0.9240     0.2450\n863          0.9320                  71.450  0.9270     0.1720\n864          0.9220                  71.500  0.9240     0.0800\n865          0.9380                  71.550  0.9310    -0.0030\n866          0.8970                  71.600  0.8890     0.2420\n867          0.9320                  71.650  0.8380     0.2900\n868          0.6820                  56.500  0.5730    -0.0740\n869          0.6700                  56.800  0.5930    -0.0200\n870          0.8190                  57.100  0.7350     0.0370\n871          0.8570                  57.400  0.6690     0.0530\n872          0.7500                  57.700  0.5670     0.0500\n873          0.7630                  58.000  0.4870    -0.0240\n874          0.7410                  58.300  0.6030    -0.0810\n875          0.8530                  58.600  0.4680    -0.0570\n876          0.8750                  58.900  0.4470     0.0530\n877          0.7850                  59.125  0.4670    -0.1780\n878          0.7790                  59.350  0.5270    -0.1580\n879          0.8020                  59.575  0.4670    -0.1190\n880          0.7980                  59.800  0.6280    -0.1080\n881          0.6480                  60.475  0.6240    -0.0130\n882          0.9030                  64.400  0.8140    -0.1230\n883          0.8790                  64.680  0.6700    -0.0990\n884          0.8760                  64.820  0.6770    -0.1320\n885          0.8680                  64.960  0.6820    -0.0800\n886          0.8760                  65.100  0.7780    -0.0530\n887          0.8240                  65.240  0.8310    -0.1040\n888          0.7670                  65.380  0.7880    -0.0970\n889          0.7590                  65.520  0.7390    -0.1690\n890          0.7820                  65.660  0.7790    -0.0990\n891          0.7610                  65.800  0.7190    -0.1560\n892          0.8930                  65.800  0.7520    -0.1570\n893          0.8000                  65.800  0.8610    -0.2060\n894          0.8580                  65.800  0.8160    -0.1840\n895          0.8520                  65.800  0.9030    -0.1460\n896          0.7790                  65.800  0.8730    -0.1250\n897          0.7790                  65.800  0.8370    -0.0350\n898          0.8580                  65.800  0.8610    -0.1210\n899          0.8120                  59.480  0.5540    -0.1670\n900          0.8040                  59.860  0.6960    -0.1880\n901          0.8720                  60.240  0.6410    -0.0580\n902          0.8560                  60.620  0.5510    -0.1010\n903          0.8470                  61.000  0.5980    -0.0910\n904          0.8690                  61.380  0.6280    -0.0850\n905          0.8260                  61.760  0.6020    -0.0520\n906          0.8030                  62.140  0.6580    -0.0720\n907          0.8050                  62.520  0.6230    -0.1160\n908          0.8400                  62.900  0.5950    -0.0930\n909          0.8370                  63.300  0.5570    -0.0500\n910          0.8310                  63.700  0.5530    -0.0560\n911          0.8920                  64.100  0.8240    -0.0880\n912          0.8090                  64.500  0.7840    -0.0960\n913          0.8740                  64.900  0.8590    -0.0580\n914          0.8800                  65.300  0.8330    -0.0960\n915          0.8170                  65.700  0.8290    -0.0870\n916          0.8810                  56.540  0.7810     0.0610\n917          0.9200                  56.960  0.4840     0.0650\n918          0.9040                  57.800  0.6310     0.0960\n919          0.9480                  58.220  0.7000     0.1480\n920          0.9190                  58.640  0.6880     0.1030\n921          0.9350                  59.060  0.7480     0.1320\n922          0.9430                  59.480  0.7520     0.1420\n923          0.9060                  59.900  0.6860     0.1690\n924          0.9470                  60.000  0.7600     0.0860\n925          0.9240                  60.100  0.6750     0.1150\n926          0.9420                  60.200  0.6960     0.0500\n927          0.9460                  60.300  0.7110     0.1450\n928          0.9180                  60.400  0.7180     0.1400\n929          0.9270                  60.500  0.6670     0.2170\n930          0.9510                  60.600  0.7170     0.2140\n931          0.8320                  65.960  0.5120    -0.1370\n932          0.8160                  66.120  0.5560    -0.1050\n933          0.8050                  66.200  0.5520    -0.2100\n934          0.8180                  66.280  0.5460    -0.2300\n935          0.7040                  66.360  0.4620    -0.1960\n936          0.7360                  66.440  0.5020    -0.1790\n937          0.8630                  66.520  0.5030     0.0930\n938          0.7400                  66.600  0.5830    -0.1480\n939          0.8660                  66.700  0.5690    -0.0910\n940          0.8810                  66.800  0.6260    -0.0870\n941          0.8560                  66.900  0.6260    -0.0550\n942          0.8320                  67.000  0.6940    -0.1090\n943          0.8870                  67.100  0.8020     0.0630\n944          0.8740                  59.660  0.6890     0.1395\n945          0.7870                  59.720  0.4130     0.3060\n946          0.8180                  59.780  0.6180     0.2800\n947          0.8130                  59.840  0.6160     0.0330\n948          0.7790                  59.900  0.5190     0.0810\n949          0.7410                  59.960  0.5250    -0.0210\n950          0.7340                  60.020  0.6380     0.0600\n951          0.7400                  60.080  0.7220     0.1410\n952          0.7860                  60.140  0.7120     0.1110\n953          0.7480                  60.200  0.7630     0.2170\n954          0.8370                  60.475  0.8390     0.1580\n955          0.8160                  60.750  0.8450     0.1230\n956          0.7680                  61.025  0.7700     0.1100\n957          0.7720                  61.300  0.7900     0.1550\n958          0.7870                  61.575  0.7720     0.1380\n959          0.6990                  61.850  0.8180     0.1470\n960          0.7530                  62.125  0.8440     0.1530\n961          0.9470                  70.700  0.9010     0.2670\n962          0.9440                  70.780  0.8960     0.3400\n963          0.9440                  70.820  0.8830     0.3610\n964          0.9570                  70.900  0.9210     0.3450\n965          0.9380                  70.940  0.9250     0.3320\n966          0.9390                  70.980  0.8770     0.2840\n967          0.9250                  71.020  0.9190     0.3010\n968          0.9090                  71.060  0.9100     0.3270\n969          0.8790                  71.100  0.9040     0.2570\n970          0.9260                  71.175  0.9070     0.2350\n971          0.9370                  71.250  0.9200     0.2460\n972          0.9390                  71.325  0.9200     0.1580\n973          0.9410                  71.400  0.8860     0.2090\n974          0.9440                  71.475  0.9350     0.1470\n975          0.9190                  71.550  0.8560     0.2670\n976          0.9290                  71.625  0.8680     0.2240\n977          0.9460                  69.720  0.9320     0.3060\n978          0.9670                  69.740  0.8780     0.2740\n979          0.9440                  69.760  0.8930     0.2930\n980          0.9760                  69.800  0.9180     0.2490\n981          0.9540                  69.820  0.9350     0.2790\n982          0.9300                  69.840  0.9020     0.2820\n983          0.9580                  69.860  0.9440     0.2320\n984          0.9420                  69.880  0.9320     0.3430\n985          0.9870                  69.900  0.9420     0.3240\n986          0.9370                  69.975  0.9270     0.2610\n987          0.9550                  70.050  0.9420     0.2890\n988          0.9540                  70.125  0.9490     0.1150\n989          0.9390                  70.200  0.9120     0.1520\n990          0.9520                  70.275  0.9180     0.1180\n991          0.9500                  70.350  0.9100     0.2190\n992          0.9560                  70.425  0.8310     0.1870\n993          0.8770                  64.300  0.7450     0.0080\n994          0.8660                  64.400  0.8360     0.1380\n995          0.8570                  64.500  0.7910     0.0730\n996          0.8350                  64.600  0.7460     0.0680\n997          0.8630                  64.700  0.7920     0.0160\n998          0.8000                  64.800  0.7790    -0.0210\n999          0.8940                  64.900  0.8500     0.0150\n1000         0.8680                  65.000  0.8590     0.0370\n1001         0.8390                  65.100  0.8170     0.1020\n1002         0.8270                  65.200  0.8090     0.0760\n1003         0.8530                  65.275  0.7170     0.0380\n1004         0.8380                  65.350  0.9220     0.0090\n1005         0.8540                  65.425  0.7970     0.0070\n1006         0.8740                  65.500  0.8830     0.0280\n1007         0.8560                  65.575  0.8180     0.0400\n1008         0.8480                  65.650  0.9050     0.0230\n1009         0.8440                  65.725  0.9140    -0.0010\n1010         0.6770                  50.140  0.7500     0.0760\n1011         0.7260                  50.580  0.5840    -0.0560\n1012         0.6070                  51.020  0.6490    -0.0550\n1013         0.7710                  51.460  0.8800    -0.0090\n1014         0.6550                  51.900  0.8170    -0.0230\n1015         0.8180                  52.340  0.7800    -0.0560\n1016         0.7000                  52.780  0.7340    -0.0640\n1017         0.6960                  53.220  0.8250    -0.0780\n1018         0.7530                  53.660  0.6880    -0.0470\n1019         0.7130                  54.100  0.7280    -0.0330\n1020         0.6830                  54.450  0.7020    -0.0170\n1021         0.5820                  54.800  0.6840    -0.0310\n1022         0.6120                  55.150  0.7910     0.0080\n1023         0.6770                  55.500  0.8310     0.0250\n1024         0.5870                  56.550  0.7930     0.0320\n1025         0.8110                  64.660  0.4390     0.0750\n1026         0.7340                  64.820  0.5520    -0.0460\n1027         0.6870                  64.900  0.5130    -0.0630\n1028         0.7840                  64.980  0.6070    -0.0920\n1029         0.7980                  65.060  0.6130    -0.0890\n1030         0.8320                  65.140  0.6410     0.0200\n1031         0.7930                  65.220  0.6450     0.0300\n1032         0.7660                  65.300  0.6600    -0.0510\n1033         0.8710                  65.500  0.7060     0.0760\n1034         0.8000                  65.700  0.7520    -0.0630\n1035         0.8490                  65.900  0.7450    -0.0460\n1036         0.8150                  66.100  0.7250     0.0200\n1037         0.7500                  66.300  0.7870     0.1300\n1038         0.8090                  66.500  0.7930     0.1910\n1039         0.8500                  66.700  0.7230     0.0720\n1040         0.5910                  53.200  0.6300     0.0840\n1041         0.4790                  53.720  0.3960     0.0840\n1042         0.3730                  53.980  0.3350     0.0950\n1043         0.5220                  54.240  0.3880     0.0720\n1044         0.5710                  54.500  0.3640     0.2950\n1045         0.5100                  54.760  0.3760     0.0250\n1046         0.5420                  55.020  0.3670     0.1600\n1047         0.6070                  55.280  0.4480     0.0940\n1048         0.5520                  55.540  0.5430     0.1340\n1049         0.5620                  55.800  0.5870     0.0790\n1050         0.6270                  56.075  0.6340     0.0870\n1051         0.6900                  56.350  0.7130     0.0380\n1052         0.6850                  56.625  0.7730     0.0610\n1053         0.6170                  56.900  0.6850     0.1150\n1054         0.5940                  57.175  0.7670     0.0060\n1055         0.6080                  57.450  0.7640     0.0100\n1056         0.9510                  66.860  0.8820    -0.0510\n1057         0.9370                  67.020  0.6400     0.0790\n1058         0.9220                  67.180  0.7070     0.0560\n1059         0.9050                  67.340  0.7210     0.0100\n1060         0.9280                  67.500  0.7550    -0.0130\n1061         0.8760                  67.660  0.8290     0.0050\n1062         0.8970                  67.820  0.7830    -0.0060\n1063         0.8960                  67.980  0.8110     0.0140\n1064         0.8730                  68.140  0.8940    -0.0020\n1065         0.8830                  68.300  0.8470    -0.0110\n1066         0.8820                  68.400  0.8840    -0.1070\n1067         0.9120                  68.500  0.9000    -0.1740\n1068         0.9040                  68.600  0.8610    -0.1350\n1069         0.8860                  68.700  0.8830    -0.2030\n1070         0.8990                  68.900  0.8110    -0.1460\n1071         0.8910                  69.000  0.8990    -0.1210\n1072         0.8750                  66.460  0.6680    -0.0730\n1073         0.7560                  66.720  0.6380    -0.0800\n1074         0.7770                  66.980  0.6380    -0.0690\n1075         0.7990                  67.240  0.6380    -0.0820\n1076         0.8120                  67.500  0.7570    -0.0630\n1077         0.7560                  67.760  0.7730    -0.1260\n1078         0.7640                  68.020  0.7030    -0.0820\n1079         0.7970                  68.280  0.7030    -0.0690\n1080         0.8190                  68.540  0.7220    -0.1390\n1081         0.7980                  68.800  0.8020    -0.0930\n1082         0.8030                  68.975  0.8300    -0.1370\n1083         0.8300                  69.150  0.8270    -0.1570\n1084         0.8450                  69.325  0.8300    -0.1810\n1085         0.8090                  69.500  0.8150    -0.1320\n1086         0.7490                  69.675  0.8060    -0.0910\n1087         0.8190                  69.850  0.8120    -0.0870\n1088         0.8230                  70.025  0.7640    -0.1780\n1089         0.7950                  61.360  0.8280     0.0610\n1090         0.8010                  61.420  0.8520    -0.0240\n1091         0.7980                  61.480  0.8610     0.0810\n1092         0.7750                  61.540  0.8740     0.0020\n1093         0.8050                  61.600  0.8930     0.0310\n1094         0.7890                  61.660  0.8830     0.0710\n1095         0.8130                  61.720  0.9140     0.0510\n1096         0.8460                  61.780  0.9070     0.0190\n1097         0.8130                  61.840  0.9020    -0.0170\n1098         0.8540                  61.900  0.9120    -0.0530\n1099         0.8210                  61.925  0.9080    -0.0730\n1100         0.8510                  61.950  0.9260    -0.1430\n1101         0.8460                  61.975  0.9180    -0.1100\n1102         0.8450                  62.000  0.9100    -0.0840\n1103         0.7810                  62.025  0.9320    -0.1110\n1104         0.7780                  62.050  0.9050    -0.0090\n1105         0.9220                  66.200  0.7820    -0.0700\n1106         0.9130                  66.560  0.7720    -0.0510\n1107         0.9170                  66.920  0.8210     0.0700\n1108         0.9550                  67.100  0.7950    -0.0010\n1109         0.9050                  67.280  0.8680    -0.0700\n1110         0.9360                  67.460  0.8110    -0.0290\n1111         0.9120                  67.640  0.7760    -0.1400\n1112         0.9240                  67.820  0.8750    -0.0670\n1113         0.8930                  68.000  0.7930    -0.0960\n1114         0.9170                  68.175  0.8710    -0.0940\n1115         0.8820                  68.350  0.8310    -0.1250\n1116         0.8630                  68.525  0.8700    -0.2580\n1117         0.8780                  68.700  0.8830    -0.2350\n1118         0.9530                  68.875  0.7670    -0.0120\n1119         0.9360                  69.050  0.7320     0.1240\n1120         0.8860                  69.225  0.8000    -0.2070\n1121         0.9050                  68.340  0.8820    -0.1820\n1122         0.8860                  68.820  0.6460    -0.2210\n1123         0.8640                  69.300  0.7210    -0.1100\n1124         0.8560                  69.540  0.8750    -0.1770\n1125         0.8660                  69.780  0.7740    -0.1010\n1126         0.8670                  70.020  0.7880    -0.1220\n1127         0.8620                  70.260  0.8470    -0.1300\n1128         0.8660                  70.500  0.8000    -0.1670\n1129         0.9050                  70.625  0.8380    -0.2290\n1130         0.9000                  70.750  0.9050    -0.1800\n1131         0.8870                  70.875  0.8770    -0.2650\n1132         0.8760                  71.000  0.8820    -0.2380\n1133         0.8750                  71.125  0.9130    -0.2420\n1134         0.8950                  71.250  0.8920    -0.2090\n1135         0.8620                  71.375  0.9030    -0.1370\n1136         0.8380                  64.500  0.8000    -0.1590\n1137         0.7360                  64.860  0.6860    -0.1920\n1138         0.8120                  65.220  0.6060    -0.2000\n1139         0.6890                  65.400  0.5660    -0.0890\n1140         0.7530                  65.580  0.6500    -0.1460\n1141         0.7400                  65.760  0.6450    -0.1170\n1142         0.7780                  65.940  0.6550    -0.1330\n1143         0.7530                  66.120  0.7540    -0.1050\n1144         0.7870                  66.300  0.7960    -0.1450\n1145         0.8090                  66.425  0.8220    -0.1180\n1146         0.8110                  66.550  0.8390    -0.1630\n1147         0.8180                  66.675  0.8450    -0.2220\n1148         0.8420                  66.800  0.8480    -0.2260\n1149         0.8690                  66.925  0.8630    -0.1590\n1150         0.8350                  67.050  0.8710    -0.1840\n1151         0.8300                  67.175  0.8360    -0.1720\n1152         0.8950                  58.740  0.6430    -0.3100\n1153         0.8850                  59.180  0.5930    -0.2870\n1154         0.8820                  59.620  0.6430    -0.3090\n1155         0.9080                  60.060  0.6170    -0.2870\n1156         0.9090                  60.500  0.6130    -0.3000\n1157         0.8830                  60.940  0.6260    -0.2820\n1158         0.9010                  61.380  0.6090    -0.2960\n1159         0.8810                  61.820  0.6610    -0.2930\n1160         0.9320                  62.260  0.7440    -0.2680\n1161         0.9240                  62.700  0.6850    -0.1750\n1162         0.9110                  63.075  0.7140    -0.1850\n1163         0.8960                  63.450  0.7310    -0.1490\n1164         0.9090                  63.825  0.7290    -0.1510\n1165         0.9100                  64.200  0.7150    -0.1200\n1166         0.8870                  64.575  0.7140    -0.0760\n1167         0.8620                  64.950  0.6710     0.0560\n1168         0.9200                  65.325  0.7760    -0.0700\n1169         0.8680                  61.200  0.7620    -0.1055\n1170         0.8920                  61.600  0.6220     0.0040\n1171         0.8230                  61.800  0.5320    -0.0220\n1172         0.9210                  62.000  0.6390    -0.1090\n1173         0.8800                  62.200  0.6780    -0.0320\n1174         0.8300                  62.400  0.6030    -0.1420\n1175         0.8670                  62.600  0.5600    -0.1200\n1176         0.8270                  62.800  0.6610    -0.0820\n1177         0.8180                  63.000  0.7620    -0.0740\n1178         0.8200                  63.200  0.8200    -0.0470\n1179         0.8900                  63.400  0.7740    -0.1340\n1180         0.8400                  63.600  0.8140    -0.1330\n1181         0.8680                  63.800  0.8550    -0.1940\n1182         0.9120                  64.000  0.8910    -0.1480\n1183         0.8900                  64.200  0.8840    -0.1120\n1184         0.8590                  64.400  0.9020    -0.1020\n1185         0.9000                  64.600  0.7620    -0.0270\n1186         0.7600                  55.500  0.7360    -0.0560\n1187         0.7180                  55.800  0.6980    -0.0060\n1188         0.7560                  56.100  0.6120    -0.0340\n1189         0.8100                  56.400  0.5570    -0.0400\n1190         0.7600                  56.700  0.7770    -0.0810\n1191         0.6020                  57.000  0.6410    -0.1650\n1192         0.7110                  57.300  0.6680    -0.0390\n1193         0.8230                  57.600  0.6360    -0.0550\n1194         0.8560                  57.900  0.6920    -0.0480\n1195         0.7020                  58.200  0.7200    -0.1140\n1196         0.8390                  58.500  0.7440    -0.0890\n1197         0.7440                  58.800  0.6870    -0.0470\n1198         0.7390                  59.100  0.6290    -0.0770\n1199         0.6880                  59.400  0.7590    -0.0220\n1200         0.6210                  59.700  0.7970    -0.0490\n1201         0.6450                  60.000  0.7590     0.0300\n1202         0.6090                  60.300  0.7580     0.0520\n1203         0.8440                  65.280  0.4530    -0.1690\n1204         0.7700                  65.560  0.3730    -0.1810\n1205         0.7260                  65.700  0.4630    -0.1740\n1206         0.7730                  65.840  0.4400    -0.1880\n1207         0.8190                  65.980  0.4610    -0.1340\n1208         0.8280                  66.120  0.5330    -0.1030\n1209         0.7830                  66.260  0.5320     0.0680\n1210         0.8160                  66.400  0.5460    -0.0660\n1211         0.8950                  66.525  0.6140    -0.0720\n1212         0.8840                  66.650  0.6850    -0.0810\n1213         0.8530                  66.775  0.7400    -0.1030\n1214         0.9030                  66.900  0.7530    -0.0440\n1215         0.8520                  67.025  0.8430     0.1440\n1216         0.8900                  67.150  0.8500     0.2640\n1217         0.9040                  71.580  0.7570     0.1340\n1218         0.9210                  71.760  0.8670     0.2890\n1219         0.8450                  71.940  0.6610     0.0410\n1220         0.8660                  72.120  0.7760    -0.0790\n1221         0.8640                  72.300  0.8460    -0.0230\n1222         0.9040                  72.480  0.8220    -0.1530\n1223         0.8865                  72.930  0.8565     0.0865\n1224         0.8080                  72.840  0.8270     0.1100\n1225         0.8220                  73.020  0.8350     0.1490\n1226         0.8660                  73.200  0.8870     0.1450\n1227         0.9250                  73.300  0.9040     0.1380\n1228         0.8970                  73.400  0.9260     0.1300\n1229         0.9030                  73.500  0.9160    -0.0710\n1230         0.9250                  73.600  0.9380     0.0220\n1231         0.8760                  73.800  0.8790     0.0630\n1232         0.9540                  65.620  0.5420    -0.0510\n1233         0.9200                  66.500  0.6360    -0.1040\n1234         0.9170                  66.720  0.7270     0.0080\n1235         0.9260                  66.940  0.6200    -0.0300\n1236         0.9090                  67.160  0.5980    -0.0530\n1237         0.9240                  67.380  0.6350    -0.1270\n1238         0.9430                  67.600  0.5870    -0.1300\n1239         0.9450                  67.825  0.7000    -0.0630\n1240         0.9130                  68.050  0.7140    -0.0560\n1241         0.9220                  68.275  0.7580    -0.1690\n1242         0.9330                  68.500  0.7710    -0.1310\n1243         0.9540                  68.725  0.7620    -0.0790\n1244         0.9510                  68.950  0.7420     0.0460\n1245         0.9360                  68.560  0.9360     0.0390\n1246         0.9190                  69.040  0.8960    -0.0230\n1247         0.9170                  69.200  0.8960     0.0260\n1248         0.9310                  69.360  0.9070    -0.0290\n1249         0.9250                  69.520  0.9040    -0.0230\n1250         0.9320                  69.680  0.8900     0.0320\n1251         0.9080                  69.840  0.8880     0.0490\n1252         0.9010                  70.000  0.8960     0.0040\n1253         0.9340                  70.175  0.9040    -0.0580\n1254         0.9280                  70.350  0.9210    -0.0290\n1255         0.9410                  70.525  0.9420    -0.1230\n1256         0.9490                  70.700  0.9450    -0.1060\n1257         0.9530                  70.875  0.9580    -0.0890\n1258         0.9550                  71.050  0.8510     0.0270\n1259         0.9420                  71.225  0.9300     0.1010\n1260         0.9130                  46.000  0.6490    -0.0920\n1261         0.7880                  46.900  0.6900    -0.1660\n1262         0.8100                  47.800  0.7490    -0.1040\n1263         0.8770                  48.700  0.7390    -0.1620\n1264         0.9170                  49.600  0.7390    -0.2110\n1265         0.8580                  50.500  0.8350    -0.1630\n1266         0.9070                  51.400  0.5900    -0.1720\n1267         0.8390                  52.300  0.7140    -0.0860\n1268         0.8810                  53.200  0.7940    -0.1260\n1269         0.8980                  54.100  0.8620    -0.1360\n1270         0.8750                  54.625  0.7740    -0.0800\n1271         0.8700                  55.150  0.7870    -0.1390\n1272         0.8410                  55.675  0.7530    -0.0610\n1273         0.8480                  56.200  0.7380    -0.1450\n1274         0.8910                  56.725  0.7570    -0.0270\n1275         0.9220                  57.250  0.7040    -0.1450\n1276         0.7750                  70.020  0.7150    -0.0560\n1277         0.8270                  70.240  0.6560    -0.0630\n1278         0.7540                  70.460  0.5240    -0.1060\n1279         0.8110                  70.680  0.6000    -0.1000\n1280         0.8160                  70.900  0.6770    -0.0370\n1281         0.8090                  71.120  0.6820    -0.0520\n1282         0.7750                  71.340  0.6180    -0.0530\n1283         0.7970                  71.560  0.6420    -0.0540\n1284         0.7380                  71.780  0.6230    -0.0470\n1285         0.7680                  72.000  0.6160    -0.0400\n1286         0.8110                  72.275  0.5910     0.0220\n1287         0.8070                  72.550  0.5380     0.0100\n1288         0.7980                  72.825  0.6000    -0.0930\n1289         0.7830                  73.100  0.7060    -0.0600\n1290         0.8080                  73.375  0.7110    -0.1110\n1291         0.8110                  73.650  0.7170    -0.0310\n1292         0.8100                  73.925  0.7230     0.0030\n1293         0.9610                  70.400  0.9160    -0.0775\n1294         0.9570                  70.640  0.7820    -0.0970\n1295         0.9480                  70.760  0.8340    -0.1540\n1296         0.9290                  70.880  0.7490    -0.1310\n1297         0.9500                  71.000  0.7960    -0.1420\n1298         0.9440                  71.120  0.8190    -0.1260\n1299         0.9370                  71.240  0.7550    -0.0630\n1300         0.9290                  71.360  0.7590    -0.1050\n1301         0.9480                  71.480  0.7380    -0.0320\n1302         0.9560                  71.600  0.7320    -0.0760\n1303         0.9420                  71.725  0.7680    -0.0520\n1304         0.9030                  71.850  0.7560    -0.0360\n1305         0.9100                  71.975  0.7220    -0.0790\n1306         0.9490                  72.100  0.7780    -0.0530\n1307         0.9350                  72.225  0.7830    -0.1250\n1308         0.9260                  72.350  0.7820    -0.0740\n1309         0.9340                  72.475  0.7810     0.0010\n1310         0.8180                  61.780  0.5470    -0.1490\n1311         0.7120                  61.897  0.3650    -0.0800\n1312         0.6660                  62.015  0.3580    -0.0720\n1313         0.7380                  62.132  0.4680    -0.0880\n1314         0.8220                  62.250  0.5040    -0.1180\n1315         0.7510                  62.015  0.5220    -0.1280\n1316         0.7820                  62.015  0.5420    -0.1610\n1317         0.7610                  62.015  0.4540    -0.1600\n1318         0.7750                  62.015  0.6570    -0.1610\n1319         0.7660                  62.015  0.5560    -0.1700\n1320         0.8180                  62.015  0.6080    -0.1490\n1321         0.8240                  62.015  0.6320    -0.1830\n1322         0.8190                  62.015  0.6550    -0.1600\n1323         0.8330                  62.015  0.6530    -0.1320\n1324         0.8600                  62.015  0.6950    -0.1490\n1325         0.9510                  71.000  0.9640     0.1495\n1326         0.9170                  71.080  0.9100     0.1430\n1327         0.9230                  71.120  0.9120     0.1220\n1328         0.9030                  71.160  0.8640     0.2170\n1329         0.9700                  71.200  0.9050     0.1380\n1330         0.9210                  71.240  0.9410     0.1580\n1331         0.9290                  71.280  0.9440     0.1290\n1332         0.9160                  71.320  0.9360     0.1560\n1333         0.9330                  71.360  0.9450     0.1980\n1334         0.9290                  71.400  0.9350     0.2080\n1335         0.9120                  71.525  0.9180     0.1420\n1336         0.9140                  71.650  0.9350     0.1670\n1337         0.9310                  71.775  0.9420     0.0730\n1338         0.9340                  71.900  0.9420     0.0870\n1339         0.9360                  72.025  0.9510     0.0860\n1340         0.9320                  72.150  0.9530     0.1740\n1341         0.9490                  72.275  0.9390     0.2340\n1342         0.8820                  68.680  0.6300    -0.0330\n1343         0.8300                  69.140  0.6420    -0.0200\n1344         0.8310                  69.600  0.6770     0.0010\n1345         0.8630                  69.140  0.7610     0.0320\n1346         0.8250                  69.140  0.6980     0.0170\n1347         0.8170                  69.140  0.6900    -0.0010\n1348         0.8700                  69.140  0.6930     0.0910\n1349         0.8850                  69.140  0.7010     0.0190\n1350         0.8950                  69.140  0.7190    -0.0470\n1351         0.8910                  69.140  0.7600    -0.0680\n1352         0.8960                  69.140  0.7410    -0.1770\n1353         0.8930                  69.140  0.8140    -0.1290\n1354         0.9010                  69.140  0.7990    -0.0105\n1355         0.8660                  69.140  0.8180    -0.0105\n1356         0.8830                  69.140  0.8000    -0.0105\n1357         0.7240                  60.500  0.7020    -0.0930\n1358         0.7270                  60.600  0.8180    -0.0040\n1359         0.7010                  60.700  0.8160     0.0130\n1360         0.6760                  60.800  0.7440    -0.0040\n1361         0.7590                  60.900  0.7840     0.0570\n1362         0.7510                  61.000  0.7760    -0.1240\n1363         0.7290                  61.100  0.7490    -0.0780\n1364         0.7010                  61.200  0.6930     0.0580\n1365         0.8100                  61.300  0.8530    -0.0040\n1366         0.8440                  61.400  0.8470     0.0170\n1367         0.8570                  61.550  0.7030     0.0040\n1368         0.6630                  61.700  0.8320     0.1190\n1369         0.8750                  61.850  0.7800    -0.0710\n1370         0.8800                  62.000  0.7800    -0.0510\n1371         0.7900                  62.150  0.7800    -0.0510\n1372         0.8830                  62.300  0.7800    -0.0680\n1373         0.7830                  50.760  0.7870    -0.0270\n1374         0.7080                  51.420  0.7160    -0.0130\n1375         0.7740                  52.080  0.5620     0.2560\n1376         0.8370                  52.740  0.6070     0.3080\n1377         0.8130                  53.400  0.5970     0.1390\n1378         0.8830                  54.060  0.7360    -0.0470\n1379         0.8320                  54.720  0.5770     0.2130\n1380         0.8030                  55.380  0.6540     0.0540\n1381         0.7890                  56.040  0.6540     0.1100\n1382         0.7900                  56.700  0.7590     0.1480\n1383         0.6380                  57.150  0.7750     0.1790\n1384         0.7050                  57.600  0.8000     0.1160\n1385         0.6750                  58.050  0.8070     0.1540\n1386         0.6870                  58.500  0.8500     0.1010\n1387         0.7400                  58.950  0.8300     0.2960\n1388         0.6190                  59.400  0.8220     0.1130\n1389         0.6000                  59.850  0.8560     0.1360\n1390         0.8940                  66.380  0.8630     0.3290\n1391         0.8890                  66.560  0.8700     0.3880\n1392         0.8320                  66.740  0.8680     0.4230\n1393         0.8930                  66.920  0.8680     0.5230\n1394         0.8980                  67.100  0.8600     0.5340\n1395         0.8840                  67.280  0.9270     0.3980\n1396         0.9060                  67.460  0.8470     0.3780\n1397         0.9260                  67.640  0.7810     0.4540\n1398         0.9330                  67.820  0.9000     0.5510\n1399         0.8660                  68.000  0.8850     0.3140\n1400         0.9080                  68.075  0.9240     0.3540\n1401         0.8770                  68.150  0.9230     0.2110\n1402         0.8730                  68.225  0.9050     0.2570\n1403         0.9030                  68.300  0.8980     0.3070\n1404         0.8670                  68.375  0.8400     0.2720\n1405         0.8830                  68.450  0.8360     0.2930\n1406         0.8670                  68.525  0.8810     0.3010\n1407         0.7110                  66.220  0.7810    -0.1240\n1408         0.8630                  66.300  0.6240    -0.1410\n1409         0.7150                  66.380  0.6030    -0.2040\n1410         0.6140                  66.460  0.5680    -0.1810\n1411         0.6480                  66.540  0.5360    -0.2120\n1412         0.6800                  66.620  0.5890    -0.2370\n1413         0.6090                  66.700  0.7110    -0.2310\n1414         0.7020                  66.750  0.6140    -0.1690\n1415         0.7170                  66.800  0.4780    -0.2230\n1416         0.7330                  66.850  0.6500    -0.1960\n1417         0.6100                  66.900  0.6590    -0.2140\n1418         0.7190                  66.950  0.6680    -0.2040\n1419         0.7110                  67.000  0.5910    -0.2030\n1420         0.7550                  67.050  0.4740    -0.2310\n1421         0.8200                  66.100  0.6230    -0.1810\n1422         0.7920                  66.420  0.4590    -0.1810\n1423         0.6450                  66.580  0.4150    -0.1920\n1424         0.7550                  66.740  0.4560    -0.2300\n1425         0.7950                  66.900  0.5150    -0.1900\n1426         0.6920                  67.060  0.4460    -0.2450\n1427         0.7390                  67.220  0.4710    -0.2190\n1428         0.7950                  67.380  0.5410    -0.2320\n1429         0.8630                  67.540  0.6490    -0.0260\n1430         0.8510                  67.700  0.6530    -0.0190\n1431         0.8800                  67.875  0.6440    -0.0680\n1432         0.8760                  68.050  0.6440    -0.2400\n1433         0.8470                  68.225  0.5290    -0.1790\n1434         0.7920                  68.400  0.6310    -0.1390\n1435         0.8570                  68.575  0.5100    -0.1170\n1436         0.7360                  68.750  0.4470    -0.0370\n1437         0.7600                  48.740  0.7470    -0.0420\n1438         0.8450                  49.580  0.7080    -0.0020\n1439         0.8130                  50.420  0.5780    -0.0570\n1440         0.8520                  51.260  0.7600    -0.0390\n1441         0.8300                  52.100  0.8010    -0.0170\n1442         0.8820                  52.940  0.7330     0.0290\n1443         0.8850                  53.780  0.6490     0.0780\n1444         0.8780                  54.620  0.7630     0.0500\n1445         0.8210                  55.460  0.8340     0.0060\n1446         0.7470                  56.300  0.7580     0.1310\n1447         0.7540                  56.775  0.7390     0.1280\n1448         0.7400                  57.250  0.7720     0.0560\n1449         0.7400                  57.725  0.7290     0.0750\n1450         0.8050                  58.200  0.7040     0.1350\n1451         0.8000                  58.675  0.6870     0.1430\n1452         0.7930                  59.150  0.7110     0.0840\n1453         0.8520                  60.920  0.6240    -0.2630\n1454         0.8200                  61.240  0.4940    -0.2470\n1455         0.8600                  61.560  0.4870    -0.2710\n1456         0.8450                  61.880  0.4600    -0.2470\n1457         0.8840                  62.200  0.4840    -0.1940\n1458         0.8590                  62.520  0.5790    -0.2330\n1459         0.8980                  62.840  0.5640    -0.2290\n1460         0.8970                  63.160  0.5690    -0.2220\n1461         0.8770                  63.480  0.5330     0.0810\n1462         0.9090                  63.800  0.4310    -0.0360\n1463         0.8850                  63.925  0.5030     0.0070\n1464         0.8580                  64.050  0.5990    -0.0050\n1465         0.9010                  64.175  0.6630    -0.0780\n1466         0.8830                  64.300  0.7150    -0.0840\n1467         0.8850                  64.425  0.7840     0.1230\n1468         0.8790                  64.550  0.7700     0.1690\n1469         0.8630                  64.675  0.8290     0.4280\n1470         0.9030                  64.860  0.8980    -0.0420\n1471         0.8850                  65.040  0.8490     0.0160\n1472         0.9120                  65.100  0.8780     0.0530\n1473         0.8810                  65.160  0.8890     0.0650\n1474         0.8560                  65.220  0.9200     0.0920\n1475         0.8640                  65.280  0.9360     0.0920\n1476         0.8535                  65.340  0.9260     0.0920\n1477         0.8240                  65.400  0.9150     0.1930\n1478         0.8490                  65.550  0.9490     0.1220\n1479         0.8360                  65.700  0.9620     0.2070\n1480         0.8510                  65.850  0.9440     0.0450\n1481         0.8620                  66.000  0.9110     0.1190\n1482         0.8270                  66.150  0.9420     0.0500\n1483         0.8260                  66.300  0.9510     0.1510\n1484         0.7980                  66.450  0.9320     0.1710\n1485         0.9790                  69.100  0.9220     0.3180\n1486         0.9700                  69.220  0.8380     0.3320\n1487         0.9540                  69.280  0.7590     0.3270\n1488         0.9640                  69.340  0.8160     0.3370\n1489         0.9550                  69.400  0.8410     0.3990\n1490         0.9490                  69.460  0.9000     0.3320\n1491         0.9350                  69.520  0.8890     0.3670\n1492         0.9370                  69.580  0.9050     0.3420\n1493         0.9100                  69.640  0.8570     0.3500\n1494         0.9360                  69.700  0.8330     0.2960\n1495         0.9540                  69.800  0.8210     0.2460\n1496         0.9370                  69.900  0.8130     0.2860\n1497         0.9280                  70.000  0.8380     0.2210\n1498         0.9430                  70.100  0.8540     0.2650\n1499         0.9290                  70.200  0.8850     0.1970\n1500         0.8540                  70.300  0.8150     0.2540\n1501         0.8630                  70.400  0.8570     0.3090\n1502         0.9650                  66.780  0.9110     0.1930\n1503         0.9185                  66.760  0.8720     0.1930\n1504         0.9530                  66.740  0.8780     0.2500\n1505         0.9120                  66.720  0.8310     0.1960\n1506         0.9260                  66.700  0.8280     0.2390\n1507         0.9220                  66.680  0.8630     0.1560\n1508         0.9030                  66.660  0.8230     0.2100\n1509         0.9250                  66.640  0.7920     0.2690\n1510         0.9020                  66.620  0.8660     0.2170\n1511         0.9040                  66.600  0.8490     0.2150\n1512         0.8970                  66.475  0.7580     0.1400\n1513         0.9210                  66.350  0.8680     0.1930\n1514         0.9040                  66.225  0.8250     0.1120\n1515         0.9170                  66.100  0.8360     0.1400\n1516         0.9370                  65.975  0.8500     0.0290\n1517         0.9200                  65.850  0.8160     0.1900\n1518         0.9000                  65.725  0.7360     0.1910\n1519         0.9120                  66.780  0.8070    -0.1220\n1520         0.8750                  66.860  0.7860    -0.1750\n1521         0.8790                  66.940  0.8080    -0.1520\n1522         0.9240                  67.020  0.8250    -0.1280\n1523         0.8930                  67.100  0.8320    -0.1680\n1524         0.8910                  67.180  0.8510    -0.0900\n1525         0.8650                  67.260  0.8710     0.0570\n1526         0.9170                  67.340  0.8880    -0.0530\n1527         0.9020                  67.420  0.9040    -0.0830\n1528         0.8910                  67.500  0.9170    -0.0420\n1529         0.9000                  67.500  0.8860    -0.0820\n1530         0.9140                  67.500  0.8980    -0.1010\n1531         0.9170                  67.500  0.8760    -0.1060\n1532         0.9330                  67.500  0.9030    -0.1040\n1533         0.9210                  67.500  0.9080    -0.0910\n1534         0.9140                  67.500  0.8990    -0.0510\n1535         0.9050                  67.500  0.8780    -0.0520\n1536         0.9030                  61.340  0.7840    -0.1220\n1537         0.8940                  61.820  0.8310    -0.0300\n1538         0.9050                  62.060  0.9520     0.0060\n1539         0.9030                  62.300  0.9520    -0.0370\n1540         0.9240                  62.540  0.9340     0.0350\n1541         0.9330                  62.780  0.9140    -0.0440\n1542         0.9630                  63.020  0.9500    -0.0400\n1543         0.9520                  63.260  0.9540     0.0550\n1544         0.9680                  63.500  0.9800     0.3680\n1545         0.9450                  63.800  0.9840     0.2020\n1546         0.9420                  64.100  0.9850     0.1160\n1547         0.9210                  64.400  0.9700     0.3120\n1548         0.9150                  64.700  0.9700     0.2980\n1549         0.8500                  65.000  0.9280     0.1930\n1550         0.8960                  65.300  0.9270     0.1860\n1551         0.8790                  65.600  0.9590     0.3090\n1552         0.9550                  65.500  0.8380    -0.1210\n1553         0.9460                  65.460  0.7980    -0.0350\n1554         0.9220                  65.380  0.6780    -0.2300\n1555         0.9450                  65.340  0.6770    -0.1210\n1556         0.9320                  65.300  0.7680    -0.1610\n1557         0.9310                  65.260  0.7660    -0.2320\n1558         0.9320                  65.220  0.8040    -0.1990\n1559         0.8960                  65.180  0.6420    -0.2280\n1560         0.9040                  65.140  0.5700    -0.1880\n1561         0.9110                  65.100  0.5120    -0.0860\n1562         0.9020                  64.925  0.4580    -0.0560\n1563         0.8960                  64.750  0.6360     0.0540\n1564         0.8870                  64.575  0.6110     0.0720\n1565         0.8880                  64.400  0.6260     0.1280\n1566         0.8050                  64.225  0.6120    -0.1210\n1567         0.8120                  64.050  0.5960    -0.1210\n1568         0.8990                  63.875  0.7700    -0.1210\n1569         0.8880                  64.180  0.8860    -0.0030\n1570         0.8560                  64.260  0.9180     0.0710\n1571         0.8050                  64.340  0.8890     0.1820\n1572         0.8150                  64.420  0.8340    -0.0800\n1573         0.7870                  64.500  0.8310    -0.0240\n1574         0.8980                  64.580  0.8180     0.0870\n1575         0.7750                  64.660  0.8560    -0.1290\n1576         0.7590                  64.740  0.9200    -0.0460\n1577         0.7920                  64.820  0.8955    -0.0190\n1578         0.8490                  64.900  0.8955     0.0660\n1579         0.8760                  65.000  0.8940    -0.1090\n1580         0.8235                  65.100  0.8955    -0.0215\n1581         0.8320                  65.200  0.9090    -0.0610\n1582         0.8480                  65.300  0.9520    -0.1460\n1583         0.7650                  65.400  0.9450     0.0660\n1584         0.7990                  65.500  0.8970     0.1070\n1585         0.8790                  65.600  0.9750    -0.1790\n1586         0.8250                  58.720  0.6730     0.0090\n1587         0.7560                  58.640  0.6440    -0.0520\n1588         0.7270                  58.600  0.6590    -0.1040\n1589         0.6630                  58.560  0.6380    -0.1700\n1590         0.6820                  58.520  0.7060    -0.1690\n1591         0.6940                  58.480  0.5430    -0.1760\n1592         0.6380                  58.440  0.6640    -0.1620\n1593         0.6690                  58.400  0.6100    -0.1350\n1594         0.7750                  58.175  0.5330    -0.1410\n1595         0.7900                  57.950  0.5950    -0.1240\n1596         0.7890                  57.725  0.5530    -0.1240\n1597         0.8700                  57.500  0.6510    -0.1030\n1598         0.8220                  40.400  0.4310    -0.0600\n1599         0.8280                  41.600  0.4560    -0.0650\n1600         0.8430                  42.800  0.3440    -0.0730\n1601         0.8060                  44.000  0.4110    -0.0610\n1602         0.8570                  45.200  0.6650    -0.0780\n1603         0.8650                  46.400  0.6330    -0.0730\n1604         0.8960                  47.600  0.4700    -0.0870\n1605         0.7990                  48.800  0.5760    -0.0890\n1606         0.7660                  50.000  0.6420    -0.0580\n1607         0.7360                  51.200  0.6670    -0.1070\n1608         0.7680                  51.675  0.7330    -0.0790\n1609         0.7540                  52.150  0.7530    -0.0810\n1610         0.7750                  52.625  0.7630    -0.0510\n1611         0.7590                  53.100  0.6320    -0.0470\n1612         0.7170                  53.575  0.6430     0.0060\n1613         0.6850                  54.050  0.6680    -0.0760\n1614         0.6660                  54.525  0.6520    -0.0700\n     Perceptions.of.Corruption Positive.Affect Negative.Affect   Region\n1                       0.8820          0.4140          0.2580     Asia\n2                       0.8500          0.4810          0.2370     Asia\n3                       0.7070          0.5170          0.2750     Asia\n4                       0.7310          0.4800          0.2670     Asia\n5                       0.7760          0.6140          0.2680     Asia\n6                       0.8230          0.5470          0.2730     Asia\n7                       0.8710          0.4920          0.3750     Asia\n8                       0.8810          0.4910          0.3390     Asia\n9                       0.7930          0.5010          0.3480     Asia\n10                      0.9540          0.4350          0.3710     Asia\n11                      0.9280          0.3850          0.4050     Asia\n12                      0.9240          0.3240          0.5020     Asia\n13                      0.9460          0.1790          0.6070     Asia\n14                      0.7330          0.2060          0.5760     Asia\n15                      0.8750          0.4890          0.2460   Europe\n16                      0.8640          0.5640          0.2790   Europe\n17                      0.7260          0.5760          0.3000   Europe\n18                      0.8770          0.5660          0.2570   Europe\n19                      0.8480          0.5530          0.2710   Europe\n20                      0.8630          0.5410          0.3380   Europe\n21                      0.8830          0.5730          0.3350   Europe\n22                      0.8850          0.5790          0.3500   Europe\n23                      0.9010          0.5670          0.3220   Europe\n24                      0.8760          0.5470          0.3340   Europe\n25                      0.8990          0.5920          0.3190   Europe\n26                      0.9140          0.5480          0.2740   Europe\n27                      0.8910          0.5630          0.2650   Europe\n28                      0.8960          0.5540          0.2540   Europe\n29                      0.8460          0.5470          0.2550   Europe\n30                      0.8520          0.7480          0.3280 Americas\n31                      0.8810          0.7500          0.2790 Americas\n32                      0.8650          0.7200          0.3180 Americas\n33                      0.8850          0.7620          0.2370 Americas\n34                      0.8550          0.7650          0.2110 Americas\n35                      0.7550          0.7690          0.2320 Americas\n36                      0.8170          0.7440          0.2720 Americas\n37                      0.8230          0.7660          0.2540 Americas\n38                      0.8540          0.7690          0.2380 Americas\n39                      0.8510          0.7680          0.3050 Americas\n40                      0.8510          0.7320          0.3120 Americas\n41                      0.8410          0.7150          0.2920 Americas\n42                      0.8550          0.7320          0.3210 Americas\n43                      0.8300          0.7350          0.3190 Americas\n44                      0.8160          0.6790          0.3420 Americas\n45                      0.8160          0.6850          0.3450 Americas\n46                      0.8100          0.7240          0.2840 Americas\n47                      0.8500          0.4530          0.4690     Asia\n48                      0.8170          0.4540          0.4120     Asia\n49                      0.8760          0.4860          0.3850     Asia\n50                      0.8820          0.4790          0.4110     Asia\n51                      0.8910          0.4370          0.4260     Asia\n52                      0.8750          0.4110          0.4590     Asia\n53                      0.8930          0.4700          0.4640     Asia\n54                      0.9000          0.5030          0.4500     Asia\n55                      0.9200          0.5100          0.4040     Asia\n56                      0.9010          0.5270          0.4380     Asia\n57                      0.9210          0.5160          0.4370     Asia\n58                      0.8650          0.5520          0.4370     Asia\n59                      0.6770          0.5350          0.4550     Asia\n60                      0.5830          0.5370          0.4300     Asia\n61                      0.7050          0.5660          0.4780     Asia\n62                      0.7050          0.5310          0.5490     Asia\n63                      0.3900          0.7700          0.2380  Oceania\n64                      0.5130          0.7620          0.2150  Oceania\n65                      0.4310          0.7290          0.2180  Oceania\n66                      0.3660          0.7620          0.2200  Oceania\n67                      0.3820          0.7240          0.1950  Oceania\n68                      0.3680          0.7280          0.2140  Oceania\n69                      0.4320          0.7700          0.1770  Oceania\n70                      0.4420          0.7400          0.2450  Oceania\n71                      0.3570          0.7500          0.2100  Oceania\n72                      0.3990          0.7360          0.2360  Oceania\n73                      0.4110          0.7280          0.2250  Oceania\n74                      0.4050          0.7060          0.1870  Oceania\n75                      0.4300          0.7270          0.2020  Oceania\n76                      0.4910          0.7260          0.2050  Oceania\n77                      0.4540          0.7400          0.2350  Oceania\n78                      0.5450          0.7110          0.2440  Oceania\n79                      0.4900          0.7460          0.1740   Europe\n80                      0.6140          0.7160          0.1730   Europe\n81                      0.5460          0.7100          0.1560   Europe\n82                      0.7030          0.6720          0.1450   Europe\n83                      0.7710          0.7120          0.1570   Europe\n84                      0.6790          0.7250          0.1630   Europe\n85                      0.5670          0.7210          0.1700   Europe\n86                      0.5570          0.7480          0.1640   Europe\n87                      0.5240          0.7130          0.1970   Europe\n88                      0.5180          0.6990          0.1800   Europe\n89                      0.5230          0.6950          0.2260   Europe\n90                      0.4570          0.7270          0.2050   Europe\n91                      0.4640          0.7160          0.2060   Europe\n92                      0.5010          0.7220          0.2590   Europe\n93                      0.5240          0.7180          0.2260   Europe\n94                      0.7740          0.4690          0.2760     Asia\n95                      0.8710          0.4740          0.2840     Asia\n96                      0.7150          0.5610          0.2270     Asia\n97                      0.7540          0.5220          0.2340     Asia\n98                      0.8580          0.5160          0.2720     Asia\n99                      0.7950          0.5220          0.2580     Asia\n100                     0.7630          0.5230          0.2660     Asia\n101                     0.6990          0.5160          0.2420     Asia\n102                     0.6540          0.5020          0.2200     Asia\n103                     0.6160          0.5200          0.2060     Asia\n104                     0.6070          0.5090          0.1910     Asia\n105                     0.6530          0.5120          0.1980     Asia\n106                     0.5610          0.5270          0.1910     Asia\n107                     0.4570          0.5770          0.1640     Asia\n108                     0.7860          0.4590          0.3210     Asia\n109                     0.8060          0.4840          0.3130     Asia\n110                     0.8020          0.5450          0.2320     Asia\n111                     0.7760          0.5060          0.2230     Asia\n112                     0.7740          0.4960          0.2920     Asia\n113                     0.7570          0.5010          0.2350     Asia\n114                     0.7650          0.5370          0.1830     Asia\n115                     0.7430          0.4920          0.2460     Asia\n116                     0.7890          0.4885          0.2310     Asia\n117                     0.7210          0.5430          0.2260     Asia\n118                     0.6880          0.4370          0.2350     Asia\n119                     0.6350          0.4360          0.2140     Asia\n120                     0.7010          0.4330          0.3610     Asia\n121                     0.6560          0.4330          0.3690     Asia\n122                     0.7420          0.4850          0.3320     Asia\n123                     0.7460          0.5040          0.4480     Asia\n124                     0.6170          0.3940          0.4480     Asia\n125                     0.7080          0.5350          0.2690   Europe\n126                     0.6950          0.5020          0.2350   Europe\n127                     0.6960          0.5320          0.2460   Europe\n128                     0.6760          0.5440          0.2230   Europe\n129                     0.7060          0.5320          0.2080   Europe\n130                     0.6720          0.4930          0.2490   Europe\n131                     0.6570          0.5150          0.1810   Europe\n132                     0.6530          0.5450          0.2060   Europe\n133                     0.6820          0.5750          0.2090   Europe\n134                     0.6690          0.5460          0.1840   Europe\n135                     0.6640          0.5030          0.1820   Europe\n136                     0.6540          0.5020          0.2330   Europe\n137                     0.7180          0.4090          0.2360   Europe\n138                     0.5460          0.5590          0.1900   Europe\n139                     0.5980          0.6770          0.2600   Europe\n140                     0.7210          0.7440          0.2180   Europe\n141                     0.6520          0.7090          0.2420   Europe\n142                     0.6970          0.7930          0.2400   Europe\n143                     0.7110          0.7520          0.2250   Europe\n144                     0.7580          0.7180          0.2380   Europe\n145                     0.5740          0.7380          0.2170   Europe\n146                     0.5120          0.7440          0.2520   Europe\n147                     0.4690          0.7470          0.2400   Europe\n148                     0.4970          0.7010          0.2600   Europe\n149                     0.5430          0.7130          0.2340   Europe\n150                     0.6300          0.6820          0.2500   Europe\n151                     0.6720          0.6990          0.2440   Europe\n152                     0.6340          0.6190          0.2600   Europe\n153                     0.5230          0.6870          0.2600   Europe\n154                     0.4830          0.7180          0.2350   Europe\n155                     0.7940          0.7080          0.4320 Americas\n156                     0.8170          0.7460          0.3880 Americas\n157                     0.8010          0.7230          0.3920 Americas\n158                     0.7630          0.7420          0.3720 Americas\n159                     0.7810          0.7200          0.3500 Americas\n160                     0.8250          0.6890          0.3610 Americas\n161                     0.8400          0.6990          0.4090 Americas\n162                     0.8120          0.7210          0.4100 Americas\n163                     0.8320          0.7690          0.3980 Americas\n164                     0.8620          0.7490          0.3930 Americas\n165                     0.8530          0.7360          0.3760 Americas\n166                     0.8190          0.6550          0.4340 Americas\n167                     0.7860          0.7050          0.3870 Americas\n168                     0.8570          0.7010          0.4190 Americas\n169                     0.8680          0.7290          0.3820 Americas\n170                     0.8120          0.7210          0.4030 Americas\n171                     0.8400          0.7380          0.4260 Americas\n172                     0.9260          0.5700          0.2960   Europe\n173                     0.9590          0.5070          0.3900   Europe\n174                     0.9330          0.4650          0.4090   Europe\n175                     0.9250          0.5510          0.3260   Europe\n176                     0.9530          0.4690          0.3380   Europe\n177                     0.9700          0.4890          0.3150   Europe\n178                     0.9760          0.4910          0.2620   Europe\n179                     0.9600          0.4860          0.2860   Europe\n180                     0.9570          0.5660          0.3040   Europe\n181                     0.9230          0.5270          0.2710   Europe\n182                     0.9130          0.5680          0.2770   Europe\n183                     0.9630          0.5450          0.2380   Europe\n184                     0.9160          0.6020          0.3250   Europe\n185                     0.9210          0.6040          0.3050   Europe\n186                     0.7230          0.6430          0.2260   Africa\n187                     0.8060          0.6770          0.2180   Africa\n188                     0.8140          0.6170          0.1720   Africa\n189                     0.8160          0.6470          0.1600   Africa\n190                     0.8140          0.6950          0.1710   Africa\n191                     0.7490          0.6710          0.2440   Africa\n192                     0.7430          0.6260          0.2450   Africa\n193                     0.8600          0.6760          0.2610   Africa\n194                     0.7290          0.6570          0.2520   Africa\n195                     0.7310          0.6120          0.2760   Africa\n196                     0.8070          0.6880          0.2670   Africa\n197                     0.7920          0.6650          0.2730   Africa\n198                     0.8310          0.6230          0.2870   Africa\n199                     0.7450          0.7700          0.3020 Americas\n200                     0.7280          0.7750          0.2990 Americas\n201                     0.6880          0.7180          0.2650 Americas\n202                     0.7230          0.7440          0.2740 Americas\n203                     0.6560          0.7260          0.2500 Americas\n204                     0.6620          0.6980          0.2680 Americas\n205                     0.6230          0.6850          0.3500 Americas\n206                     0.7070          0.7250          0.2760 Americas\n207                     0.7100          0.7180          0.2740 Americas\n208                     0.7710          0.6870          0.3250 Americas\n209                     0.7810          0.7110          0.3020 Americas\n210                     0.7940          0.6690          0.3080 Americas\n211                     0.7630          0.6770          0.3500 Americas\n212                     0.7620          0.7010          0.3370 Americas\n213                     0.7290          0.6530          0.3890 Americas\n214                     0.7390          0.6620          0.4070 Americas\n215                     0.7420          0.6810          0.3410 Americas\n216                     0.9760          0.5000          0.2260   Europe\n217                     0.9410          0.5130          0.2380   Europe\n218                     0.9480          0.4900          0.2710   Europe\n219                     0.9380          0.5100          0.2370   Europe\n220                     0.9620          0.5370          0.2780   Europe\n221                     0.9550          0.5420          0.2360   Europe\n222                     0.9410          0.5560          0.2140   Europe\n223                     0.9360          0.5450          0.1720   Europe\n224                     0.9110          0.5420          0.1890   Europe\n225                     0.9520          0.5540          0.1890   Europe\n226                     0.9430          0.5770          0.2000   Europe\n227                     0.9010          0.6420          0.2210   Europe\n228                     0.8910          0.6470          0.2530   Europe\n229                     0.9420          0.5820          0.1650   Europe\n230                     0.7980          0.6780          0.2660   Africa\n231                     0.8330          0.6090          0.2810   Africa\n232                     0.8870          0.5380          0.3040   Africa\n233                     0.7670          0.5650          0.2170   Africa\n234                     0.7070          0.5780          0.2050   Africa\n235                     0.7260          0.4870          0.3000   Africa\n236                     0.7650          0.5920          0.2870   Africa\n237                     0.8010          0.6040          0.2560   Africa\n238                     0.6930          0.5550          0.3590   Africa\n239                     0.7210          0.5900          0.3370   Africa\n240                     0.7270          0.5800          0.3540   Africa\n241                     0.7570          0.6560          0.3430   Africa\n242                     0.7290          0.6560          0.3650   Africa\n243                     0.8090          0.6050          0.3880   Africa\n244                     0.7360          0.6200          0.3630   Africa\n245                     0.8290          0.7040          0.3410     Asia\n246                     0.8790          0.7040          0.3200     Asia\n247                     0.8880          0.6000          0.3350     Asia\n248                     0.9650          0.6910          0.1880     Asia\n249                     0.8960          0.6620          0.4220     Asia\n250                     0.7750          0.6370          0.3080     Asia\n251                     0.8900          0.7130          0.3520     Asia\n252                     0.8120          0.6700          0.4400     Asia\n253                     0.8430          0.6820          0.4820     Asia\n254                     0.8250          0.7310          0.3990     Asia\n255                     0.8400          0.7130          0.3980     Asia\n256                     0.8210          0.6690          0.4080     Asia\n257                     0.8435          0.7230          0.4140     Asia\n258                     0.8280          0.7040          0.3900     Asia\n259                     0.8630          0.7710          0.3900     Asia\n260                     0.8440          0.7590          0.3910     Asia\n261                     0.8600          0.7560          0.3880     Asia\n262                     0.9070          0.5880          0.2710   Africa\n263                     0.9100          0.6300          0.2490   Africa\n264                     0.9450          0.6130          0.3120   Africa\n265                     0.9250          0.5920          0.2500   Africa\n266                     0.8750          0.5940          0.2740   Africa\n267                     0.8700          0.6080          0.2720   Africa\n268                     0.8980          0.6170          0.2840   Africa\n269                     0.8670          0.6400          0.2680   Africa\n270                     0.8560          0.6040          0.2160   Africa\n271                     0.8680          0.6240          0.3460   Africa\n272                     0.8790          0.6350          0.3670   Africa\n273                     0.8440          0.6320          0.3770   Africa\n274                     0.8840          0.6300          0.3560   Africa\n275                     0.8170          0.6060          0.3260   Africa\n276                     0.8370          0.6260          0.3860   Africa\n277                     0.8490          0.6120          0.3470   Africa\n278                     0.8490          0.5860          0.3620   Africa\n279                     0.5030          0.7830          0.2330 Americas\n280                     0.4060          0.8120          0.2570 Americas\n281                     0.3700          0.8020          0.2020 Americas\n282                     0.4130          0.7930          0.2480 Americas\n283                     0.4130          0.7910          0.2330 Americas\n284                     0.4330          0.8030          0.2480 Americas\n285                     0.4660          0.7760          0.2290 Americas\n286                     0.4060          0.8010          0.2630 Americas\n287                     0.4420          0.7910          0.2590 Americas\n288                     0.4270          0.7920          0.2860 Americas\n289                     0.3850          0.7680          0.2370 Americas\n290                     0.3620          0.7990          0.2180 Americas\n291                     0.3720          0.7730          0.2590 Americas\n292                     0.4360          0.7810          0.2850 Americas\n293                     0.4340          0.7380          0.3070 Americas\n294                     0.3840          0.7630          0.2760 Americas\n295                     0.4420          0.7190          0.2870 Americas\n296                     0.9610          0.5710          0.2630   Africa\n297                     0.8740          0.5980          0.2450   Africa\n298                     0.9440          0.5690          0.2250   Africa\n299                     0.9310          0.6010          0.2210   Africa\n300                     0.8580          0.5600          0.2870   Africa\n301                     0.8760          0.5790          0.2890   Africa\n302                     0.8840          0.4980          0.3160   Africa\n303                     0.8820          0.4370          0.3140   Africa\n304                     0.8810          0.5240          0.3290   Africa\n305                     0.8890          0.5930          0.3580   Africa\n306                     0.8200          0.5640          0.4680   Africa\n307                     0.7920          0.5840          0.5380   Africa\n308                     0.7630          0.5320          0.5440   Africa\n309                     0.8320          0.5560          0.4600   Africa\n310                     0.8050          0.5880          0.4990   Africa\n311                     0.6340          0.7520          0.3480 Americas\n312                     0.7230          0.7080          0.3420 Americas\n313                     0.7410          0.7060          0.3300 Americas\n314                     0.7340          0.7560          0.3000 Americas\n315                     0.7020          0.7600          0.3000 Americas\n316                     0.7530          0.7580          0.3170 Americas\n317                     0.7820          0.7360          0.2880 Americas\n318                     0.7410          0.7910          0.2850 Americas\n319                     0.7580          0.8000          0.2760 Americas\n320                     0.8120          0.7520          0.3330 Americas\n321                     0.8580          0.7920          0.2830 Americas\n322                     0.8360          0.7650          0.2910 Americas\n323                     0.8160          0.7550          0.2760 Americas\n324                     0.8600          0.7410          0.3370 Americas\n325                     0.8120          0.7530          0.3360 Americas\n326                     0.8590          0.7350          0.2210 Americas\n327                     0.7960          0.7750          0.2530 Americas\n328                     0.8080          0.7760          0.3260 Americas\n329                     0.8600          0.7740          0.2870 Americas\n330                     0.7630          0.7680          0.3070 Americas\n331                     0.8370          0.7860          0.2730 Americas\n332                     0.8150          0.7920          0.2650 Americas\n333                     0.8470          0.7850          0.2860 Americas\n334                     0.8680          0.8290          0.2940 Americas\n335                     0.8980          0.8150          0.2780 Americas\n336                     0.8870          0.8250          0.2780 Americas\n337                     0.8430          0.8030          0.2920 Americas\n338                     0.8980          0.7700          0.2940 Americas\n339                     0.8750          0.7900          0.2990 Americas\n340                     0.8550          0.7750          0.3010 Americas\n341                     0.8540          0.7910          0.3220 Americas\n342                     0.8080          0.7590          0.3400 Americas\n343                     0.8310          0.7520          0.3480 Americas\n344                     0.8630          0.7620          0.3060 Americas\n345                     0.7980          0.8150          0.2360 Americas\n346                     0.8200          0.8260          0.2400 Americas\n347                     0.8160          0.8380          0.2330 Americas\n348                     0.7870          0.8400          0.2170 Americas\n349                     0.7630          0.8270          0.2210 Americas\n350                     0.8370          0.7940          0.2690 Americas\n351                     0.7940          0.8370          0.2630 Americas\n352                     0.8130          0.8090          0.2780 Americas\n353                     0.7880          0.7970          0.2900 Americas\n354                     0.7610          0.8110          0.2860 Americas\n355                     0.7810          0.8300          0.2810 Americas\n356                     0.7420          0.7910          0.2750 Americas\n357                     0.7810          0.8020          0.3260 Americas\n358                     0.8360          0.7910          0.3030 Americas\n359                     0.7720          0.7590          0.3500 Americas\n360                     0.7820          0.7740          0.3180 Americas\n361                     0.7510          0.7930          0.2720 Americas\n362                     0.9340          0.5500          0.3370   Europe\n363                     0.9580          0.5570          0.2720   Europe\n364                     0.9730          0.5540          0.2590   Europe\n365                     0.9770          0.5520          0.2730   Europe\n366                     0.9240          0.5720          0.2710   Europe\n367                     0.9360          0.5540          0.2850   Europe\n368                     0.9180          0.5450          0.2860   Europe\n369                     0.8490          0.5700          0.2940   Europe\n370                     0.8840          0.5690          0.3370   Europe\n371                     0.8920          0.6180          0.3160   Europe\n372                     0.9250          0.5120          0.2900   Europe\n373                     0.9320          0.5040          0.2690   Europe\n374                     0.9610          0.6810          0.2860   Europe\n375                     0.9340          0.6400          0.2740   Europe\n376                     0.8750          0.5730          0.2670   Europe\n377                     0.7120          0.7040          0.2530     Asia\n378                     0.8010          0.6680          0.3290     Asia\n379                     0.8330          0.6990          0.2960     Asia\n380                     0.8410          0.6820          0.2720     Asia\n381                     0.8710          0.6870          0.3690     Asia\n382                     0.8670          0.6570          0.4200     Asia\n383                     0.8680          0.6610          0.3970     Asia\n384                     0.8930          0.6600          0.3830     Asia\n385                     0.8980          0.6310          0.3360     Asia\n386                     0.8510          0.6700          0.3010     Asia\n387                     0.8480          0.6630          0.2980     Asia\n388                     0.8650          0.6630          0.2900     Asia\n389                     0.8160          0.6710          0.2840     Asia\n390                     0.8760          0.6410          0.2750     Asia\n391                     0.8870          0.6590          0.2970     Asia\n392                     0.2370          0.7770          0.1540   Europe\n393                     0.2060          0.7780          0.1940   Europe\n394                     0.2480          0.7590          0.1630   Europe\n395                     0.2060          0.7820          0.2340   Europe\n396                     0.1750          0.7960          0.1550   Europe\n397                     0.2200          0.7780          0.1750   Europe\n398                     0.1870          0.7830          0.2090   Europe\n399                     0.1700          0.8260          0.1950   Europe\n400                     0.2370          0.7800          0.2330   Europe\n401                     0.1910          0.8010          0.2180   Europe\n402                     0.2100          0.7860          0.2080   Europe\n403                     0.1810          0.7790          0.2060   Europe\n404                     0.1510          0.7730          0.2060   Europe\n405                     0.1740          0.7970          0.1810   Europe\n406                     0.2140          0.7530          0.2270   Europe\n407                     0.1730          0.7920          0.2060   Europe\n408                     0.2030          0.7870          0.2050   Europe\n409                     0.7550          0.7330          0.2740 Americas\n410                     0.7720          0.7230          0.2600 Americas\n411                     0.7280          0.6540          0.3290 Americas\n412                     0.8060          0.7090          0.2800 Americas\n413                     0.7800          0.7070          0.2820 Americas\n414                     0.7880          0.7380          0.3000 Americas\n415                     0.7270          0.7250          0.2970 Americas\n416                     0.7520          0.7660          0.2950 Americas\n417                     0.7600          0.7720          0.3000 Americas\n418                     0.7550          0.6950          0.2950 Americas\n419                     0.7370          0.7250          0.2780 Americas\n420                     0.7600          0.7100          0.2750 Americas\n421                     0.7620          0.7190          0.2910 Americas\n422                     0.7460          0.7470          0.2640 Americas\n423                     0.6360          0.7240          0.3140 Americas\n424                     0.6770          0.7340          0.2750 Americas\n425                     0.6560          0.7230          0.3060 Americas\n426                     0.9010          0.7850          0.3570 Americas\n427                     0.8300          0.8030          0.2860 Americas\n428                     0.8010          0.8110          0.2830 Americas\n429                     0.7740          0.7960          0.2560 Americas\n430                     0.8060          0.7710          0.2200 Americas\n431                     0.7020          0.8060          0.2710 Americas\n432                     0.7300          0.7670          0.3330 Americas\n433                     0.6460          0.8240          0.2670 Americas\n434                     0.6610          0.8410          0.3060 Americas\n435                     0.6660          0.8160          0.3230 Americas\n436                     0.7740          0.8070          0.3650 Americas\n437                     0.7340          0.7930          0.3140 Americas\n438                     0.8310          0.8170          0.3280 Americas\n439                     0.8390          0.7500          0.3740 Americas\n440                     0.8550          0.7550          0.4160 Americas\n441                     0.7750          0.7420          0.4030 Americas\n442                     0.8660          0.7770          0.3560 Americas\n443                     0.8220          0.6890          0.3460   Africa\n444                     0.8220          0.6000          0.3550   Africa\n445                     0.9140          0.6270          0.3010   Africa\n446                     0.8010          0.5490          0.3390   Africa\n447                     0.8260          0.4910          0.2760   Africa\n448                     0.8590          0.4560          0.3530   Africa\n449                     0.8800          0.4580          0.3980   Africa\n450                     0.9130          0.4870          0.4830   Africa\n451                     0.7490          0.4770          0.3270   Africa\n452                     0.6840          0.5540          0.3440   Africa\n453                     0.8180          0.5380          0.3700   Africa\n454                     0.8220          0.4580          0.4140   Africa\n455                     0.8220          0.4070          0.2850   Africa\n456                     0.8220          0.4200          0.3130   Africa\n457                     0.8220          0.5430          0.4420   Africa\n458                     0.5800          0.3870          0.3250   Africa\n459                     0.8220          0.4860          0.3070   Africa\n460                     0.8070          0.8130          0.2330 Americas\n461                     0.7850          0.8330          0.2200 Americas\n462                     0.7350          0.8270          0.2320 Americas\n463                     0.6480          0.8410          0.2430 Americas\n464                     0.6940          0.8230          0.3020 Americas\n465                     0.7070          0.8300          0.3360 Americas\n466                     0.7860          0.7840          0.3650 Americas\n467                     0.7720          0.8010          0.3170 Americas\n468                     0.7810          0.8010          0.3300 Americas\n469                     0.8050          0.8160          0.3330 Americas\n470                     0.7970          0.7420          0.3460 Americas\n471                     0.7780          0.8000          0.2680 Americas\n472                     0.8010          0.8170          0.2700 Americas\n473                     0.6820          0.8260          0.2710 Americas\n474                     0.5830          0.8110          0.3290 Americas\n475                     0.6630          0.8260          0.2900 Americas\n476                     0.6210          0.8230          0.2960 Americas\n477                     0.1320          0.6830          0.1720   Europe\n478                     0.2170          0.6910          0.1440   Europe\n479                     0.4130          0.7580          0.2020   Europe\n480                     0.3200          0.7090          0.2050   Europe\n481                     0.3610          0.7420          0.2020   Europe\n482                     0.3060          0.7520          0.1950   Europe\n483                     0.2650          0.7660          0.1990   Europe\n484                     0.2230          0.7360          0.1910   Europe\n485                     0.2500          0.7690          0.1820   Europe\n486                     0.1920          0.7560          0.1760   Europe\n487                     0.1990          0.7490          0.1820   Europe\n488                     0.1950          0.7320          0.1810   Europe\n489                     0.1640          0.7480          0.1930   Europe\n490                     0.1920          0.7520          0.1750   Europe\n491                     0.1900          0.7410          0.1910   Europe\n492                     0.6880          0.6810          0.2250   Europe\n493                     0.6990          0.6940          0.2890   Europe\n494                     0.6690          0.7020          0.2810   Europe\n495                     0.6540          0.6910          0.3030   Europe\n496                     0.6230          0.7290          0.2610   Europe\n497                     0.6270          0.7180          0.2810   Europe\n498                     0.6080          0.7050          0.2530   Europe\n499                     0.6990          0.7410          0.2050   Europe\n500                     0.6560          0.7590          0.2160   Europe\n501                     0.6410          0.7400          0.2150   Europe\n502                     0.6230          0.7150          0.2700   Europe\n503                     0.6010          0.7160          0.2420   Europe\n504                     0.5820          0.7050          0.2820   Europe\n505                     0.5680          0.6930          0.2500   Europe\n506                     0.5650          0.6900          0.2310   Europe\n507                     0.5610          0.6850          0.2680   Europe\n508                     0.5330          0.6880          0.2490   Europe\n509                     0.7520          0.3530          0.2690     Asia\n510                     0.6970          0.3510          0.2360     Asia\n511                     0.4980          0.3710          0.2620     Asia\n512                     0.5350          0.3910          0.2420     Asia\n513                     0.4600          0.4020          0.2430     Asia\n514                     0.3530          0.4210          0.2470     Asia\n515                     0.3210          0.4430          0.2500     Asia\n516                     0.3490          0.4670          0.2000     Asia\n517                     0.4160          0.4580          0.2040     Asia\n518                     0.5020          0.4480          0.2330     Asia\n519                     0.5610          0.4750          0.2230     Asia\n520                     0.5900          0.4960          0.2100     Asia\n521                     0.7550          0.4790          0.2440     Asia\n522                     0.6470          0.5030          0.2440     Asia\n523                     0.5830          0.5730          0.2950     Asia\n524                     0.7230          0.5100          0.2400     Asia\n525                     0.6550          0.5030          0.2330     Asia\n526                     0.7810          0.6850          0.1970   Europe\n527                     0.7920          0.6470          0.2310   Europe\n528                     0.7580          0.6720          0.2200   Europe\n529                     0.6900          0.6840          0.2060   Europe\n530                     0.6880          0.6980          0.1820   Europe\n531                     0.6770          0.6860          0.1650   Europe\n532                     0.6790          0.6990          0.1700   Europe\n533                     0.5660          0.6930          0.2050   Europe\n534                     0.4740          0.7390          0.1880   Europe\n535                     0.4120          0.7220          0.2030   Europe\n536                     0.4460          0.7090          0.1870   Europe\n537                     0.4140          0.7070          0.1960   Europe\n538                     0.4960          0.7400          0.2430   Europe\n539                     0.4620          0.7120          0.2260   Europe\n540                     0.4240          0.6980          0.2060   Europe\n541                     0.4180          0.7030          0.2510   Europe\n542                     0.4170          0.6680          0.2010   Europe\n543                     0.8140          0.6370          0.1980   Africa\n544                     0.7710          0.6580          0.2170   Africa\n545                     0.8630          0.6740          0.1720   Africa\n546                     0.8900          0.7140          0.1980   Africa\n547                     0.8750          0.6930          0.1840   Africa\n548                     0.7900          0.6580          0.2090   Africa\n549                     0.8980          0.7090          0.1520   Africa\n550                     0.8800          0.6600          0.2110   Africa\n551                     0.9130          0.6820          0.2800   Africa\n552                     0.9450          0.6750          0.2650   Africa\n553                     0.8940          0.6590          0.3050   Africa\n554                     0.8390          0.7150          0.2480   Africa\n555                     0.8460          0.7160          0.2500   Africa\n556                     0.8570          0.6450          0.2700   Africa\n557                     0.8470          0.6750          0.2530   Africa\n558                     0.8880          0.5880          0.2950   Africa\n559                     0.9090          0.6200          0.2920   Africa\n560                     0.8610          0.5980          0.2640   Europe\n561                     0.8450          0.6290          0.2220   Europe\n562                     0.9590          0.6140          0.2540   Europe\n563                     0.9540          0.5810          0.2920   Europe\n564                     0.9410          0.5520          0.3230   Europe\n565                     0.9590          0.5440          0.3520   Europe\n566                     0.9410          0.5710          0.4820   Europe\n567                     0.9300          0.5970          0.3850   Europe\n568                     0.8240          0.6370          0.2770   Europe\n569                     0.8980          0.5940          0.3360   Europe\n570                     0.8720          0.5160          0.3330   Europe\n571                     0.8600          0.5640          0.2550   Europe\n572                     0.8480          0.5600          0.2360   Europe\n573                     0.7640          0.6290          0.3220   Europe\n574                     0.7520          0.6240          0.3110   Europe\n575                     0.8740          0.5890          0.1830   Europe\n576                     0.7060          0.7890          0.2870 Americas\n577                     0.8100          0.7900          0.2240 Americas\n578                     0.7960          0.8000          0.2340 Americas\n579                     0.7550          0.8140          0.2400 Americas\n580                     0.7950          0.8050          0.2360 Americas\n581                     0.8630          0.7920          0.2890 Americas\n582                     0.8210          0.8080          0.3490 Americas\n583                     0.8170          0.8220          0.3330 Americas\n584                     0.8040          0.8160          0.3050 Americas\n585                     0.8220          0.8260          0.3110 Americas\n586                     0.8120          0.8150          0.3210 Americas\n587                     0.8000          0.8190          0.3080 Americas\n588                     0.7650          0.8270          0.2620 Americas\n589                     0.7730          0.8200          0.3110 Americas\n590                     0.8350          0.8350          0.2630 Americas\n591                     0.8440          0.8370          0.1550 Americas\n592                     0.8260          0.7120          0.1990 Americas\n593                     0.8630          0.7190          0.2060 Americas\n594                     0.8570          0.7450          0.2610 Americas\n595                     0.8200          0.7450          0.2600 Americas\n596                     0.8840          0.7570          0.3070 Americas\n597                     0.8710          0.7960          0.2940 Americas\n598                     0.8680          0.7950          0.2830 Americas\n599                     0.8340          0.7940          0.2990 Americas\n600                     0.8480          0.8290          0.3110 Americas\n601                     0.7930          0.7900          0.2970 Americas\n602                     0.7830          0.7960          0.2480 Americas\n603                     0.8040          0.8220          0.2870 Americas\n604                     0.8150          0.7890          0.2790 Americas\n605                     0.8470          0.8080          0.2690 Americas\n606                     0.8340          0.7750          0.2890 Americas\n607                     0.9030          0.5780          0.2900   Europe\n608                     0.8950          0.6000          0.2300   Europe\n609                     0.9150          0.5750          0.2280   Europe\n610                     0.9830          0.5740          0.2350   Europe\n611                     0.9400          0.5860          0.3050   Europe\n612                     0.9300          0.5820          0.3150   Europe\n613                     0.9120          0.6470          0.3070   Europe\n614                     0.8550          0.5780          0.2380   Europe\n615                     0.9080          0.6500          0.2450   Europe\n616                     0.9240          0.5900          0.2430   Europe\n617                     0.8860          0.6440          0.1810   Europe\n618                     0.9110          0.5950          0.2010   Europe\n619                     0.8840          0.6530          0.1800   Europe\n620                     0.8360          0.6620          0.2400   Europe\n621                     0.8320          0.6680          0.1920   Europe\n622                     0.8480          0.6280          0.2500   Europe\n623                     0.8550          0.5760          0.1990     Asia\n624                     0.8620          0.5410          0.2530     Asia\n625                     0.8910          0.5730          0.2590     Asia\n626                     0.8950          0.6390          0.3010     Asia\n627                     0.8630          0.5790          0.2670     Asia\n628                     0.9080          0.4800          0.2320     Asia\n629                     0.8300          0.5440          0.2950     Asia\n630                     0.8320          0.6080          0.3300     Asia\n631                     0.8320          0.6510          0.2850     Asia\n632                     0.7760          0.6570          0.3220     Asia\n633                     0.7650          0.6460          0.3460     Asia\n634                     0.7810          0.5790          0.3180     Asia\n635                     0.8050          0.5910          0.3570     Asia\n636                     0.7520          0.5600          0.4660     Asia\n637                     0.7800          0.6860          0.3830     Asia\n638                     0.7570          0.5470          0.4290     Asia\n639                     0.7710          0.5960          0.4320     Asia\n640                     0.9150          0.7150          0.2660     Asia\n641                     0.9600          0.6960          0.2420     Asia\n642                     0.9680          0.6750          0.2390     Asia\n643                     0.9110          0.7680          0.1930     Asia\n644                     0.9540          0.7170          0.2180     Asia\n645                     0.9620          0.7480          0.2730     Asia\n646                     0.9620          0.7640          0.2290     Asia\n647                     0.9730          0.7770          0.2490     Asia\n648                     0.9700          0.7570          0.2420     Asia\n649                     0.9460          0.7960          0.2740     Asia\n650                     0.8900          0.7480          0.3420     Asia\n651                     0.9000          0.7810          0.3190     Asia\n652                     0.8680          0.7960          0.2960     Asia\n653                     0.8610          0.8000          0.3020     Asia\n654                     0.9140          0.7420          0.3510     Asia\n655                     0.8450          0.7990          0.2730     Asia\n656                     0.8620          0.8180          0.2690     Asia\n657                     0.4730          0.8150          0.2090   Europe\n658                     0.4870          0.7450          0.1480   Europe\n659                     0.5800          0.7450          0.2330   Europe\n660                     0.6180          0.7630          0.2010   Europe\n661                     0.5900          0.7860          0.1900   Europe\n662                     0.5730          0.7210          0.2370   Europe\n663                     0.5580          0.7440          0.2450   Europe\n664                     0.4060          0.7360          0.2290   Europe\n665                     0.4090          0.7480          0.2250   Europe\n666                     0.3990          0.7440          0.2110   Europe\n667                     0.3370          0.7710          0.2130   Europe\n668                     0.3620          0.7540          0.2130   Europe\n669                     0.3730          0.7580          0.2230   Europe\n670                     0.3560          0.7530          0.2460   Europe\n671                     0.3600          0.7330          0.2450   Europe\n672                     0.3580          0.7380          0.2340   Europe\n673                     0.9050          0.6390          0.3080     Asia\n674                     0.8680          0.6420          0.3200     Asia\n675                     0.8980          0.6350          0.3490     Asia\n676                     0.9230          0.6200          0.3270     Asia\n677                     0.9020          0.6280          0.3620     Asia\n678                     0.8910          0.6540          0.3840     Asia\n679                     0.8620          0.6110          0.3190     Asia\n680                     0.8490          0.6490          0.4090     Asia\n681                     0.8180          0.5670          0.2710     Asia\n682                     0.7890          0.6520          0.2560     Asia\n683                     0.8040          0.6020          0.2630     Asia\n684                     0.7930          0.6210          0.2760     Asia\n685                     0.7700          0.6120          0.2820     Asia\n686                     0.7430          0.5980          0.2660     Asia\n687                     0.7480          0.5640          0.2430     Asia\n688                     0.7260          0.5580          0.2170     Asia\n689                     0.6550          0.5830          0.1830     Asia\n690                     0.9440          0.6060          0.2950   Europe\n691                     0.9220          0.6500          0.3030   Europe\n692                     0.9460          0.5880          0.2680   Europe\n693                     0.8900          0.7150          0.2790   Europe\n694                     0.9210          0.5350          0.2360   Europe\n695                     0.9330          0.6100          0.2660   Europe\n696                     0.9080          0.6510          0.3880   Europe\n697                     0.9430          0.7020          0.3570   Europe\n698                     0.9200          0.6590          0.3560   Europe\n699                     0.9130          0.6460          0.3290   Europe\n700                     0.9030          0.6320          0.3390   Europe\n701                     0.8670          0.6130          0.3230   Europe\n702                     0.8880          0.5980          0.4030   Europe\n703                     0.8660          0.5690          0.3280   Europe\n704                     0.8440          0.6140          0.3110   Europe\n705                     0.8620          0.6340          0.3180   Europe\n706                     0.8190          0.6240          0.2980   Europe\n707                     0.6990          0.6860          0.1530     Asia\n708                     0.8090          0.6830          0.2070     Asia\n709                     0.8160          0.7050          0.1910     Asia\n710                     0.7400          0.7130          0.1690     Asia\n711                     0.7700          0.7790          0.1880     Asia\n712                     0.7340          0.7140          0.1810     Asia\n713                     0.6920          0.7080          0.1710     Asia\n714                     0.6500          0.7190          0.1750     Asia\n715                     0.6170          0.6870          0.1890     Asia\n716                     0.6540          0.7020          0.1760     Asia\n717                     0.6980          0.6900          0.1920     Asia\n718                     0.6590          0.6920          0.1760     Asia\n719                     0.6870          0.6490          0.1850     Asia\n720                     0.6170          0.6930          0.1940     Asia\n721                     0.6090          0.6810          0.1860     Asia\n722                     0.6700          0.6740          0.1890     Asia\n723                     0.6430          0.6700          0.1650     Asia\n724                     0.6700          0.6300          0.2400     Asia\n725                     0.6640          0.5870          0.2400     Asia\n726                     0.7090          0.6560          0.3310     Asia\n727                     0.7390          0.5870          0.2650     Asia\n728                     0.6895          0.5640          0.3430     Asia\n729                     0.6895          0.5510          0.2600     Asia\n730                     0.6895          0.4690          0.3450     Asia\n731                     0.6895          0.5970          0.2860     Asia\n732                     0.6895          0.6020          0.3130     Asia\n733                     0.6895          0.6170          0.3050     Asia\n734                     0.6895          0.5980          0.3120     Asia\n735                     0.6895          0.5540          0.3920     Asia\n736                     0.6895          0.5870          0.3125     Asia\n737                     0.6895          0.5870          0.3125     Asia\n738                     0.6895          0.5870          0.3125     Asia\n739                     0.6560          0.4800          0.4290     Asia\n740                     0.7150          0.5210          0.4350     Asia\n741                     0.8650          0.6020          0.1850     Asia\n742                     0.8650          0.5570          0.1790     Asia\n743                     0.8990          0.6130          0.1600     Asia\n744                     0.8450          0.5950          0.1290     Asia\n745                     0.8230          0.6550          0.1490     Asia\n746                     0.8020          0.6220          0.1540     Asia\n747                     0.8770          0.6670          0.1840     Asia\n748                     0.8200          0.6290          0.1640     Asia\n749                     0.8050          0.6710          0.1690     Asia\n750                     0.7140          0.6820          0.1740     Asia\n751                     0.7020          0.6410          0.1550     Asia\n752                     0.7550          0.6980          0.1710     Asia\n753                     0.8240          0.6110          0.1620     Asia\n754                     0.7080          0.7110          0.1390     Asia\n755                     0.6610          0.6200          0.1500     Asia\n756                     0.7820          0.6630          0.1220     Asia\n757                     0.7200          0.6520          0.1320     Asia\n758                     0.8600          0.6570          0.1980   Africa\n759                     0.7990          0.6980          0.1620   Africa\n760                     0.9090          0.7330          0.1490   Africa\n761                     0.9130          0.6790          0.1830   Africa\n762                     0.9180          0.7580          0.1230   Africa\n763                     0.9230          0.7060          0.2280   Africa\n764                     0.9110          0.6670          0.1940   Africa\n765                     0.8610          0.7290          0.1610   Africa\n766                     0.8490          0.7790          0.2210   Africa\n767                     0.8530          0.6730          0.1720   Africa\n768                     0.8280          0.7300          0.2260   Africa\n769                     0.8540          0.7540          0.2300   Africa\n770                     0.8440          0.7470          0.2370   Africa\n771                     0.7940          0.7280          0.2510   Africa\n772                     0.8370          0.7380          0.2970   Africa\n773                     0.8410          0.7450          0.2530   Africa\n774                     0.8780          0.7250          0.2810   Africa\n775                     0.8790          0.5550          0.1590     Asia\n776                     0.9290          0.5900          0.1300     Asia\n777                     0.9230          0.5940          0.1470     Asia\n778                     0.8960          0.5540          0.1650     Asia\n779                     0.9260          0.5160          0.1230     Asia\n780                     0.9320          0.5790          0.1510     Asia\n781                     0.8920          0.5800          0.1820     Asia\n782                     0.9000          0.5950          0.1350     Asia\n783                     0.8970          0.6170          0.1850     Asia\n784                     0.8580          0.6580          0.1730     Asia\n785                     0.9170          0.6680          0.1260     Asia\n786                     0.8740          0.6400          0.1600     Asia\n787                     0.9070          0.6170          0.2030     Asia\n788                     0.8850          0.6250          0.2070     Asia\n789                     0.9310          0.6720          0.2580     Asia\n790                     0.9030          0.6600          0.2260     Asia\n791                     0.8760          0.6460          0.2040     Asia\n792                     0.9450          0.5580          0.2920     Asia\n793                     0.9020          0.5010          0.3200     Asia\n794                     0.9270          0.4750          0.3650     Asia\n795                     0.9370          0.4720          0.4010     Asia\n796                     0.9490          0.4570          0.3410     Asia\n797                     0.9110          0.5060          0.3200     Asia\n798                     0.8560          0.4420          0.3390     Asia\n799                     0.9210          0.4460          0.4090     Asia\n800                     0.9390          0.5250          0.2670     Asia\n801                     0.8890          0.5240          0.2430     Asia\n802                     0.8530          0.5130          0.2630     Asia\n803                     0.9110          0.4690          0.2440     Asia\n804                     0.9070          0.4150          0.2710     Asia\n805                     0.8900          0.3080          0.4940     Asia\n806                     0.8840          0.3520          0.4820     Asia\n807                     0.9050          0.2630          0.5690     Asia\n808                     0.8830          0.2980          0.4300     Asia\n809                     0.9670          0.5670          0.2540   Europe\n810                     0.9660          0.5230          0.2790   Europe\n811                     0.9610          0.5010          0.2760   Europe\n812                     0.9790          0.5250          0.2710   Europe\n813                     0.9620          0.4630          0.2720   Europe\n814                     0.9640          0.5560          0.2750   Europe\n815                     0.9570          0.5570          0.2770   Europe\n816                     0.9360          0.5400          0.2940   Europe\n817                     0.9560          0.5650          0.2870   Europe\n818                     0.9240          0.5340          0.2760   Europe\n819                     0.9490          0.5530          0.2500   Europe\n820                     0.7900          0.5900          0.1950   Europe\n821                     0.8520          0.5180          0.2140   Europe\n822                     0.7830          0.5680          0.2760   Europe\n823                     0.8290          0.6260          0.2020   Europe\n824                     0.8780          0.6670          0.1910   Europe\n825                     0.6850          0.4710          0.1320   Europe\n826                     0.4320          0.7130          0.2380   Europe\n827                     0.4230          0.7180          0.2160   Europe\n828                     0.3880          0.7440          0.2000   Europe\n829                     0.4030          0.7260          0.2270   Europe\n830                     0.3010          0.6010          0.1850   Europe\n831                     0.3660          0.7600          0.1700   Europe\n832                     0.3750          0.7280          0.1930   Europe\n833                     0.3560          0.7060          0.1920   Europe\n834                     0.3300          0.7260          0.1840   Europe\n835                     0.3850          0.7150          0.2020   Europe\n836                     0.3900          0.7420          0.2120   Europe\n837                     0.3450          0.7180          0.2180   Europe\n838                     0.7610          0.7480          0.2090   Africa\n839                     0.9180          0.7170          0.1640   Africa\n840                     0.8190          0.7290          0.1500   Africa\n841                     0.8110          0.7640          0.1620   Africa\n842                     0.7260          0.7520          0.1320   Africa\n843                     0.7870          0.6470          0.1090   Africa\n844                     0.7550          0.7170          0.1930   Africa\n845                     0.6580          0.7220          0.1860   Africa\n846                     0.8000          0.6960          0.2430   Africa\n847                     0.8620          0.7380          0.3050   Africa\n848                     0.8630          0.6650          0.3930   Africa\n849                     0.7930          0.6890          0.3700   Africa\n850                     0.8460          0.6460          0.3580   Africa\n851                     0.8950          0.6480          0.4400   Africa\n852                     0.9020          0.6400          0.4380   Africa\n853                     0.7460          0.6550          0.4080   Africa\n854                     0.6890          0.6260          0.3580   Europe\n855                     0.6890          0.6240          0.3750   Europe\n856                     0.6890          0.6380          0.3400   Europe\n857                     0.6890          0.6390          0.3910   Europe\n858                     0.6890          0.6290          0.3700   Europe\n859                     0.6700          0.6060          0.3520   Europe\n860                     0.6640          0.6410          0.3550   Europe\n861                     0.6960          0.6450          0.3550   Europe\n862                     0.6900          0.6660          0.3020   Europe\n863                     0.5950          0.6660          0.2960   Europe\n864                     0.6890          0.6420          0.3560   Europe\n865                     0.6750          0.5760          0.4110   Europe\n866                     0.7530          0.6350          0.3750   Europe\n867                     0.7580          0.6710          0.3700   Europe\n868                     0.5860          0.7320          0.1740   Africa\n869                     0.8410          0.7470          0.1760   Africa\n870                     0.8480          0.7170          0.1700   Africa\n871                     0.7270          0.7370          0.1290   Africa\n872                     0.7470          0.7290          0.1750   Africa\n873                     0.7070          0.7490          0.1640   Africa\n874                     0.6760          0.7430          0.1960   Africa\n875                     0.5890          0.7430          0.1630   Africa\n876                     0.7150          0.7980          0.1940   Africa\n877                     0.8420          0.7100          0.2220   Africa\n878                     0.7770          0.6310          0.2720   Africa\n879                     0.7110          0.6650          0.2760   Africa\n880                     0.7430          0.6860          0.2600   Africa\n881                     0.6570          0.6310          0.3890   Africa\n882                     0.7640          0.7630          0.2190 Americas\n883                     0.7470          0.7540          0.2480 Americas\n884                     0.7850          0.7740          0.2010 Americas\n885                     0.7640          0.7630          0.1960 Americas\n886                     0.6930          0.7450          0.2150 Americas\n887                     0.6980          0.7000          0.2280 Americas\n888                     0.6330          0.7220          0.2780 Americas\n889                     0.6150          0.7500          0.2230 Americas\n890                     0.6300          0.7600          0.2290 Americas\n891                     0.7080          0.7060          0.2370 Americas\n892                     0.8090          0.8020          0.2200 Americas\n893                     0.8010          0.7750          0.2310 Americas\n894                     0.8090          0.8150          0.2130 Americas\n895                     0.8090          0.8030          0.2520 Americas\n896                     0.7780          0.7450          0.2920 Americas\n897                     0.7450          0.7500          0.3050 Americas\n898                     0.7800          0.8180          0.2050 Americas\n899                     0.9260          0.5530          0.2550   Europe\n900                     0.9300          0.5190          0.3060   Europe\n901                     0.9260          0.5650          0.2840   Europe\n902                     0.9250          0.5390          0.3060   Europe\n903                     0.9290          0.5640          0.2780   Europe\n904                     0.9570          0.5530          0.2850   Europe\n905                     0.9550          0.5640          0.3140   Europe\n906                     0.9410          0.5480          0.2610   Europe\n907                     0.9250          0.5470          0.2600   Europe\n908                     0.9430          0.5560          0.2810   Europe\n909                     0.9690          0.5860          0.2750   Europe\n910                     0.9260          0.5630          0.2590   Europe\n911                     0.9290          0.5840          0.2700   Europe\n912                     0.8840          0.6000          0.2620   Europe\n913                     0.9410          0.6980          0.2680   Europe\n914                     0.8750          0.6300          0.2700   Europe\n915                     0.8850          0.5520          0.2760   Europe\n916                     0.9180          0.4830          0.2030     Asia\n917                     0.9620          0.5140          0.1730     Asia\n918                     0.9280          0.5590          0.1500     Asia\n919                     0.9310          0.5610          0.1530     Asia\n920                     0.9320          0.5240          0.1810     Asia\n921                     0.9280          0.5490          0.1790     Asia\n922                     0.9090          0.5120          0.1700     Asia\n923                     0.9000          0.5330          0.2080     Asia\n924                     0.9000          0.5550          0.1710     Asia\n925                     0.8650          0.5520          0.2140     Asia\n926                     0.8490          0.5250          0.1920     Asia\n927                     0.8730          0.5620          0.1670     Asia\n928                     0.8430          0.5750          0.2600     Asia\n929                     0.8510          0.5600          0.2020     Asia\n930                     0.8470          0.5500          0.2090     Asia\n931                     0.8150          0.5360          0.3400   Europe\n932                     0.8380          0.5330          0.4230   Europe\n933                     0.7570          0.5100          0.4100   Europe\n934                     0.7620          0.5100          0.3780   Europe\n935                     0.7550          0.4680          0.3790   Europe\n936                     0.6930          0.4930          0.3310   Europe\n937                     0.7680          0.5450          0.3680   Europe\n938                     0.7810          0.5340          0.3370   Europe\n939                     0.8490          0.5470          0.3370   Europe\n940                     0.7560          0.4930          0.3500   Europe\n941                     0.7690          0.5270          0.3550   Europe\n942                     0.8200          0.5470          0.3660   Europe\n943                     0.8450          0.5600          0.4110   Europe\n944                     0.8970          0.5830          0.1710     Asia\n945                     0.8910          0.5020          0.1520     Asia\n946                     0.9000          0.5890          0.1530     Asia\n947                     0.9500          0.4840          0.2150     Asia\n948                     0.9110          0.5380          0.2260     Asia\n949                     0.9350          0.5300          0.2070     Asia\n950                     0.8830          0.5380          0.2310     Asia\n951                     0.8770          0.4960          0.2790     Asia\n952                     0.8410          0.4920          0.2870     Asia\n953                     0.8240          0.4440          0.3580     Asia\n954                     0.8170          0.5230          0.3700     Asia\n955                     0.7700          0.4630          0.3760     Asia\n956                     0.7420          0.4570          0.3870     Asia\n957                     0.7120          0.4440          0.3570     Asia\n958                     0.8120          0.4800          0.3370     Asia\n959                     0.7700          0.4140          0.3540     Asia\n960                     0.7600          0.4730          0.3420     Asia\n961                     0.5710          0.7010          0.2330   Europe\n962                     0.4450          0.7180          0.2130   Europe\n963                     0.4190          0.6790          0.1820   Europe\n964                     0.3990          0.7450          0.2060   Europe\n965                     0.3590          0.7700          0.1810   Europe\n966                     0.4340          0.7530          0.2260   Europe\n967                     0.5050          0.7650          0.2350   Europe\n968                     0.4570          0.7760          0.2210   Europe\n969                     0.4120          0.7420          0.2020   Europe\n970                     0.4330          0.7370          0.2150   Europe\n971                     0.3630          0.7290          0.1850   Europe\n972                     0.3710          0.7480          0.2050   Europe\n973                     0.3600          0.7280          0.2310   Europe\n974                     0.2810          0.6910          0.2470   Europe\n975                     0.3970          0.7140          0.2010   Europe\n976                     0.4590          0.7110          0.1980   Europe\n977                     0.2240          0.8250          0.2190  Oceania\n978                     0.2950          0.8030          0.2380  Oceania\n979                     0.3340          0.7840          0.2320  Oceania\n980                     0.3210          0.7830          0.2350  Oceania\n981                     0.2690          0.7840          0.2100  Oceania\n982                     0.2890          0.7860          0.2070  Oceania\n983                     0.3120          0.7780          0.1510  Oceania\n984                     0.2730          0.8070          0.1990  Oceania\n985                     0.1860          0.7950          0.1600  Oceania\n986                     0.2780          0.7770          0.2070  Oceania\n987                     0.2220          0.7630          0.1720  Oceania\n988                     0.2070          0.7850          0.1680  Oceania\n989                     0.2340          0.7650          0.1910  Oceania\n990                     0.2830          0.7960          0.2090  Oceania\n991                     0.2520          0.7470          0.2060  Oceania\n992                     0.2810          0.7060          0.2100  Oceania\n993                     0.8440          0.7800          0.2940 Americas\n994                     0.8260          0.7870          0.2870 Americas\n995                     0.8190          0.7700          0.2890 Americas\n996                     0.7940          0.7400          0.2990 Americas\n997                     0.8020          0.7490          0.2680 Americas\n998                     0.7600          0.7470          0.3090 Americas\n999                     0.6440          0.7620          0.2550 Americas\n1000                    0.6360          0.8000          0.2710 Americas\n1001                    0.6990          0.7820          0.3340 Americas\n1002                    0.7280          0.7710          0.3460 Americas\n1003                    0.7310          0.7870          0.3800 Americas\n1004                    0.6730          0.7930          0.3080 Americas\n1005                    0.7130          0.7430          0.4080 Americas\n1006                    0.6220          0.7900          0.3370 Americas\n1007                    0.6310          0.7750          0.3160 Americas\n1008                    0.6750          0.7990          0.2930 Americas\n1009                    0.5700          0.7870          0.3390 Americas\n1010                    0.7550          0.7460          0.1790   Africa\n1011                    0.7480          0.7230          0.1580   Africa\n1012                    0.7490          0.6890          0.1940   Africa\n1013                    0.4830          0.7140          0.1150   Africa\n1014                    0.5290          0.7150          0.1260   Africa\n1015                    0.5490          0.7100          0.1660   Africa\n1016                    0.7770          0.5820          0.1420   Africa\n1017                    0.7110          0.6390          0.2080   Africa\n1018                    0.6050          0.6290          0.2050   Africa\n1019                    0.7030          0.6650          0.2180   Africa\n1020                    0.8140          0.6460          0.3250   Africa\n1021                    0.7780          0.6990          0.4270   Africa\n1022                    0.6370          0.7590          0.5030   Africa\n1023                    0.7290          0.7940          0.3040   Africa\n1024                    0.7400          0.7870          0.3660   Africa\n1025                    0.8700          0.5580          0.2510   Europe\n1026                    0.8440          0.4880          0.3700   Europe\n1027                    0.8560          0.4730          0.3140   Europe\n1028                    0.8650          0.5030          0.3630   Europe\n1029                    0.9200          0.5510          0.4220   Europe\n1030                    0.8610          0.5210          0.3310   Europe\n1031                    0.8610          0.5830          0.3070   Europe\n1032                    0.8240          0.5510          0.2990   Europe\n1033                    0.8700          0.5870          0.2920   Europe\n1034                    0.8560          0.4470          0.2990   Europe\n1035                    0.9100          0.5120          0.2980   Europe\n1036                    0.9230          0.5150          0.3040   Europe\n1037                    0.8770          0.5420          0.3650   Europe\n1038                    0.8840          0.5630          0.3030   Europe\n1039                    0.9370          0.5550          0.2770   Europe\n1040                    0.8440          0.4890          0.2370     Asia\n1041                    0.7940          0.5830          0.3100     Asia\n1042                    0.8480          0.5330          0.3210     Asia\n1043                    0.8740          0.5160          0.3490     Asia\n1044                    0.8520          0.5270          0.3720     Asia\n1045                    0.8570          0.4730          0.3580     Asia\n1046                    0.8420          0.5100          0.3320     Asia\n1047                    0.7920          0.4740          0.2740     Asia\n1048                    0.6770          0.4750          0.2950     Asia\n1049                    0.7170          0.4690          0.3290     Asia\n1050                    0.7930          0.5030          0.3320     Asia\n1051                    0.7140          0.4890          0.3080     Asia\n1052                    0.7990          0.4700          0.3770     Asia\n1053                    0.7760          0.4890          0.4240     Asia\n1054                    0.8330          0.4700          0.3760     Asia\n1055                    0.7430          0.5180          0.3070     Asia\n1056                    0.9120          0.8260          0.2320 Americas\n1057                    0.9150          0.7890          0.1490 Americas\n1058                    0.8810          0.7760          0.1500 Americas\n1059                    0.8890          0.8390          0.1440 Americas\n1060                    0.8800          0.8410          0.1460 Americas\n1061                    0.8400          0.8530          0.1800 Americas\n1062                    0.7960          0.8380          0.2070 Americas\n1063                    0.8140          0.8600          0.2260 Americas\n1064                    0.8470          0.7990          0.2540 Americas\n1065                    0.8100          0.7770          0.2640 Americas\n1066                    0.8370          0.8130          0.2440 Americas\n1067                    0.8410          0.7950          0.2420 Americas\n1068                    0.8370          0.8410          0.2230 Americas\n1069                    0.8690          0.8410          0.2440 Americas\n1070                    0.8610          0.8340          0.2180 Americas\n1071                    0.8870          0.8210          0.2590 Americas\n1072                    0.8950          0.6750          0.4200 Americas\n1073                    0.9310          0.7300          0.3610 Americas\n1074                    0.8960          0.7010          0.3540 Americas\n1075                    0.8800          0.7580          0.3200 Americas\n1076                    0.8810          0.7440          0.3300 Americas\n1077                    0.8240          0.7420          0.3310 Americas\n1078                    0.8670          0.7050          0.3980 Americas\n1079                    0.8700          0.7410          0.3900 Americas\n1080                    0.8780          0.7430          0.3190 Americas\n1081                    0.8840          0.7440          0.3780 Americas\n1082                    0.8660          0.7910          0.3380 Americas\n1083                    0.8950          0.7680          0.3940 Americas\n1084                    0.9060          0.7830          0.3800 Americas\n1085                    0.8740          0.7940          0.3750 Americas\n1086                    0.9120          0.7360          0.4810 Americas\n1087                    0.8800          0.7840          0.3690 Americas\n1088                    0.8840          0.7550          0.3780 Americas\n1089                    0.8410          0.7560          0.3410     Asia\n1090                    0.8800          0.7360          0.3780     Asia\n1091                    0.8170          0.7740          0.3840     Asia\n1092                    0.8050          0.7910          0.3110     Asia\n1093                    0.8120          0.8290          0.2940     Asia\n1094                    0.7830          0.8080          0.3580     Asia\n1095                    0.7710          0.8110          0.3510     Asia\n1096                    0.7560          0.7960          0.3320     Asia\n1097                    0.7870          0.7870          0.3340     Asia\n1098                    0.7550          0.7960          0.3510     Asia\n1099                    0.7920          0.8070          0.2900     Asia\n1100                    0.7110          0.7530          0.3410     Asia\n1101                    0.7260          0.7560          0.3930     Asia\n1102                    0.7480          0.7650          0.3410     Asia\n1103                    0.7440          0.7930          0.3270     Asia\n1104                    0.7210          0.7900          0.3230     Asia\n1105                    0.9830          0.6110          0.2820   Europe\n1106                    0.9250          0.6650          0.2380   Europe\n1107                    0.8980          0.6490          0.2460   Europe\n1108                    0.9050          0.6860          0.2340   Europe\n1109                    0.9080          0.6590          0.2240   Europe\n1110                    0.8880          0.7110          0.2670   Europe\n1111                    0.9160          0.6750          0.2420   Europe\n1112                    0.8980          0.6810          0.2230   Europe\n1113                    0.8100          0.6310          0.2400   Europe\n1114                    0.8480          0.6660          0.2240   Europe\n1115                    0.6390          0.5660          0.2030   Europe\n1116                    0.7200          0.6220          0.1760   Europe\n1117                    0.6960          0.6130          0.1680   Europe\n1118                    0.7870          0.6770          0.3290   Europe\n1119                    0.7440          0.7000          0.2770   Europe\n1120                    0.6670          0.5940          0.1400   Europe\n1121                    0.8800          0.6470          0.3330   Europe\n1122                    0.9330          0.6670          0.3090   Europe\n1123                    0.9480          0.6810          0.2650   Europe\n1124                    0.9620          0.6710          0.2790   Europe\n1125                    0.9590          0.6310          0.3700   Europe\n1126                    0.9460          0.6650          0.3480   Europe\n1127                    0.9410          0.6630          0.3580   Europe\n1128                    0.9410          0.6290          0.3710   Europe\n1129                    0.9220          0.6590          0.3260   Europe\n1130                    0.8810          0.6080          0.2940   Europe\n1131                    0.8800          0.6460          0.3180   Europe\n1132                    0.9150          0.6750          0.3000   Europe\n1133                    0.8670          0.6140          0.3830   Europe\n1134                    0.8720          0.6290          0.2840   Europe\n1135                    0.8930          0.6380          0.3160   Europe\n1136                    0.9570          0.5760          0.3460   Europe\n1137                    0.9490          0.5750          0.2770   Europe\n1138                    0.9670          0.5450          0.2700   Europe\n1139                    0.9740          0.5390          0.3440   Europe\n1140                    0.9640          0.5010          0.2940   Europe\n1141                    0.9590          0.5200          0.3430   Europe\n1142                    0.9520          0.5410          0.3290   Europe\n1143                    0.9580          0.5650          0.3310   Europe\n1144                    0.9620          0.6270          0.3120   Europe\n1145                    0.9490          0.6070          0.2580   Europe\n1146                    0.9260          0.6320          0.2310   Europe\n1147                    0.9210          0.6490          0.2980   Europe\n1148                    0.9540          0.6050          0.2440   Europe\n1149                    0.9180          0.6680          0.2560   Europe\n1150                    0.9280          0.6740          0.2640   Europe\n1151                    0.9410          0.6150          0.2580   Europe\n1152                    0.9350          0.5340          0.2320   Europe\n1153                    0.9330          0.5460          0.1930   Europe\n1154                    0.9240          0.5700          0.1660   Europe\n1155                    0.9540          0.5400          0.1690   Europe\n1156                    0.9370          0.5670          0.1710   Europe\n1157                    0.9350          0.5640          0.1650   Europe\n1158                    0.9380          0.5630          0.1740   Europe\n1159                    0.9340          0.5920          0.1800   Europe\n1160                    0.8690          0.6170          0.1510   Europe\n1161                    0.9130          0.6090          0.1300   Europe\n1162                    0.9250          0.5870          0.1420   Europe\n1163                    0.8620          0.6510          0.1950   Europe\n1164                    0.8650          0.6150          0.1990   Europe\n1165                    0.8480          0.6320          0.2000   Europe\n1166                    0.8230          0.6210          0.1900   Europe\n1167                    0.8080          0.5900          0.1900   Europe\n1168                    0.7670          0.6140          0.2110   Europe\n1169                    0.5050          0.6810          0.2430     Asia\n1170                    0.5050          0.7180          0.2320     Asia\n1171                    0.5080          0.6070          0.2020     Asia\n1172                    0.4450          0.6830          0.3190     Asia\n1173                    0.5050          0.6450          0.2970     Asia\n1174                    0.5050          0.6990          0.2400     Asia\n1175                    0.5050          0.6920          0.2250     Asia\n1176                    0.5050          0.6910          0.2760     Asia\n1177                    0.5050          0.6630          0.3130     Asia\n1178                    0.5050          0.6680          0.3270     Asia\n1179                    0.5050          0.7250          0.2660     Asia\n1180                    0.5050          0.7030          0.3060     Asia\n1181                    0.5050          0.6960          0.2880     Asia\n1182                    0.5050          0.6740          0.2380     Asia\n1183                    0.5050          0.7020          0.2510     Asia\n1184                    0.5050          0.7280          0.2280     Asia\n1185                    0.5050          0.6770          0.2050     Asia\n1186                    0.8050          0.6870          0.2250   Africa\n1187                    0.8270          0.7180          0.1990   Africa\n1188                    0.8790          0.6690          0.2520   Africa\n1189                    0.9180          0.7080          0.2280   Africa\n1190                    0.8510          0.6700          0.1430   Africa\n1191                    0.8700          0.6960          0.1800   Africa\n1192                    0.8520          0.7220          0.2140   Africa\n1193                    0.8370          0.6940          0.1650   Africa\n1194                    0.7000          0.6960          0.1570   Africa\n1195                    0.7650          0.7100          0.2080   Africa\n1196                    0.7940          0.7810          0.2450   Africa\n1197                    0.8250          0.7510          0.2910   Africa\n1198                    0.8050          0.7240          0.2470   Africa\n1199                    0.7960          0.7680          0.3320   Africa\n1200                    0.8550          0.8160          0.2680   Africa\n1201                    0.8210          0.8120          0.2650   Africa\n1202                    0.8540          0.8130          0.2870   Africa\n1203                    0.9050          0.5280          0.3340   Europe\n1204                    0.9610          0.4660          0.4350   Europe\n1205                    0.9650          0.4460          0.4150   Europe\n1206                    0.9770          0.4580          0.4100   Europe\n1207                    0.9520          0.4470          0.3710   Europe\n1208                    0.9080          0.5050          0.4030   Europe\n1209                    0.9120          0.4730          0.3260   Europe\n1210                    0.8590          0.4720          0.3030   Europe\n1211                    0.8900          0.4920          0.2980   Europe\n1212                    0.8510          0.4850          0.3260   Europe\n1213                    0.8640          0.5270          0.2960   Europe\n1214                    0.8130          0.4740          0.2420   Europe\n1215                    0.8240          0.5790          0.3580   Europe\n1216                    0.8060          0.5680          0.3110   Europe\n1217                    0.0970          0.6890          0.2670     Asia\n1218                    0.0640          0.5880          0.1140     Asia\n1219                    0.0660          0.6270          0.2560     Asia\n1220                    0.0350          0.4500          0.2080     Asia\n1221                    0.0600          0.5270          0.1310     Asia\n1222                    0.0990          0.4040          0.1440     Asia\n1223                    0.0970          0.6815          0.1460     Asia\n1224                    0.2420          0.6630          0.1480     Asia\n1225                    0.1330          0.7740          0.1800     Asia\n1226                    0.0990          0.7360          0.1420     Asia\n1227                    0.0470          0.7450          0.1110     Asia\n1228                    0.1620          0.7500          0.1790     Asia\n1229                    0.0970          0.7310          0.1070     Asia\n1230                    0.0700          0.6740          0.1380     Asia\n1231                    0.1450          0.6970          0.1600     Asia\n1232                    0.9460          0.5860          0.3080   Europe\n1233                    0.9070          0.6030          0.2770   Europe\n1234                    0.9070          0.5880          0.2870   Europe\n1235                    0.9070          0.5850          0.3020   Europe\n1236                    0.9150          0.6120          0.2770   Europe\n1237                    0.9140          0.6190          0.2670   Europe\n1238                    0.9280          0.6320          0.2690   Europe\n1239                    0.9170          0.6880          0.2320   Europe\n1240                    0.9200          0.7090          0.2130   Europe\n1241                    0.9100          0.6700          0.2530   Europe\n1242                    0.9260          0.6760          0.2520   Europe\n1243                    0.9010          0.6950          0.2740   Europe\n1244                    0.8960          0.6920          0.2410   Europe\n1245                    0.7080          0.6080          0.3070   Europe\n1246                    0.8040          0.5830          0.3030   Europe\n1247                    0.8450          0.5920          0.2950   Europe\n1248                    0.8930          0.5870          0.2850   Europe\n1249                    0.8910          0.5980          0.2840   Europe\n1250                    0.9180          0.6250          0.2740   Europe\n1251                    0.9090          0.5940          0.2910   Europe\n1252                    0.8920          0.6440          0.2610   Europe\n1253                    0.8380          0.5970          0.2720   Europe\n1254                    0.8290          0.5820          0.2860   Europe\n1255                    0.8390          0.6010          0.2750   Europe\n1256                    0.7850          0.6220          0.2280   Europe\n1257                    0.7970          0.5750          0.3140   Europe\n1258                    0.7540          0.6430          0.2610   Europe\n1259                    0.7620          0.6250          0.2420   Europe\n1260                    0.8410          0.7240          0.2230   Africa\n1261                    0.8590          0.6580          0.2100   Africa\n1262                    0.8660          0.7120          0.2060   Africa\n1263                    0.9040          0.6560          0.2310   Africa\n1264                    0.7910          0.6980          0.1240   Africa\n1265                    0.8190          0.7200          0.2300   Africa\n1266                    0.8380          0.7110          0.1780   Africa\n1267                    0.8000          0.7400          0.1670   Africa\n1268                    0.8200          0.7300          0.2430   Africa\n1269                    0.8530          0.7170          0.1610   Africa\n1270                    0.8130          0.7430          0.3010   Africa\n1271                    0.8650          0.7090          0.2680   Africa\n1272                    0.8410          0.7360          0.2830   Africa\n1273                    0.8200          0.7270          0.2680   Africa\n1274                    0.9120          0.7610          0.2940   Africa\n1275                    0.8920          0.7840          0.1730   Africa\n1276                    0.7990          0.5450          0.3380     Asia\n1277                    0.8030          0.6120          0.2260     Asia\n1278                    0.7710          0.5540          0.2390     Asia\n1279                    0.7870          0.5960          0.2090     Asia\n1280                    0.7520          0.6260          0.1300     Asia\n1281                    0.8270          0.5870          0.1680     Asia\n1282                    0.8440          0.6100          0.2060     Asia\n1283                    0.8320          0.5890          0.1890     Asia\n1284                    0.8340          0.5750          0.2830     Asia\n1285                    0.8410          0.5610          0.2440     Asia\n1286                    0.8620          0.5830          0.2330     Asia\n1287                    0.8510          0.5460          0.2350     Asia\n1288                    0.7970          0.5790          0.2170     Asia\n1289                    0.7180          0.5930          0.2360     Asia\n1290                    0.6650          0.5500          0.2470     Asia\n1291                    0.6850          0.5660          0.2210     Asia\n1292                    0.7470          0.5850          0.2330     Asia\n1293                    0.7770          0.6940          0.2410   Europe\n1294                    0.7840          0.7170          0.2640   Europe\n1295                    0.6830          0.6490          0.2600   Europe\n1296                    0.7980          0.6450          0.3360   Europe\n1297                    0.8400          0.6450          0.3220   Europe\n1298                    0.8460          0.6670          0.3560   Europe\n1299                    0.8440          0.6440          0.3660   Europe\n1300                    0.9160          0.6630          0.3720   Europe\n1301                    0.8540          0.6830          0.3350   Europe\n1302                    0.8220          0.7050          0.2850   Europe\n1303                    0.8190          0.6300          0.3010   Europe\n1304                    0.7910          0.6010          0.3020   Europe\n1305                    0.7770          0.6360          0.3570   Europe\n1306                    0.7300          0.6360          0.3160   Europe\n1307                    0.7300          0.6710          0.3170   Europe\n1308                    0.7290          0.6390          0.3240   Europe\n1309                    0.6730          0.6360          0.3200   Europe\n1310                    0.8580          0.4920          0.4310     Asia\n1311                    0.8440          0.5150          0.4120     Asia\n1312                    0.7530          0.5130          0.4030     Asia\n1313                    0.7970          0.4740          0.4660     Asia\n1314                    0.7520          0.5530          0.3810     Asia\n1315                    0.7500          0.4990          0.3880     Asia\n1316                    0.7300          0.5600          0.3790     Asia\n1317                    0.7800          0.5370          0.3650     Asia\n1318                    0.8040          0.5050          0.3800     Asia\n1319                    0.7740          0.5360          0.3690     Asia\n1320                    0.8120          0.5440          0.3780     Asia\n1321                    0.8310          0.5340          0.4160     Asia\n1322                    0.8140          0.5280          0.4190     Asia\n1323                    0.8290          0.5380          0.4000     Asia\n1324                    0.8360          0.5840          0.3620     Asia\n1325                    0.2515          0.7420          0.1510   Europe\n1326                    0.2890          0.7350          0.1770   Europe\n1327                    0.3140          0.7630          0.1340   Europe\n1328                    0.2920          0.7610          0.1510   Europe\n1329                    0.2530          0.7880          0.2000   Europe\n1330                    0.2690          0.7620          0.1790   Europe\n1331                    0.2540          0.7960          0.1700   Europe\n1332                    0.3240          0.7820          0.1840   Europe\n1333                    0.2500          0.7930          0.2080   Europe\n1334                    0.2320          0.7660          0.1910   Europe\n1335                    0.2460          0.7520          0.2010   Europe\n1336                    0.2390          0.7560          0.1750   Europe\n1337                    0.2630          0.7470          0.1610   Europe\n1338                    0.2500          0.7750          0.2020   Europe\n1339                    0.2030          0.7170          0.2220   Europe\n1340                    0.1910          0.7630          0.1900   Europe\n1341                    0.2130          0.7500          0.1630   Europe\n1342                    0.8460          0.6830          0.0940     Asia\n1343                    0.7850          0.6820          0.1690     Asia\n1344                    0.8210          0.7380          0.1360     Asia\n1345                    0.7550          0.7270          0.1120     Asia\n1346                    0.8030          0.7020          0.1400     Asia\n1347                    0.8410          0.7540          0.1240     Asia\n1348                    0.8660          0.7670          0.1080     Asia\n1349                    0.8570          0.7500          0.1290     Asia\n1350                    0.8110          0.7430          0.1080     Asia\n1351                    0.7430          0.7150          0.1140     Asia\n1352                    0.7360          0.7460          0.0930     Asia\n1353                    0.7180          0.7620          0.0930     Asia\n1354                    0.7110          0.7430          0.0830     Asia\n1355                    0.6750          0.6670          0.1230     Asia\n1356                    0.6580          0.7170          0.0950     Asia\n1357                    0.7680          0.4940          0.1950     Asia\n1358                    0.6590          0.6190          0.1330     Asia\n1359                    0.7230          0.4880          0.1600     Asia\n1360                    0.7920          0.4750          0.2030     Asia\n1361                    0.6790          0.4830          0.1920     Asia\n1362                    0.6720          0.5730          0.1660     Asia\n1363                    0.7170          0.5830          0.1980     Asia\n1364                    0.7640          0.5780          0.1700     Asia\n1365                    0.6980          0.5870          0.1960     Asia\n1366                    0.7420          0.6330          0.1960     Asia\n1367                    0.6320          0.5870          0.2200     Asia\n1368                    0.7180          0.5810          0.2780     Asia\n1369                    0.5780          0.6320          0.2200     Asia\n1370                    0.4900          0.6630          0.1780     Asia\n1371                    0.5500          0.6520          0.3440     Asia\n1372                    0.4990          0.6550          0.2400     Asia\n1373                    0.6490          0.7250          0.2090   Africa\n1374                    0.7070          0.7020          0.2200   Africa\n1375                    0.9300          0.7400          0.1780   Africa\n1376                    0.9030          0.7330          0.1610   Africa\n1377                    0.8660          0.6670          0.1460   Africa\n1378                    0.8160          0.7200          0.1450   Africa\n1379                    0.8870          0.6410          0.1950   Africa\n1380                    0.8590          0.7070          0.1910   Africa\n1381                    0.8780          0.6930          0.2410   Africa\n1382                    0.9060          0.6070          0.1920   Africa\n1383                    0.7390          0.6490          0.2460   Africa\n1384                    0.6540          0.6620          0.2550   Africa\n1385                    0.6120          0.7020          0.2210   Africa\n1386                    0.5890          0.6790          0.2430   Africa\n1387                    0.5210          0.6670          0.2710   Africa\n1388                    0.5460          0.6480          0.2460   Africa\n1389                    0.5840          0.7070          0.1950   Africa\n1390                    0.9350          0.7500          0.1640     Asia\n1391                    0.8980          0.7840          0.1800     Asia\n1392                    0.9330          0.7770          0.1450     Asia\n1393                    0.9040          0.8080          0.1660     Asia\n1394                    0.9170          0.8210          0.1820     Asia\n1395                    0.9230          0.8340          0.1170     Asia\n1396                    0.9090          0.7330          0.1380     Asia\n1397                    0.9250          0.7820          0.1410     Asia\n1398                    0.9200          0.7680          0.1690     Asia\n1399                    0.9140          0.8840          0.1740     Asia\n1400                    0.8780          0.8110          0.2180     Asia\n1401                    0.8840          0.7760          0.2320     Asia\n1402                    0.9070          0.7830          0.1980     Asia\n1403                    0.8770          0.7920          0.2080     Asia\n1404                    0.9180          0.7700          0.3260     Asia\n1405                    0.9430          0.7190          0.2980     Asia\n1406                    0.8680          0.7730          0.2180     Asia\n1407                    0.7220          0.4900          0.3270   Africa\n1408                    0.7320          0.6970          0.2490   Africa\n1409                    0.9130          0.5130          0.2480   Africa\n1410                    0.8990          0.4900          0.3270   Africa\n1411                    0.8860          0.4350          0.2390   Africa\n1412                    0.7830          0.4240          0.3210   Africa\n1413                    0.8150          0.5140          0.3200   Africa\n1414                    0.8110          0.5320          0.3780   Africa\n1415                    0.8690          0.3670          0.3770   Africa\n1416                    0.8400          0.5360          0.3650   Africa\n1417                    0.8890          0.4590          0.4330   Africa\n1418                    0.8770          0.5190          0.4390   Africa\n1419                    0.9330          0.4510          0.3360   Africa\n1420                    0.9080          0.4580          0.3040   Africa\n1421                    0.8770          0.4790          0.3770     Asia\n1422                    0.8000          0.5920          0.3950     Asia\n1423                    0.7850          0.5100          0.3450     Asia\n1424                    0.8530          0.4540          0.3160     Asia\n1425                    0.8110          0.5320          0.3270     Asia\n1426                    0.6490          0.5120          0.3800     Asia\n1427                    0.7020          0.5060          0.3350     Asia\n1428                    0.6980          0.5510          0.3920     Asia\n1429                    0.7640          0.4100          0.3770     Asia\n1430                    0.8060          0.3910          0.3820     Asia\n1431                    0.7640          0.4140          0.3900     Asia\n1432                    0.6710          0.3930          0.3130     Asia\n1433                    0.8050          0.3790          0.3510     Asia\n1434                    0.7600          0.3470          0.3680     Asia\n1435                    0.7740          0.3320          0.4400     Asia\n1436                    0.8100          0.2970          0.4710     Asia\n1437                    0.8070          0.5520          0.2540   Africa\n1438                    0.8810          0.6700          0.2280   Africa\n1439                    0.8480          0.6230          0.2400   Africa\n1440                    0.8400          0.5940          0.2960   Africa\n1441                    0.8550          0.6280          0.2510   Africa\n1442                    0.8300          0.6180          0.2540   Africa\n1443                    0.8380          0.7090          0.2650   Africa\n1444                    0.8200          0.6470          0.3460   Africa\n1445                    0.8980          0.6350          0.3970   Africa\n1446                    0.8730          0.6790          0.3530   Africa\n1447                    0.8110          0.6650          0.4100   Africa\n1448                    0.8160          0.6890          0.4000   Africa\n1449                    0.8560          0.6870          0.3900   Africa\n1450                    0.8260          0.6890          0.3850   Africa\n1451                    0.8780          0.7050          0.4250   Africa\n1452                    0.8350          0.6990          0.3590   Africa\n1453                    0.9290          0.5510          0.2490   Europe\n1454                    0.9680          0.5590          0.2080   Europe\n1455                    0.9290          0.5450          0.1860   Europe\n1456                    0.9620          0.5450          0.1890   Europe\n1457                    0.9540          0.4720          0.2270   Europe\n1458                    0.9330          0.5390          0.2200   Europe\n1459                    0.8960          0.5090          0.1930   Europe\n1460                    0.9370          0.5720          0.2250   Europe\n1461                    0.9270          0.5430          0.2490   Europe\n1462                    0.9520          0.5310          0.2410   Europe\n1463                    0.8910          0.5500          0.2200   Europe\n1464                    0.9370          0.5280          0.2350   Europe\n1465                    0.9430          0.5500          0.2220   Europe\n1466                    0.8850          0.5490          0.2010   Europe\n1467                    0.9460          0.6290          0.2850   Europe\n1468                    0.9220          0.5750          0.2500   Europe\n1469                    0.8520          0.5270          0.3900   Europe\n1470                    0.2030          0.6940          0.2750     Asia\n1471                    0.3390          0.7180          0.2870     Asia\n1472                    0.3550          0.7010          0.2330     Asia\n1473                    0.3390          0.7020          0.2160     Asia\n1474                    0.3390          0.7190          0.2240     Asia\n1475                    0.3390          0.7180          0.2910     Asia\n1476                    0.3390          0.7180          0.2600     Asia\n1477                    0.3390          0.7220          0.2960     Asia\n1478                    0.3390          0.7390          0.2450     Asia\n1479                    0.3390          0.7370          0.2080     Asia\n1480                    0.3390          0.7230          0.3020     Asia\n1481                    0.3390          0.7300          0.2840     Asia\n1482                    0.3390          0.7020          0.2980     Asia\n1483                    0.3390          0.6970          0.2170     Asia\n1484                    0.3390          0.7150          0.2420     Asia\n1485                    0.3980          0.7790          0.2620   Europe\n1486                    0.4980          0.6860          0.2410   Europe\n1487                    0.5480          0.7240          0.2180   Europe\n1488                    0.5590          0.7390          0.2310   Europe\n1489                    0.5870          0.7530          0.1760   Europe\n1490                    0.4380          0.7420          0.1740   Europe\n1491                    0.4250          0.7390          0.1840   Europe\n1492                    0.5680          0.7190          0.2520   Europe\n1493                    0.4840          0.7400          0.2510   Europe\n1494                    0.4560          0.7400          0.2190   Europe\n1495                    0.4580          0.7320          0.2300   Europe\n1496                    0.4190          0.7120          0.2100   Europe\n1497                    0.4040          0.7360          0.2280   Europe\n1498                    0.4850          0.7390          0.2510   Europe\n1499                    0.4900          0.7170          0.2250   Europe\n1500                    0.4480          0.6840          0.2660   Europe\n1501                    0.4260          0.7230          0.2700   Europe\n1502                    0.6000          0.7750          0.2610 Americas\n1503                    0.6330          0.7560          0.2320 Americas\n1504                    0.6680          0.7740          0.2270 Americas\n1505                    0.6650          0.7530          0.2620 Americas\n1506                    0.6900          0.7760          0.2310 Americas\n1507                    0.6970          0.7370          0.2730 Americas\n1508                    0.7100          0.7650          0.2600 Americas\n1509                    0.7470          0.7760          0.2600 Americas\n1510                    0.7020          0.7860          0.2810 Americas\n1511                    0.6980          0.7690          0.2750 Americas\n1512                    0.7390          0.7370          0.2640 Americas\n1513                    0.6810          0.7550          0.2680 Americas\n1514                    0.7100          0.7570          0.2920 Americas\n1515                    0.7070          0.7550          0.2440 Americas\n1516                    0.6780          0.7220          0.2950 Americas\n1517                    0.6870          0.7400          0.2770 Americas\n1518                    0.7010          0.7120          0.2670 Americas\n1519                    0.4770          0.7010          0.3060 Americas\n1520                    0.6140          0.7100          0.2740 Americas\n1521                    0.5970          0.6850          0.2640 Americas\n1522                    0.5440          0.7220          0.2550 Americas\n1523                    0.4710          0.7380          0.2310 Americas\n1524                    0.5560          0.7020          0.2520 Americas\n1525                    0.6150          0.6920          0.2140 Americas\n1526                    0.5860          0.7430          0.2530 Americas\n1527                    0.5330          0.7880          0.2510 Americas\n1528                    0.6730          0.8120          0.3000 Americas\n1529                    0.6760          0.7350          0.2830 Americas\n1530                    0.6270          0.7420          0.2800 Americas\n1531                    0.6830          0.7750          0.2750 Americas\n1532                    0.5990          0.7640          0.2220 Americas\n1533                    0.4910          0.7210          0.2650 Americas\n1534                    0.6060          0.7460          0.2630 Americas\n1535                    0.6310          0.7750          0.2670 Americas\n1536                    0.6090          0.6500          0.1950     Asia\n1537                    0.5210          0.6470          0.1870     Asia\n1538                    0.6100          0.6460          0.1590     Asia\n1539                    0.5190          0.6650          0.1520     Asia\n1540                    0.5220          0.6630          0.1230     Asia\n1541                    0.4630          0.6500          0.1180     Asia\n1542                    0.4340          0.6860          0.1300     Asia\n1543                    0.5360          0.7130          0.1060     Asia\n1544                    0.4710          0.7780          0.1030     Asia\n1545                    0.5210          0.7710          0.1470     Asia\n1546                    0.4650          0.7450          0.2030     Asia\n1547                    0.5200          0.7460          0.2090     Asia\n1548                    0.5110          0.7510          0.2200     Asia\n1549                    0.6420          0.6780          0.2790     Asia\n1550                    0.6620          0.6980          0.2330     Asia\n1551                    0.6160          0.7410          0.2250     Asia\n1552                    0.7200          0.8030          0.2330 Americas\n1553                    0.6460          0.8370          0.1780 Americas\n1554                    0.7760          0.8180          0.2240 Americas\n1555                    0.8280          0.7920          0.1800 Americas\n1556                    0.7540          0.8470          0.1300 Americas\n1557                    0.7720          0.8230          0.1990 Americas\n1558                    0.7430          0.8440          0.1760 Americas\n1559                    0.8370          0.8120          0.2380 Americas\n1560                    0.8270          0.7970          0.2440 Americas\n1561                    0.8130          0.8370          0.2230 Americas\n1562                    0.8900          0.6760          0.3920 Americas\n1563                    0.8440          0.6970          0.3630 Americas\n1564                    0.8280          0.7230          0.3740 Americas\n1565                    0.8390          0.7300          0.3510 Americas\n1566                    0.8110          0.6890          0.3960 Americas\n1567                    0.8240          0.6980          0.3890 Americas\n1568                    0.7980          0.7540          0.2920 Americas\n1569                    0.7890          0.6570          0.2040     Asia\n1570                    0.7540          0.6340          0.2060     Asia\n1571                    0.7890          0.6240          0.2180     Asia\n1572                    0.8380          0.4810          0.1900     Asia\n1573                    0.7430          0.6710          0.2160     Asia\n1574                    0.7420          0.4940          0.1930     Asia\n1575                    0.8150          0.5460          0.2210     Asia\n1576                    0.7710          0.6890          0.1650     Asia\n1577                    0.7890          0.6340          0.2410     Asia\n1578                    0.7890          0.5830          0.2320     Asia\n1579                    0.7990          0.4870          0.2230     Asia\n1580                    0.7890          0.6340          0.2110     Asia\n1581                    0.8080          0.6140          0.1910     Asia\n1582                    0.7880          0.6580          0.1860     Asia\n1583                    0.7910          0.6990          0.2860     Asia\n1584                    0.7980          0.6510          0.2800     Asia\n1585                    0.7030          0.7740          0.1080     Asia\n1586                    0.8290          0.5240          0.3790     Asia\n1587                    0.8320          0.5110          0.3740     Asia\n1588                    0.8530          0.5140          0.3080     Asia\n1589                    0.7540          0.4160          0.2850     Asia\n1590                    0.7930          0.4130          0.2630     Asia\n1591                    0.8850          0.4780          0.2660     Asia\n1592                    0.8850          0.5270          0.2760     Asia\n1593                    0.8290          0.4580          0.3210     Asia\n1594                    0.8290          0.4010          0.2280     Asia\n1595                    0.8290          0.3680          0.2950     Asia\n1596                    0.7930          0.4090          0.3150     Asia\n1597                    0.7980          0.4810          0.2130     Asia\n1598                    0.9050          0.6690          0.2970   Africa\n1599                    0.9460          0.5890          0.2650   Africa\n1600                    0.9640          0.5710          0.2500   Africa\n1601                    0.9310          0.6600          0.2180   Africa\n1602                    0.8280          0.6990          0.1220   Africa\n1603                    0.8300          0.6990          0.2110   Africa\n1604                    0.8590          0.6130          0.1770   Africa\n1605                    0.8310          0.6240          0.1820   Africa\n1606                    0.8200          0.6610          0.2390   Africa\n1607                    0.8100          0.6390          0.1790   Africa\n1608                    0.7240          0.6850          0.2090   Africa\n1609                    0.7510          0.7340          0.2240   Africa\n1610                    0.8440          0.6580          0.2120   Africa\n1611                    0.8310          0.6580          0.2350   Africa\n1612                    0.7890          0.6610          0.3460   Africa\n1613                    0.7570          0.6100          0.2420   Africa\n1614                    0.7530          0.6410          0.1910   Africa\n                          sub.region\n1                      Southern Asia\n2                      Southern Asia\n3                      Southern Asia\n4                      Southern Asia\n5                      Southern Asia\n6                      Southern Asia\n7                      Southern Asia\n8                      Southern Asia\n9                      Southern Asia\n10                     Southern Asia\n11                     Southern Asia\n12                     Southern Asia\n13                     Southern Asia\n14                     Southern Asia\n15                   Southern Europe\n16                   Southern Europe\n17                   Southern Europe\n18                   Southern Europe\n19                   Southern Europe\n20                   Southern Europe\n21                   Southern Europe\n22                   Southern Europe\n23                   Southern Europe\n24                   Southern Europe\n25                   Southern Europe\n26                   Southern Europe\n27                   Southern Europe\n28                   Southern Europe\n29                   Southern Europe\n30   Latin America and the Caribbean\n31   Latin America and the Caribbean\n32   Latin America and the Caribbean\n33   Latin America and the Caribbean\n34   Latin America and the Caribbean\n35   Latin America and the Caribbean\n36   Latin America and the Caribbean\n37   Latin America and the Caribbean\n38   Latin America and the Caribbean\n39   Latin America and the Caribbean\n40   Latin America and the Caribbean\n41   Latin America and the Caribbean\n42   Latin America and the Caribbean\n43   Latin America and the Caribbean\n44   Latin America and the Caribbean\n45   Latin America and the Caribbean\n46   Latin America and the Caribbean\n47                      Western Asia\n48                      Western Asia\n49                      Western Asia\n50                      Western Asia\n51                      Western Asia\n52                      Western Asia\n53                      Western Asia\n54                      Western Asia\n55                      Western Asia\n56                      Western Asia\n57                      Western Asia\n58                      Western Asia\n59                      Western Asia\n60                      Western Asia\n61                      Western Asia\n62                      Western Asia\n63         Australia and New Zealand\n64         Australia and New Zealand\n65         Australia and New Zealand\n66         Australia and New Zealand\n67         Australia and New Zealand\n68         Australia and New Zealand\n69         Australia and New Zealand\n70         Australia and New Zealand\n71         Australia and New Zealand\n72         Australia and New Zealand\n73         Australia and New Zealand\n74         Australia and New Zealand\n75         Australia and New Zealand\n76         Australia and New Zealand\n77         Australia and New Zealand\n78         Australia and New Zealand\n79                    Western Europe\n80                    Western Europe\n81                    Western Europe\n82                    Western Europe\n83                    Western Europe\n84                    Western Europe\n85                    Western Europe\n86                    Western Europe\n87                    Western Europe\n88                    Western Europe\n89                    Western Europe\n90                    Western Europe\n91                    Western Europe\n92                    Western Europe\n93                    Western Europe\n94                      Western Asia\n95                      Western Asia\n96                      Western Asia\n97                      Western Asia\n98                      Western Asia\n99                      Western Asia\n100                     Western Asia\n101                     Western Asia\n102                     Western Asia\n103                     Western Asia\n104                     Western Asia\n105                     Western Asia\n106                     Western Asia\n107                     Western Asia\n108                    Southern Asia\n109                    Southern Asia\n110                    Southern Asia\n111                    Southern Asia\n112                    Southern Asia\n113                    Southern Asia\n114                    Southern Asia\n115                    Southern Asia\n116                    Southern Asia\n117                    Southern Asia\n118                    Southern Asia\n119                    Southern Asia\n120                    Southern Asia\n121                    Southern Asia\n122                    Southern Asia\n123                    Southern Asia\n124                    Southern Asia\n125                   Eastern Europe\n126                   Eastern Europe\n127                   Eastern Europe\n128                   Eastern Europe\n129                   Eastern Europe\n130                   Eastern Europe\n131                   Eastern Europe\n132                   Eastern Europe\n133                   Eastern Europe\n134                   Eastern Europe\n135                   Eastern Europe\n136                   Eastern Europe\n137                   Eastern Europe\n138                   Eastern Europe\n139                   Western Europe\n140                   Western Europe\n141                   Western Europe\n142                   Western Europe\n143                   Western Europe\n144                   Western Europe\n145                   Western Europe\n146                   Western Europe\n147                   Western Europe\n148                   Western Europe\n149                   Western Europe\n150                   Western Europe\n151                   Western Europe\n152                   Western Europe\n153                   Western Europe\n154                   Western Europe\n155  Latin America and the Caribbean\n156  Latin America and the Caribbean\n157  Latin America and the Caribbean\n158  Latin America and the Caribbean\n159  Latin America and the Caribbean\n160  Latin America and the Caribbean\n161  Latin America and the Caribbean\n162  Latin America and the Caribbean\n163  Latin America and the Caribbean\n164  Latin America and the Caribbean\n165  Latin America and the Caribbean\n166  Latin America and the Caribbean\n167  Latin America and the Caribbean\n168  Latin America and the Caribbean\n169  Latin America and the Caribbean\n170  Latin America and the Caribbean\n171  Latin America and the Caribbean\n172                  Southern Europe\n173                  Southern Europe\n174                  Southern Europe\n175                  Southern Europe\n176                  Southern Europe\n177                  Southern Europe\n178                  Southern Europe\n179                  Southern Europe\n180                  Southern Europe\n181                  Southern Europe\n182                  Southern Europe\n183                  Southern Europe\n184                  Southern Europe\n185                  Southern Europe\n186               Sub-Saharan Africa\n187               Sub-Saharan Africa\n188               Sub-Saharan Africa\n189               Sub-Saharan Africa\n190               Sub-Saharan Africa\n191               Sub-Saharan Africa\n192               Sub-Saharan Africa\n193               Sub-Saharan Africa\n194               Sub-Saharan Africa\n195               Sub-Saharan Africa\n196               Sub-Saharan Africa\n197               Sub-Saharan Africa\n198               Sub-Saharan Africa\n199  Latin America and the Caribbean\n200  Latin America and the Caribbean\n201  Latin America and the Caribbean\n202  Latin America and the Caribbean\n203  Latin America and the Caribbean\n204  Latin America and the Caribbean\n205  Latin America and the Caribbean\n206  Latin America and the Caribbean\n207  Latin America and the Caribbean\n208  Latin America and the Caribbean\n209  Latin America and the Caribbean\n210  Latin America and the Caribbean\n211  Latin America and the Caribbean\n212  Latin America and the Caribbean\n213  Latin America and the Caribbean\n214  Latin America and the Caribbean\n215  Latin America and the Caribbean\n216                   Eastern Europe\n217                   Eastern Europe\n218                   Eastern Europe\n219                   Eastern Europe\n220                   Eastern Europe\n221                   Eastern Europe\n222                   Eastern Europe\n223                   Eastern Europe\n224                   Eastern Europe\n225                   Eastern Europe\n226                   Eastern Europe\n227                   Eastern Europe\n228                   Eastern Europe\n229                   Eastern Europe\n230               Sub-Saharan Africa\n231               Sub-Saharan Africa\n232               Sub-Saharan Africa\n233               Sub-Saharan Africa\n234               Sub-Saharan Africa\n235               Sub-Saharan Africa\n236               Sub-Saharan Africa\n237               Sub-Saharan Africa\n238               Sub-Saharan Africa\n239               Sub-Saharan Africa\n240               Sub-Saharan Africa\n241               Sub-Saharan Africa\n242               Sub-Saharan Africa\n243               Sub-Saharan Africa\n244               Sub-Saharan Africa\n245               South-eastern Asia\n246               South-eastern Asia\n247               South-eastern Asia\n248               South-eastern Asia\n249               South-eastern Asia\n250               South-eastern Asia\n251               South-eastern Asia\n252               South-eastern Asia\n253               South-eastern Asia\n254               South-eastern Asia\n255               South-eastern Asia\n256               South-eastern Asia\n257               South-eastern Asia\n258               South-eastern Asia\n259               South-eastern Asia\n260               South-eastern Asia\n261               South-eastern Asia\n262               Sub-Saharan Africa\n263               Sub-Saharan Africa\n264               Sub-Saharan Africa\n265               Sub-Saharan Africa\n266               Sub-Saharan Africa\n267               Sub-Saharan Africa\n268               Sub-Saharan Africa\n269               Sub-Saharan Africa\n270               Sub-Saharan Africa\n271               Sub-Saharan Africa\n272               Sub-Saharan Africa\n273               Sub-Saharan Africa\n274               Sub-Saharan Africa\n275               Sub-Saharan Africa\n276               Sub-Saharan Africa\n277               Sub-Saharan Africa\n278               Sub-Saharan Africa\n279                 Northern America\n280                 Northern America\n281                 Northern America\n282                 Northern America\n283                 Northern America\n284                 Northern America\n285                 Northern America\n286                 Northern America\n287                 Northern America\n288                 Northern America\n289                 Northern America\n290                 Northern America\n291                 Northern America\n292                 Northern America\n293                 Northern America\n294                 Northern America\n295                 Northern America\n296               Sub-Saharan Africa\n297               Sub-Saharan Africa\n298               Sub-Saharan Africa\n299               Sub-Saharan Africa\n300               Sub-Saharan Africa\n301               Sub-Saharan Africa\n302               Sub-Saharan Africa\n303               Sub-Saharan Africa\n304               Sub-Saharan Africa\n305               Sub-Saharan Africa\n306               Sub-Saharan Africa\n307               Sub-Saharan Africa\n308               Sub-Saharan Africa\n309               Sub-Saharan Africa\n310               Sub-Saharan Africa\n311  Latin America and the Caribbean\n312  Latin America and the Caribbean\n313  Latin America and the Caribbean\n314  Latin America and the Caribbean\n315  Latin America and the Caribbean\n316  Latin America and the Caribbean\n317  Latin America and the Caribbean\n318  Latin America and the Caribbean\n319  Latin America and the Caribbean\n320  Latin America and the Caribbean\n321  Latin America and the Caribbean\n322  Latin America and the Caribbean\n323  Latin America and the Caribbean\n324  Latin America and the Caribbean\n325  Latin America and the Caribbean\n326  Latin America and the Caribbean\n327  Latin America and the Caribbean\n328  Latin America and the Caribbean\n329  Latin America and the Caribbean\n330  Latin America and the Caribbean\n331  Latin America and the Caribbean\n332  Latin America and the Caribbean\n333  Latin America and the Caribbean\n334  Latin America and the Caribbean\n335  Latin America and the Caribbean\n336  Latin America and the Caribbean\n337  Latin America and the Caribbean\n338  Latin America and the Caribbean\n339  Latin America and the Caribbean\n340  Latin America and the Caribbean\n341  Latin America and the Caribbean\n342  Latin America and the Caribbean\n343  Latin America and the Caribbean\n344  Latin America and the Caribbean\n345  Latin America and the Caribbean\n346  Latin America and the Caribbean\n347  Latin America and the Caribbean\n348  Latin America and the Caribbean\n349  Latin America and the Caribbean\n350  Latin America and the Caribbean\n351  Latin America and the Caribbean\n352  Latin America and the Caribbean\n353  Latin America and the Caribbean\n354  Latin America and the Caribbean\n355  Latin America and the Caribbean\n356  Latin America and the Caribbean\n357  Latin America and the Caribbean\n358  Latin America and the Caribbean\n359  Latin America and the Caribbean\n360  Latin America and the Caribbean\n361  Latin America and the Caribbean\n362                  Southern Europe\n363                  Southern Europe\n364                  Southern Europe\n365                  Southern Europe\n366                  Southern Europe\n367                  Southern Europe\n368                  Southern Europe\n369                  Southern Europe\n370                  Southern Europe\n371                  Southern Europe\n372                  Southern Europe\n373                  Southern Europe\n374                  Southern Europe\n375                  Southern Europe\n376                  Southern Europe\n377                     Western Asia\n378                     Western Asia\n379                     Western Asia\n380                     Western Asia\n381                     Western Asia\n382                     Western Asia\n383                     Western Asia\n384                     Western Asia\n385                     Western Asia\n386                     Western Asia\n387                     Western Asia\n388                     Western Asia\n389                     Western Asia\n390                     Western Asia\n391                     Western Asia\n392                  Northern Europe\n393                  Northern Europe\n394                  Northern Europe\n395                  Northern Europe\n396                  Northern Europe\n397                  Northern Europe\n398                  Northern Europe\n399                  Northern Europe\n400                  Northern Europe\n401                  Northern Europe\n402                  Northern Europe\n403                  Northern Europe\n404                  Northern Europe\n405                  Northern Europe\n406                  Northern Europe\n407                  Northern Europe\n408                  Northern Europe\n409  Latin America and the Caribbean\n410  Latin America and the Caribbean\n411  Latin America and the Caribbean\n412  Latin America and the Caribbean\n413  Latin America and the Caribbean\n414  Latin America and the Caribbean\n415  Latin America and the Caribbean\n416  Latin America and the Caribbean\n417  Latin America and the Caribbean\n418  Latin America and the Caribbean\n419  Latin America and the Caribbean\n420  Latin America and the Caribbean\n421  Latin America and the Caribbean\n422  Latin America and the Caribbean\n423  Latin America and the Caribbean\n424  Latin America and the Caribbean\n425  Latin America and the Caribbean\n426  Latin America and the Caribbean\n427  Latin America and the Caribbean\n428  Latin America and the Caribbean\n429  Latin America and the Caribbean\n430  Latin America and the Caribbean\n431  Latin America and the Caribbean\n432  Latin America and the Caribbean\n433  Latin America and the Caribbean\n434  Latin America and the Caribbean\n435  Latin America and the Caribbean\n436  Latin America and the Caribbean\n437  Latin America and the Caribbean\n438  Latin America and the Caribbean\n439  Latin America and the Caribbean\n440  Latin America and the Caribbean\n441  Latin America and the Caribbean\n442  Latin America and the Caribbean\n443                  Northern Africa\n444                  Northern Africa\n445                  Northern Africa\n446                  Northern Africa\n447                  Northern Africa\n448                  Northern Africa\n449                  Northern Africa\n450                  Northern Africa\n451                  Northern Africa\n452                  Northern Africa\n453                  Northern Africa\n454                  Northern Africa\n455                  Northern Africa\n456                  Northern Africa\n457                  Northern Africa\n458                  Northern Africa\n459                  Northern Africa\n460  Latin America and the Caribbean\n461  Latin America and the Caribbean\n462  Latin America and the Caribbean\n463  Latin America and the Caribbean\n464  Latin America and the Caribbean\n465  Latin America and the Caribbean\n466  Latin America and the Caribbean\n467  Latin America and the Caribbean\n468  Latin America and the Caribbean\n469  Latin America and the Caribbean\n470  Latin America and the Caribbean\n471  Latin America and the Caribbean\n472  Latin America and the Caribbean\n473  Latin America and the Caribbean\n474  Latin America and the Caribbean\n475  Latin America and the Caribbean\n476  Latin America and the Caribbean\n477                  Northern Europe\n478                  Northern Europe\n479                  Northern Europe\n480                  Northern Europe\n481                  Northern Europe\n482                  Northern Europe\n483                  Northern Europe\n484                  Northern Europe\n485                  Northern Europe\n486                  Northern Europe\n487                  Northern Europe\n488                  Northern Europe\n489                  Northern Europe\n490                  Northern Europe\n491                  Northern Europe\n492                   Western Europe\n493                   Western Europe\n494                   Western Europe\n495                   Western Europe\n496                   Western Europe\n497                   Western Europe\n498                   Western Europe\n499                   Western Europe\n500                   Western Europe\n501                   Western Europe\n502                   Western Europe\n503                   Western Europe\n504                   Western Europe\n505                   Western Europe\n506                   Western Europe\n507                   Western Europe\n508                   Western Europe\n509                     Western Asia\n510                     Western Asia\n511                     Western Asia\n512                     Western Asia\n513                     Western Asia\n514                     Western Asia\n515                     Western Asia\n516                     Western Asia\n517                     Western Asia\n518                     Western Asia\n519                     Western Asia\n520                     Western Asia\n521                     Western Asia\n522                     Western Asia\n523                     Western Asia\n524                     Western Asia\n525                     Western Asia\n526                   Western Europe\n527                   Western Europe\n528                   Western Europe\n529                   Western Europe\n530                   Western Europe\n531                   Western Europe\n532                   Western Europe\n533                   Western Europe\n534                   Western Europe\n535                   Western Europe\n536                   Western Europe\n537                   Western Europe\n538                   Western Europe\n539                   Western Europe\n540                   Western Europe\n541                   Western Europe\n542                   Western Europe\n543               Sub-Saharan Africa\n544               Sub-Saharan Africa\n545               Sub-Saharan Africa\n546               Sub-Saharan Africa\n547               Sub-Saharan Africa\n548               Sub-Saharan Africa\n549               Sub-Saharan Africa\n550               Sub-Saharan Africa\n551               Sub-Saharan Africa\n552               Sub-Saharan Africa\n553               Sub-Saharan Africa\n554               Sub-Saharan Africa\n555               Sub-Saharan Africa\n556               Sub-Saharan Africa\n557               Sub-Saharan Africa\n558               Sub-Saharan Africa\n559               Sub-Saharan Africa\n560                  Southern Europe\n561                  Southern Europe\n562                  Southern Europe\n563                  Southern Europe\n564                  Southern Europe\n565                  Southern Europe\n566                  Southern Europe\n567                  Southern Europe\n568                  Southern Europe\n569                  Southern Europe\n570                  Southern Europe\n571                  Southern Europe\n572                  Southern Europe\n573                  Southern Europe\n574                  Southern Europe\n575                  Southern Europe\n576  Latin America and the Caribbean\n577  Latin America and the Caribbean\n578  Latin America and the Caribbean\n579  Latin America and the Caribbean\n580  Latin America and the Caribbean\n581  Latin America and the Caribbean\n582  Latin America and the Caribbean\n583  Latin America and the Caribbean\n584  Latin America and the Caribbean\n585  Latin America and the Caribbean\n586  Latin America and the Caribbean\n587  Latin America and the Caribbean\n588  Latin America and the Caribbean\n589  Latin America and the Caribbean\n590  Latin America and the Caribbean\n591  Latin America and the Caribbean\n592  Latin America and the Caribbean\n593  Latin America and the Caribbean\n594  Latin America and the Caribbean\n595  Latin America and the Caribbean\n596  Latin America and the Caribbean\n597  Latin America and the Caribbean\n598  Latin America and the Caribbean\n599  Latin America and the Caribbean\n600  Latin America and the Caribbean\n601  Latin America and the Caribbean\n602  Latin America and the Caribbean\n603  Latin America and the Caribbean\n604  Latin America and the Caribbean\n605  Latin America and the Caribbean\n606  Latin America and the Caribbean\n607                   Eastern Europe\n608                   Eastern Europe\n609                   Eastern Europe\n610                   Eastern Europe\n611                   Eastern Europe\n612                   Eastern Europe\n613                   Eastern Europe\n614                   Eastern Europe\n615                   Eastern Europe\n616                   Eastern Europe\n617                   Eastern Europe\n618                   Eastern Europe\n619                   Eastern Europe\n620                   Eastern Europe\n621                   Eastern Europe\n622                   Eastern Europe\n623                    Southern Asia\n624                    Southern Asia\n625                    Southern Asia\n626                    Southern Asia\n627                    Southern Asia\n628                    Southern Asia\n629                    Southern Asia\n630                    Southern Asia\n631                    Southern Asia\n632                    Southern Asia\n633                    Southern Asia\n634                    Southern Asia\n635                    Southern Asia\n636                    Southern Asia\n637                    Southern Asia\n638                    Southern Asia\n639                    Southern Asia\n640               South-eastern Asia\n641               South-eastern Asia\n642               South-eastern Asia\n643               South-eastern Asia\n644               South-eastern Asia\n645               South-eastern Asia\n646               South-eastern Asia\n647               South-eastern Asia\n648               South-eastern Asia\n649               South-eastern Asia\n650               South-eastern Asia\n651               South-eastern Asia\n652               South-eastern Asia\n653               South-eastern Asia\n654               South-eastern Asia\n655               South-eastern Asia\n656               South-eastern Asia\n657                  Northern Europe\n658                  Northern Europe\n659                  Northern Europe\n660                  Northern Europe\n661                  Northern Europe\n662                  Northern Europe\n663                  Northern Europe\n664                  Northern Europe\n665                  Northern Europe\n666                  Northern Europe\n667                  Northern Europe\n668                  Northern Europe\n669                  Northern Europe\n670                  Northern Europe\n671                  Northern Europe\n672                  Northern Europe\n673                     Western Asia\n674                     Western Asia\n675                     Western Asia\n676                     Western Asia\n677                     Western Asia\n678                     Western Asia\n679                     Western Asia\n680                     Western Asia\n681                     Western Asia\n682                     Western Asia\n683                     Western Asia\n684                     Western Asia\n685                     Western Asia\n686                     Western Asia\n687                     Western Asia\n688                     Western Asia\n689                     Western Asia\n690                  Southern Europe\n691                  Southern Europe\n692                  Southern Europe\n693                  Southern Europe\n694                  Southern Europe\n695                  Southern Europe\n696                  Southern Europe\n697                  Southern Europe\n698                  Southern Europe\n699                  Southern Europe\n700                  Southern Europe\n701                  Southern Europe\n702                  Southern Europe\n703                  Southern Europe\n704                  Southern Europe\n705                  Southern Europe\n706                  Southern Europe\n707                     Eastern Asia\n708                     Eastern Asia\n709                     Eastern Asia\n710                     Eastern Asia\n711                     Eastern Asia\n712                     Eastern Asia\n713                     Eastern Asia\n714                     Eastern Asia\n715                     Eastern Asia\n716                     Eastern Asia\n717                     Eastern Asia\n718                     Eastern Asia\n719                     Eastern Asia\n720                     Eastern Asia\n721                     Eastern Asia\n722                     Eastern Asia\n723                     Eastern Asia\n724                     Western Asia\n725                     Western Asia\n726                     Western Asia\n727                     Western Asia\n728                     Western Asia\n729                     Western Asia\n730                     Western Asia\n731                     Western Asia\n732                     Western Asia\n733                     Western Asia\n734                     Western Asia\n735                     Western Asia\n736                     Western Asia\n737                     Western Asia\n738                     Western Asia\n739                     Western Asia\n740                     Western Asia\n741                     Central Asia\n742                     Central Asia\n743                     Central Asia\n744                     Central Asia\n745                     Central Asia\n746                     Central Asia\n747                     Central Asia\n748                     Central Asia\n749                     Central Asia\n750                     Central Asia\n751                     Central Asia\n752                     Central Asia\n753                     Central Asia\n754                     Central Asia\n755                     Central Asia\n756                     Central Asia\n757                     Central Asia\n758               Sub-Saharan Africa\n759               Sub-Saharan Africa\n760               Sub-Saharan Africa\n761               Sub-Saharan Africa\n762               Sub-Saharan Africa\n763               Sub-Saharan Africa\n764               Sub-Saharan Africa\n765               Sub-Saharan Africa\n766               Sub-Saharan Africa\n767               Sub-Saharan Africa\n768               Sub-Saharan Africa\n769               Sub-Saharan Africa\n770               Sub-Saharan Africa\n771               Sub-Saharan Africa\n772               Sub-Saharan Africa\n773               Sub-Saharan Africa\n774               Sub-Saharan Africa\n775                     Central Asia\n776                     Central Asia\n777                     Central Asia\n778                     Central Asia\n779                     Central Asia\n780                     Central Asia\n781                     Central Asia\n782                     Central Asia\n783                     Central Asia\n784                     Central Asia\n785                     Central Asia\n786                     Central Asia\n787                     Central Asia\n788                     Central Asia\n789                     Central Asia\n790                     Central Asia\n791                     Central Asia\n792                     Western Asia\n793                     Western Asia\n794                     Western Asia\n795                     Western Asia\n796                     Western Asia\n797                     Western Asia\n798                     Western Asia\n799                     Western Asia\n800                     Western Asia\n801                     Western Asia\n802                     Western Asia\n803                     Western Asia\n804                     Western Asia\n805                     Western Asia\n806                     Western Asia\n807                     Western Asia\n808                     Western Asia\n809                  Northern Europe\n810                  Northern Europe\n811                  Northern Europe\n812                  Northern Europe\n813                  Northern Europe\n814                  Northern Europe\n815                  Northern Europe\n816                  Northern Europe\n817                  Northern Europe\n818                  Northern Europe\n819                  Northern Europe\n820                  Northern Europe\n821                  Northern Europe\n822                  Northern Europe\n823                  Northern Europe\n824                  Northern Europe\n825                  Northern Europe\n826                   Western Europe\n827                   Western Europe\n828                   Western Europe\n829                   Western Europe\n830                   Western Europe\n831                   Western Europe\n832                   Western Europe\n833                   Western Europe\n834                   Western Europe\n835                   Western Europe\n836                   Western Europe\n837                   Western Europe\n838               Sub-Saharan Africa\n839               Sub-Saharan Africa\n840               Sub-Saharan Africa\n841               Sub-Saharan Africa\n842               Sub-Saharan Africa\n843               Sub-Saharan Africa\n844               Sub-Saharan Africa\n845               Sub-Saharan Africa\n846               Sub-Saharan Africa\n847               Sub-Saharan Africa\n848               Sub-Saharan Africa\n849               Sub-Saharan Africa\n850               Sub-Saharan Africa\n851               Sub-Saharan Africa\n852               Sub-Saharan Africa\n853               Sub-Saharan Africa\n854                  Southern Europe\n855                  Southern Europe\n856                  Southern Europe\n857                  Southern Europe\n858                  Southern Europe\n859                  Southern Europe\n860                  Southern Europe\n861                  Southern Europe\n862                  Southern Europe\n863                  Southern Europe\n864                  Southern Europe\n865                  Southern Europe\n866                  Southern Europe\n867                  Southern Europe\n868               Sub-Saharan Africa\n869               Sub-Saharan Africa\n870               Sub-Saharan Africa\n871               Sub-Saharan Africa\n872               Sub-Saharan Africa\n873               Sub-Saharan Africa\n874               Sub-Saharan Africa\n875               Sub-Saharan Africa\n876               Sub-Saharan Africa\n877               Sub-Saharan Africa\n878               Sub-Saharan Africa\n879               Sub-Saharan Africa\n880               Sub-Saharan Africa\n881               Sub-Saharan Africa\n882  Latin America and the Caribbean\n883  Latin America and the Caribbean\n884  Latin America and the Caribbean\n885  Latin America and the Caribbean\n886  Latin America and the Caribbean\n887  Latin America and the Caribbean\n888  Latin America and the Caribbean\n889  Latin America and the Caribbean\n890  Latin America and the Caribbean\n891  Latin America and the Caribbean\n892  Latin America and the Caribbean\n893  Latin America and the Caribbean\n894  Latin America and the Caribbean\n895  Latin America and the Caribbean\n896  Latin America and the Caribbean\n897  Latin America and the Caribbean\n898  Latin America and the Caribbean\n899                   Eastern Europe\n900                   Eastern Europe\n901                   Eastern Europe\n902                   Eastern Europe\n903                   Eastern Europe\n904                   Eastern Europe\n905                   Eastern Europe\n906                   Eastern Europe\n907                   Eastern Europe\n908                   Eastern Europe\n909                   Eastern Europe\n910                   Eastern Europe\n911                   Eastern Europe\n912                   Eastern Europe\n913                   Eastern Europe\n914                   Eastern Europe\n915                   Eastern Europe\n916                     Eastern Asia\n917                     Eastern Asia\n918                     Eastern Asia\n919                     Eastern Asia\n920                     Eastern Asia\n921                     Eastern Asia\n922                     Eastern Asia\n923                     Eastern Asia\n924                     Eastern Asia\n925                     Eastern Asia\n926                     Eastern Asia\n927                     Eastern Asia\n928                     Eastern Asia\n929                     Eastern Asia\n930                     Eastern Asia\n931                  Southern Europe\n932                  Southern Europe\n933                  Southern Europe\n934                  Southern Europe\n935                  Southern Europe\n936                  Southern Europe\n937                  Southern Europe\n938                  Southern Europe\n939                  Southern Europe\n940                  Southern Europe\n941                  Southern Europe\n942                  Southern Europe\n943                  Southern Europe\n944                    Southern Asia\n945                    Southern Asia\n946                    Southern Asia\n947                    Southern Asia\n948                    Southern Asia\n949                    Southern Asia\n950                    Southern Asia\n951                    Southern Asia\n952                    Southern Asia\n953                    Southern Asia\n954                    Southern Asia\n955                    Southern Asia\n956                    Southern Asia\n957                    Southern Asia\n958                    Southern Asia\n959                    Southern Asia\n960                    Southern Asia\n961                   Western Europe\n962                   Western Europe\n963                   Western Europe\n964                   Western Europe\n965                   Western Europe\n966                   Western Europe\n967                   Western Europe\n968                   Western Europe\n969                   Western Europe\n970                   Western Europe\n971                   Western Europe\n972                   Western Europe\n973                   Western Europe\n974                   Western Europe\n975                   Western Europe\n976                   Western Europe\n977        Australia and New Zealand\n978        Australia and New Zealand\n979        Australia and New Zealand\n980        Australia and New Zealand\n981        Australia and New Zealand\n982        Australia and New Zealand\n983        Australia and New Zealand\n984        Australia and New Zealand\n985        Australia and New Zealand\n986        Australia and New Zealand\n987        Australia and New Zealand\n988        Australia and New Zealand\n989        Australia and New Zealand\n990        Australia and New Zealand\n991        Australia and New Zealand\n992        Australia and New Zealand\n993  Latin America and the Caribbean\n994  Latin America and the Caribbean\n995  Latin America and the Caribbean\n996  Latin America and the Caribbean\n997  Latin America and the Caribbean\n998  Latin America and the Caribbean\n999  Latin America and the Caribbean\n1000 Latin America and the Caribbean\n1001 Latin America and the Caribbean\n1002 Latin America and the Caribbean\n1003 Latin America and the Caribbean\n1004 Latin America and the Caribbean\n1005 Latin America and the Caribbean\n1006 Latin America and the Caribbean\n1007 Latin America and the Caribbean\n1008 Latin America and the Caribbean\n1009 Latin America and the Caribbean\n1010              Sub-Saharan Africa\n1011              Sub-Saharan Africa\n1012              Sub-Saharan Africa\n1013              Sub-Saharan Africa\n1014              Sub-Saharan Africa\n1015              Sub-Saharan Africa\n1016              Sub-Saharan Africa\n1017              Sub-Saharan Africa\n1018              Sub-Saharan Africa\n1019              Sub-Saharan Africa\n1020              Sub-Saharan Africa\n1021              Sub-Saharan Africa\n1022              Sub-Saharan Africa\n1023              Sub-Saharan Africa\n1024              Sub-Saharan Africa\n1025                 Southern Europe\n1026                 Southern Europe\n1027                 Southern Europe\n1028                 Southern Europe\n1029                 Southern Europe\n1030                 Southern Europe\n1031                 Southern Europe\n1032                 Southern Europe\n1033                 Southern Europe\n1034                 Southern Europe\n1035                 Southern Europe\n1036                 Southern Europe\n1037                 Southern Europe\n1038                 Southern Europe\n1039                 Southern Europe\n1040                   Southern Asia\n1041                   Southern Asia\n1042                   Southern Asia\n1043                   Southern Asia\n1044                   Southern Asia\n1045                   Southern Asia\n1046                   Southern Asia\n1047                   Southern Asia\n1048                   Southern Asia\n1049                   Southern Asia\n1050                   Southern Asia\n1051                   Southern Asia\n1052                   Southern Asia\n1053                   Southern Asia\n1054                   Southern Asia\n1055                   Southern Asia\n1056 Latin America and the Caribbean\n1057 Latin America and the Caribbean\n1058 Latin America and the Caribbean\n1059 Latin America and the Caribbean\n1060 Latin America and the Caribbean\n1061 Latin America and the Caribbean\n1062 Latin America and the Caribbean\n1063 Latin America and the Caribbean\n1064 Latin America and the Caribbean\n1065 Latin America and the Caribbean\n1066 Latin America and the Caribbean\n1067 Latin America and the Caribbean\n1068 Latin America and the Caribbean\n1069 Latin America and the Caribbean\n1070 Latin America and the Caribbean\n1071 Latin America and the Caribbean\n1072 Latin America and the Caribbean\n1073 Latin America and the Caribbean\n1074 Latin America and the Caribbean\n1075 Latin America and the Caribbean\n1076 Latin America and the Caribbean\n1077 Latin America and the Caribbean\n1078 Latin America and the Caribbean\n1079 Latin America and the Caribbean\n1080 Latin America and the Caribbean\n1081 Latin America and the Caribbean\n1082 Latin America and the Caribbean\n1083 Latin America and the Caribbean\n1084 Latin America and the Caribbean\n1085 Latin America and the Caribbean\n1086 Latin America and the Caribbean\n1087 Latin America and the Caribbean\n1088 Latin America and the Caribbean\n1089              South-eastern Asia\n1090              South-eastern Asia\n1091              South-eastern Asia\n1092              South-eastern Asia\n1093              South-eastern Asia\n1094              South-eastern Asia\n1095              South-eastern Asia\n1096              South-eastern Asia\n1097              South-eastern Asia\n1098              South-eastern Asia\n1099              South-eastern Asia\n1100              South-eastern Asia\n1101              South-eastern Asia\n1102              South-eastern Asia\n1103              South-eastern Asia\n1104              South-eastern Asia\n1105                  Eastern Europe\n1106                  Eastern Europe\n1107                  Eastern Europe\n1108                  Eastern Europe\n1109                  Eastern Europe\n1110                  Eastern Europe\n1111                  Eastern Europe\n1112                  Eastern Europe\n1113                  Eastern Europe\n1114                  Eastern Europe\n1115                  Eastern Europe\n1116                  Eastern Europe\n1117                  Eastern Europe\n1118                  Eastern Europe\n1119                  Eastern Europe\n1120                  Eastern Europe\n1121                 Southern Europe\n1122                 Southern Europe\n1123                 Southern Europe\n1124                 Southern Europe\n1125                 Southern Europe\n1126                 Southern Europe\n1127                 Southern Europe\n1128                 Southern Europe\n1129                 Southern Europe\n1130                 Southern Europe\n1131                 Southern Europe\n1132                 Southern Europe\n1133                 Southern Europe\n1134                 Southern Europe\n1135                 Southern Europe\n1136                  Eastern Europe\n1137                  Eastern Europe\n1138                  Eastern Europe\n1139                  Eastern Europe\n1140                  Eastern Europe\n1141                  Eastern Europe\n1142                  Eastern Europe\n1143                  Eastern Europe\n1144                  Eastern Europe\n1145                  Eastern Europe\n1146                  Eastern Europe\n1147                  Eastern Europe\n1148                  Eastern Europe\n1149                  Eastern Europe\n1150                  Eastern Europe\n1151                  Eastern Europe\n1152                  Eastern Europe\n1153                  Eastern Europe\n1154                  Eastern Europe\n1155                  Eastern Europe\n1156                  Eastern Europe\n1157                  Eastern Europe\n1158                  Eastern Europe\n1159                  Eastern Europe\n1160                  Eastern Europe\n1161                  Eastern Europe\n1162                  Eastern Europe\n1163                  Eastern Europe\n1164                  Eastern Europe\n1165                  Eastern Europe\n1166                  Eastern Europe\n1167                  Eastern Europe\n1168                  Eastern Europe\n1169                    Western Asia\n1170                    Western Asia\n1171                    Western Asia\n1172                    Western Asia\n1173                    Western Asia\n1174                    Western Asia\n1175                    Western Asia\n1176                    Western Asia\n1177                    Western Asia\n1178                    Western Asia\n1179                    Western Asia\n1180                    Western Asia\n1181                    Western Asia\n1182                    Western Asia\n1183                    Western Asia\n1184                    Western Asia\n1185                    Western Asia\n1186              Sub-Saharan Africa\n1187              Sub-Saharan Africa\n1188              Sub-Saharan Africa\n1189              Sub-Saharan Africa\n1190              Sub-Saharan Africa\n1191              Sub-Saharan Africa\n1192              Sub-Saharan Africa\n1193              Sub-Saharan Africa\n1194              Sub-Saharan Africa\n1195              Sub-Saharan Africa\n1196              Sub-Saharan Africa\n1197              Sub-Saharan Africa\n1198              Sub-Saharan Africa\n1199              Sub-Saharan Africa\n1200              Sub-Saharan Africa\n1201              Sub-Saharan Africa\n1202              Sub-Saharan Africa\n1203                 Southern Europe\n1204                 Southern Europe\n1205                 Southern Europe\n1206                 Southern Europe\n1207                 Southern Europe\n1208                 Southern Europe\n1209                 Southern Europe\n1210                 Southern Europe\n1211                 Southern Europe\n1212                 Southern Europe\n1213                 Southern Europe\n1214                 Southern Europe\n1215                 Southern Europe\n1216                 Southern Europe\n1217              South-eastern Asia\n1218              South-eastern Asia\n1219              South-eastern Asia\n1220              South-eastern Asia\n1221              South-eastern Asia\n1222              South-eastern Asia\n1223              South-eastern Asia\n1224              South-eastern Asia\n1225              South-eastern Asia\n1226              South-eastern Asia\n1227              South-eastern Asia\n1228              South-eastern Asia\n1229              South-eastern Asia\n1230              South-eastern Asia\n1231              South-eastern Asia\n1232                  Eastern Europe\n1233                  Eastern Europe\n1234                  Eastern Europe\n1235                  Eastern Europe\n1236                  Eastern Europe\n1237                  Eastern Europe\n1238                  Eastern Europe\n1239                  Eastern Europe\n1240                  Eastern Europe\n1241                  Eastern Europe\n1242                  Eastern Europe\n1243                  Eastern Europe\n1244                  Eastern Europe\n1245                 Southern Europe\n1246                 Southern Europe\n1247                 Southern Europe\n1248                 Southern Europe\n1249                 Southern Europe\n1250                 Southern Europe\n1251                 Southern Europe\n1252                 Southern Europe\n1253                 Southern Europe\n1254                 Southern Europe\n1255                 Southern Europe\n1256                 Southern Europe\n1257                 Southern Europe\n1258                 Southern Europe\n1259                 Southern Europe\n1260              Sub-Saharan Africa\n1261              Sub-Saharan Africa\n1262              Sub-Saharan Africa\n1263              Sub-Saharan Africa\n1264              Sub-Saharan Africa\n1265              Sub-Saharan Africa\n1266              Sub-Saharan Africa\n1267              Sub-Saharan Africa\n1268              Sub-Saharan Africa\n1269              Sub-Saharan Africa\n1270              Sub-Saharan Africa\n1271              Sub-Saharan Africa\n1272              Sub-Saharan Africa\n1273              Sub-Saharan Africa\n1274              Sub-Saharan Africa\n1275              Sub-Saharan Africa\n1276                    Eastern Asia\n1277                    Eastern Asia\n1278                    Eastern Asia\n1279                    Eastern Asia\n1280                    Eastern Asia\n1281                    Eastern Asia\n1282                    Eastern Asia\n1283                    Eastern Asia\n1284                    Eastern Asia\n1285                    Eastern Asia\n1286                    Eastern Asia\n1287                    Eastern Asia\n1288                    Eastern Asia\n1289                    Eastern Asia\n1290                    Eastern Asia\n1291                    Eastern Asia\n1292                    Eastern Asia\n1293                 Southern Europe\n1294                 Southern Europe\n1295                 Southern Europe\n1296                 Southern Europe\n1297                 Southern Europe\n1298                 Southern Europe\n1299                 Southern Europe\n1300                 Southern Europe\n1301                 Southern Europe\n1302                 Southern Europe\n1303                 Southern Europe\n1304                 Southern Europe\n1305                 Southern Europe\n1306                 Southern Europe\n1307                 Southern Europe\n1308                 Southern Europe\n1309                 Southern Europe\n1310                    Western Asia\n1311                    Western Asia\n1312                    Western Asia\n1313                    Western Asia\n1314                    Western Asia\n1315                    Western Asia\n1316                    Western Asia\n1317                    Western Asia\n1318                    Western Asia\n1319                    Western Asia\n1320                    Western Asia\n1321                    Western Asia\n1322                    Western Asia\n1323                    Western Asia\n1324                    Western Asia\n1325                 Northern Europe\n1326                 Northern Europe\n1327                 Northern Europe\n1328                 Northern Europe\n1329                 Northern Europe\n1330                 Northern Europe\n1331                 Northern Europe\n1332                 Northern Europe\n1333                 Northern Europe\n1334                 Northern Europe\n1335                 Northern Europe\n1336                 Northern Europe\n1337                 Northern Europe\n1338                 Northern Europe\n1339                 Northern Europe\n1340                 Northern Europe\n1341                 Northern Europe\n1342                    Eastern Asia\n1343                    Eastern Asia\n1344                    Eastern Asia\n1345                    Eastern Asia\n1346                    Eastern Asia\n1347                    Eastern Asia\n1348                    Eastern Asia\n1349                    Eastern Asia\n1350                    Eastern Asia\n1351                    Eastern Asia\n1352                    Eastern Asia\n1353                    Eastern Asia\n1354                    Eastern Asia\n1355                    Eastern Asia\n1356                    Eastern Asia\n1357                    Central Asia\n1358                    Central Asia\n1359                    Central Asia\n1360                    Central Asia\n1361                    Central Asia\n1362                    Central Asia\n1363                    Central Asia\n1364                    Central Asia\n1365                    Central Asia\n1366                    Central Asia\n1367                    Central Asia\n1368                    Central Asia\n1369                    Central Asia\n1370                    Central Asia\n1371                    Central Asia\n1372                    Central Asia\n1373              Sub-Saharan Africa\n1374              Sub-Saharan Africa\n1375              Sub-Saharan Africa\n1376              Sub-Saharan Africa\n1377              Sub-Saharan Africa\n1378              Sub-Saharan Africa\n1379              Sub-Saharan Africa\n1380              Sub-Saharan Africa\n1381              Sub-Saharan Africa\n1382              Sub-Saharan Africa\n1383              Sub-Saharan Africa\n1384              Sub-Saharan Africa\n1385              Sub-Saharan Africa\n1386              Sub-Saharan Africa\n1387              Sub-Saharan Africa\n1388              Sub-Saharan Africa\n1389              Sub-Saharan Africa\n1390              South-eastern Asia\n1391              South-eastern Asia\n1392              South-eastern Asia\n1393              South-eastern Asia\n1394              South-eastern Asia\n1395              South-eastern Asia\n1396              South-eastern Asia\n1397              South-eastern Asia\n1398              South-eastern Asia\n1399              South-eastern Asia\n1400              South-eastern Asia\n1401              South-eastern Asia\n1402              South-eastern Asia\n1403              South-eastern Asia\n1404              South-eastern Asia\n1405              South-eastern Asia\n1406              South-eastern Asia\n1407                 Northern Africa\n1408                 Northern Africa\n1409                 Northern Africa\n1410                 Northern Africa\n1411                 Northern Africa\n1412                 Northern Africa\n1413                 Northern Africa\n1414                 Northern Africa\n1415                 Northern Africa\n1416                 Northern Africa\n1417                 Northern Africa\n1418                 Northern Africa\n1419                 Northern Africa\n1420                 Northern Africa\n1421                    Western Asia\n1422                    Western Asia\n1423                    Western Asia\n1424                    Western Asia\n1425                    Western Asia\n1426                    Western Asia\n1427                    Western Asia\n1428                    Western Asia\n1429                    Western Asia\n1430                    Western Asia\n1431                    Western Asia\n1432                    Western Asia\n1433                    Western Asia\n1434                    Western Asia\n1435                    Western Asia\n1436                    Western Asia\n1437              Sub-Saharan Africa\n1438              Sub-Saharan Africa\n1439              Sub-Saharan Africa\n1440              Sub-Saharan Africa\n1441              Sub-Saharan Africa\n1442              Sub-Saharan Africa\n1443              Sub-Saharan Africa\n1444              Sub-Saharan Africa\n1445              Sub-Saharan Africa\n1446              Sub-Saharan Africa\n1447              Sub-Saharan Africa\n1448              Sub-Saharan Africa\n1449              Sub-Saharan Africa\n1450              Sub-Saharan Africa\n1451              Sub-Saharan Africa\n1452              Sub-Saharan Africa\n1453                  Eastern Europe\n1454                  Eastern Europe\n1455                  Eastern Europe\n1456                  Eastern Europe\n1457                  Eastern Europe\n1458                  Eastern Europe\n1459                  Eastern Europe\n1460                  Eastern Europe\n1461                  Eastern Europe\n1462                  Eastern Europe\n1463                  Eastern Europe\n1464                  Eastern Europe\n1465                  Eastern Europe\n1466                  Eastern Europe\n1467                  Eastern Europe\n1468                  Eastern Europe\n1469                  Eastern Europe\n1470                    Western Asia\n1471                    Western Asia\n1472                    Western Asia\n1473                    Western Asia\n1474                    Western Asia\n1475                    Western Asia\n1476                    Western Asia\n1477                    Western Asia\n1478                    Western Asia\n1479                    Western Asia\n1480                    Western Asia\n1481                    Western Asia\n1482                    Western Asia\n1483                    Western Asia\n1484                    Western Asia\n1485                 Northern Europe\n1486                 Northern Europe\n1487                 Northern Europe\n1488                 Northern Europe\n1489                 Northern Europe\n1490                 Northern Europe\n1491                 Northern Europe\n1492                 Northern Europe\n1493                 Northern Europe\n1494                 Northern Europe\n1495                 Northern Europe\n1496                 Northern Europe\n1497                 Northern Europe\n1498                 Northern Europe\n1499                 Northern Europe\n1500                 Northern Europe\n1501                 Northern Europe\n1502                Northern America\n1503                Northern America\n1504                Northern America\n1505                Northern America\n1506                Northern America\n1507                Northern America\n1508                Northern America\n1509                Northern America\n1510                Northern America\n1511                Northern America\n1512                Northern America\n1513                Northern America\n1514                Northern America\n1515                Northern America\n1516                Northern America\n1517                Northern America\n1518                Northern America\n1519 Latin America and the Caribbean\n1520 Latin America and the Caribbean\n1521 Latin America and the Caribbean\n1522 Latin America and the Caribbean\n1523 Latin America and the Caribbean\n1524 Latin America and the Caribbean\n1525 Latin America and the Caribbean\n1526 Latin America and the Caribbean\n1527 Latin America and the Caribbean\n1528 Latin America and the Caribbean\n1529 Latin America and the Caribbean\n1530 Latin America and the Caribbean\n1531 Latin America and the Caribbean\n1532 Latin America and the Caribbean\n1533 Latin America and the Caribbean\n1534 Latin America and the Caribbean\n1535 Latin America and the Caribbean\n1536                    Central Asia\n1537                    Central Asia\n1538                    Central Asia\n1539                    Central Asia\n1540                    Central Asia\n1541                    Central Asia\n1542                    Central Asia\n1543                    Central Asia\n1544                    Central Asia\n1545                    Central Asia\n1546                    Central Asia\n1547                    Central Asia\n1548                    Central Asia\n1549                    Central Asia\n1550                    Central Asia\n1551                    Central Asia\n1552 Latin America and the Caribbean\n1553 Latin America and the Caribbean\n1554 Latin America and the Caribbean\n1555 Latin America and the Caribbean\n1556 Latin America and the Caribbean\n1557 Latin America and the Caribbean\n1558 Latin America and the Caribbean\n1559 Latin America and the Caribbean\n1560 Latin America and the Caribbean\n1561 Latin America and the Caribbean\n1562 Latin America and the Caribbean\n1563 Latin America and the Caribbean\n1564 Latin America and the Caribbean\n1565 Latin America and the Caribbean\n1566 Latin America and the Caribbean\n1567 Latin America and the Caribbean\n1568 Latin America and the Caribbean\n1569              South-eastern Asia\n1570              South-eastern Asia\n1571              South-eastern Asia\n1572              South-eastern Asia\n1573              South-eastern Asia\n1574              South-eastern Asia\n1575              South-eastern Asia\n1576              South-eastern Asia\n1577              South-eastern Asia\n1578              South-eastern Asia\n1579              South-eastern Asia\n1580              South-eastern Asia\n1581              South-eastern Asia\n1582              South-eastern Asia\n1583              South-eastern Asia\n1584              South-eastern Asia\n1585              South-eastern Asia\n1586                    Western Asia\n1587                    Western Asia\n1588                    Western Asia\n1589                    Western Asia\n1590                    Western Asia\n1591                    Western Asia\n1592                    Western Asia\n1593                    Western Asia\n1594                    Western Asia\n1595                    Western Asia\n1596                    Western Asia\n1597                    Western Asia\n1598              Sub-Saharan Africa\n1599              Sub-Saharan Africa\n1600              Sub-Saharan Africa\n1601              Sub-Saharan Africa\n1602              Sub-Saharan Africa\n1603              Sub-Saharan Africa\n1604              Sub-Saharan Africa\n1605              Sub-Saharan Africa\n1606              Sub-Saharan Africa\n1607              Sub-Saharan Africa\n1608              Sub-Saharan Africa\n1609              Sub-Saharan Africa\n1610              Sub-Saharan Africa\n1611              Sub-Saharan Africa\n1612              Sub-Saharan Africa\n1613              Sub-Saharan Africa\n1614              Sub-Saharan Africa\n\ncolSums(is.na(WHRdata_cleaned))\n\n                  Country                      Year           Happiness.Score \n                        0                         0                         0 \n       Log.GDP.per.Capita            Social.Support   Healthy.Life.Expectancy \n                        0                         0                         0 \n                  Freedom                Generosity Perceptions.of.Corruption \n                        0                         0                         0 \n          Positive.Affect           Negative.Affect                    Region \n                        0                         0                         0 \n               sub.region \n                        0 \n\n\n\nskimr::skim_without_charts(WHRdata_cleaned)\n\n\nData summary\n\n\nName\nWHRdata_cleaned\n\n\nNumber of rows\n1614\n\n\nNumber of columns\n13\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n10\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nCountry\n0\n1\n4\n24\n0\n101\n0\n\n\nRegion\n0\n1\n4\n8\n0\n5\n0\n\n\nsub.region\n0\n1\n12\n31\n0\n14\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\n\n\n\n\nYear\n0\n1\n2014.05\n4.79\n2005.00\n2010.00\n2014.00\n2018.00\n2022.00\n\n\nHappiness.Score\n0\n1\n5.64\n1.10\n1.28\n4.83\n5.67\n6.47\n8.02\n\n\nLog.GDP.per.Capita\n0\n1\n9.55\n1.07\n5.53\n8.74\n9.62\n10.49\n11.66\n\n\nSocial.Support\n0\n1\n0.83\n0.11\n0.23\n0.78\n0.86\n0.91\n0.99\n\n\nHealthy.Life.Expectancy\n0\n1\n64.57\n5.99\n40.40\n61.58\n65.70\n69.36\n74.47\n\n\nFreedom\n0\n1\n0.75\n0.14\n0.26\n0.66\n0.78\n0.86\n0.98\n\n\nGenerosity\n0\n1\n-0.01\n0.16\n-0.34\n-0.12\n-0.04\n0.09\n0.55\n\n\nPerceptions.of.Corruption\n0\n1\n0.74\n0.19\n0.04\n0.68\n0.80\n0.88\n0.98\n\n\nPositive.Affect\n0\n1\n0.65\n0.11\n0.18\n0.57\n0.67\n0.74\n0.88\n\n\nNegative.Affect\n0\n1\n0.27\n0.08\n0.08\n0.21\n0.26\n0.32\n0.61\n\n\n\n\n\n\nwrite_csv(WHRdata_cleaned, file = \"World Happiness Data (2010-2019)_cleaned.csv\")"
  }
]